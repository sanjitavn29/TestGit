{
	"info": {
		"_postman_id": "663608a4-7869-494f-9f46-bfc3df84ec4d",
		"name": "Connect2_0IntegrationTestSuite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19404321"
	},
	"item": [
		{
			"name": "TestSuite",
			"item": [
				{
					"name": "INIT",
					"item": [
						{
							"name": "InitializeTestSuite",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//------------------------------------------------------------------\r",
											"getClientCodes = () => {\r",
											"    let clientCodes = pm.environment.get(\"clientCodes\");\r",
											"    for (var clientCode of clientCodes) {\r",
											"        for (key of Object.keys(clientCode)) {\r",
											"            pm.environment.set(key, clientCode[key]);\r",
											"        }\r",
											"    }\r",
											"};\r",
											"getClientCodes();\r",
											"getBatchFileNames = () =>{\r",
											"    let batchFileNames = pm.environment.get(\"batchFileNames\");\r",
											"    for (var batchFileName of batchFileNames) {\r",
											"        for (key of Object.keys(batchFileName)) {\r",
											"            pm.environment.set(key, batchFileName[key]);\r",
											"        }\r",
											"    }\r",
											"}\r",
											"getBatchFileNames();\r",
											"\r",
											"pm.globals.set('connectUtils', function connectUtils() {\r",
											"    let utils = {};\r",
											"\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getCompanyName = ()=>{\r",
											"        let companyNames = pm.environment.get(\"companyNamesList\");\r",
											"        return companyNames[_.random(0, companyNames.length - 1)];\r",
											"    }\r",
											"    utils.enableOrDisableFeatures = () => {\r",
											"        let featuresToSkipList = pm.environment.get(\"featuresToSkip\");\r",
											"        let featuresToRunList = pm.environment.get(\"featuresToRun\");\r",
											"        if(typeof(featuresToSkipList) != 'undefined' && typeof(featuresToRunList) != 'undefined') {\r",
											"            let parentFeatureName = pm.variables.get(\"parentFolder\");\r",
											"            let featureName = pm.variables.get(\"folder\");\r",
											"            pm.test(\"Initializing \" + featureName, ()=>{});\r",
											"            let terminateRequestName = \"terminate-\" + featureName;\r",
											"            var isSkipped = false;\r",
											"            var isNotIncluded = false;\r",
											"            isSkipped = featuresToSkipList.includes(featureName) || featuresToSkipList.includes(parentFeatureName);\r",
											"            isNotIncluded = featuresToRunList.length != 0 && (!(featuresToRunList.includes(featureName) || featuresToRunList.includes(parentFeatureName)))\r",
											"            if(isSkipped || isNotIncluded) {\r",
											"                pm.test(\"Skipping all request from \" + featureName, ()=>{});\r",
											"                 postman.setNextRequest(terminateRequestName);\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    utils.enableOrDisableBatchFeatures = () => {\r",
											"        let featuresToSkipList = pm.environment.get(\"featuresToSkip\");\r",
											"        let featuresToRunList = pm.environment.get(\"featuresToRun\");\r",
											"        if(typeof(featuresToSkipList) != 'undefined' && typeof(featuresToRunList) != 'undefined') {\r",
											"            let parentFeatureName = pm.variables.get(\"parentFolder\");\r",
											"            let featureName = pm.variables.get(\"folder\");\r",
											"            pm.test(\"Starting automation : \" + featureName, ()=>{});\r",
											"            let terminateRequestName = \"stop-automation-\" + featureName;\r",
											"            var isSkipped = false;\r",
											"            var isNotIncluded = false;\r",
											"            isSkipped = featuresToSkipList.includes(featureName) || featuresToSkipList.includes(parentFeatureName);\r",
											"            isNotIncluded = featuresToRunList.length != 0 && (!(featuresToRunList.includes(featureName) || featuresToRunList.includes(parentFeatureName)))\r",
											"            if(isSkipped || isNotIncluded) {\r",
											"                pm.test(\"Skipping all request from \" + featureName, ()=>{});\r",
											"                 postman.setNextRequest(terminateRequestName);\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getRandomString = () => {\r",
											"        let max = 52;\r",
											"        let min = 0;\r",
											"        let dynamicString = \"\";\r",
											"        for (dynamicString = \"\"; dynamicString.length < 5;) {\r",
											"            dynamicString += \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"[(Math.random() * (max - min) + min) | 0];\r",
											"        }\r",
											"        return dynamicString;\r",
											"    };\r",
											"\r",
											"    //-------------------------------------------------------------------------------------------\r",
											"    utils.getAddressLine1 = function getAddressLine1() {\r",
											"        let houseNo = _.random(0, 999);\r",
											"        let streetName = _.capitalize(utils.getRandomString());\r",
											"        let addressLine1 = \"HouseNo:\" + houseNo + \",\" + streetName + \" Street\";\r",
											"        return addressLine1;\r",
											"    }\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getRandomNumberBetween = function getRandomNumberBetween(min, max) {\r",
											"        return Math.floor(Math.random() * (max - min) + min);\r",
											"    }\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getRandomNormalizedNames = () => {\r",
											"        // let normalizedNames = [\r",
											"        //     {\r",
											"        //         \"name\": \"christopher\",\r",
											"        //         \"normalizedName\": \"chris\"\r",
											"        //     },\r",
											"        //     {\r",
											"        //         \"name\": \"joseph\",\r",
											"        //         \"normalizedName\": \"joe\"\r",
											"        //     }\r",
											"        // ];\r",
											"        // return normalizedNames[_.random(0, normalizedNames.length - 1)];\r",
											"        let normalizedNames = pm.environment.get(\"normalizedNamesList\");\r",
											"        return normalizedNames[_.random(0, normalizedNames.length - 1)];\r",
											"    };\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getFirstNameLastNameCrosssMatchedNames = () => {\r",
											"        // let crossMatchNames = [\r",
											"        //     {\r",
											"        //         \"name\": \"Shamarh joe Brooks\",\r",
											"        //         \"crossMatchName\": \"Brooks joe Shamarh\"\r",
											"        //     },\r",
											"        //     {\r",
											"        //         \"name\": \"levi elijah asher\",\r",
											"        //         \"crossMatchName\": \"asher elijah levi\"\r",
											"        //     }\r",
											"        // ];\r",
											"        // return crossMatchNames[_.random(0, crossMatchNames.length - 1)];\r",
											"        let crossMatchNames = pm.environment.get(\"crossMatchFirstLastNamesList\");\r",
											"        return crossMatchNames[_.random(0, crossMatchNames.length - 1)];\r",
											"    };\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getFirstNameMiddleNameCrosssMatchedNames = () => {\r",
											"        // let crossMatchNames = [\r",
											"        //     {\r",
											"        //         \"name\": \"Shamarh joe Brooks\",\r",
											"        //         \"crossMatchName\": \"joe Shamarh Brooks\"\r",
											"        //     },\r",
											"        //     {\r",
											"       //         \"name\": \"levi elijah asher\",\r",
											"        //         \"crossMatchName\": \"elijah levi asher\"\r",
											"        //     }\r",
											"        // ];\r",
											"        // return crossMatchNames[_.random(0, crossMatchNames.length - 1)];\r",
											"        let crossMatchNames = pm.environment.get(\"crossMatchFirstMiddleNamesList\");\r",
											"        return crossMatchNames[_.random(0, crossMatchNames.length - 1)];\r",
											"    };\r",
											"\r",
											"    utils.getConflictMiddleNames = () => {\r",
											"        // let crossMatchNames = [\r",
											"        //     {\r",
											"        //         \"name\": \"Shamarh joe Brooks\",\r",
											"        //         \"conflictMiddleName\": \"Shamarh levi Brooks\"\r",
											"        //     }\r",
											"        // ];\r",
											"        // return crossMatchNames[_.random(0, crossMatchNames.length - 1)];\r",
											"        let conflictMiddleNames = pm.environment.get(\"conflictMiddleNamesList\");\r",
											"        return conflictMiddleNames[_.random(0, conflictMiddleNames.length - 1)];\r",
											"    };\r",
											"\r",
											"    utils.getMiddleNameInitialsNames = () => {\r",
											"        // let names = [\r",
											"        //     {\r",
											"        //         \"name\": \"Clifford Harrisson Pauline\",\r",
											"        //         \"middleNameWithInitial\": \"Clifford H Pauline\"\r",
											"        //     }\r",
											"        // ];\r",
											"        // return names[_.random(0, names.length - 1)];\r",
											"        let namesWithMiddleNameInitial = pm.environment.get(\"namesWithMiddleNameInitialList\");\r",
											"        return namesWithMiddleNameInitial[_.random(0, namesWithMiddleNameInitial.length - 1)];\r",
											"    };\r",
											"\r",
											"    utils.getHyphenatedFullName = () => {\r",
											"        // let crossMatchNames = [\r",
											"        //     {\r",
											"        //         \"name\": \"John Shai Campbell Holder\",\r",
											"        //         \"hypenatedName\": \"John Shai Campbell-Holder\"\r",
											"        //     }\r",
											"        // ];\r",
											"        // return crossMatchNames[_.random(0, crossMatchNames.length - 1)];\r",
											"        let hyphenatedNames = pm.environment.get(\"hyphenatedNamesList\");\r",
											"        return hyphenatedNames[_.random(0, hyphenatedNames.length - 1)];\r",
											"    };\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getFuzzyName = (fullName) => {\r",
											"        return fullName.substr(0, fullName.length - 1);\r",
											"    };\r",
											"    //------------------------------------------------------------------------------------------\r",
											"    utils.getValidNames = () => {\r",
											"        // let names = [\"john\", \"smith\", \"williams\", \"philips\", \"james\", \"robert\", \"tyler\", \"ethan\", \"michael\", \"anthony\", \"daniel\", \"monica\", \"rachel\", \"elijah\", \"benjamin\", \"logan\", \"levi\", \"samuel\", \"david\", \"wyatt\", \"mathew\", \"asher\", \"carter\"];\r",
											"        // return names[_.random(0, names.length - 1)];\r",
											"        let names = pm.environment.get(\"namesList\");\r",
											"        return names[_.random(0, names.length - 1)];\r",
											"    }\r",
											"    //--------------------------------------------------------------------------------------------\r",
											"    utils.getValidFullNames = () => {\r",
											"        // let names = [\"JENNIFER M BRANTIGAN\",\"KHAREED BRATHWAITE\",\"KATERYNA SHYSHKOVA\",\"SANTOS GARCIA CALDERON\",\"DANNY L BROTTON\",\"TAMMY PRESUTTI\",\"SHIPMAN JENNIFER\"];\r",
											"        // return names[_.random(0, names.length - 1)];\r",
											"        let fullNames = pm.environment.get(\"fullNamesList\");\r",
											"        return fullNames[_.random(0, fullNames.length - 1)];\r",
											"    };\r",
											"    //--------------------------------------------------------------------------------------------\r",
											"    utils.getKey = function getKey(prefix) {\r",
											"        return prefix + _.random(0, 9999999999999);\r",
											"    }\r",
											"    //--------------------------------------------------------------------------------------------\r",
											"    utils.generateIMSInput = (testerInput) => {\r",
											"        let contextId = (typeof (testerInput.contextId) == 'undefined') ? \"testbu\" : testerInput.contextId;\r",
											"        let customerKey = (typeof (testerInput.customerKey) == 'undefined') ? utils.getKey(\"CKEY_\") : testerInput.customerKey;\r",
											"        let emailAddress = (typeof (testerInput.emailAddress) == 'undefined') ? utils.getEmail() : testerInput.emailAddress;\r",
											"        let customerId = (typeof (testerInput.customerId) == 'undefined') ? utils.getKey(\"CID_\") : testerInput.customerId;\r",
											"        let smsNumber = (typeof (testerInput.smsNumber) == 'undefined') ? utils.getRandomNumberBetween(100000000, 999999999) + \"\" : testerInput.smsNumber;\r",
											"        let deviceId = (typeof (testerInput.deviceId) == 'undefined') ? utils.getRandomNumberBetween(1000, 999999) + \"\" : testerInput.deviceId;\r",
											"        let parentId = (typeof (testerInput.parentId) == 'undefined') ? utils.getKey(\"PID_\") : testerInput.parentId;\r",
											"\r",
											"        let inputData = {\r",
											"            \"contextId\": contextId,\r",
											"            \"customerKey\": customerKey,\r",
											"            \"emailAddress\": emailAddress,\r",
											"            \"customerId\": customerId,\r",
											"            \"smsNumber\": smsNumber,\r",
											"            \"deviceId\": deviceId,\r",
											"            \"parentId\": parentId\r",
											"        };\r",
											"        return inputData;\r",
											"    }\r",
											"    //--------------------------------------------------------------------------------------------\r",
											"    utils.submitIMSPostRequest = (caller, requestDetail, preRequestNo) => {\r",
											"\r",
											"    let postRequest = utils.getPostRequest(requestDetail);\r",
											"    let msg = typeof (requestDetail.msg) == 'undefined' ? \" \" : requestDetail.msg;\r",
											"\r",
											"    pm.sendRequest(postRequest, (error, response) => {\r",
											"        pm.test(\"Generating data for precondition.  \" + msg, () => {\r",
											"            pm.expect(response).to.have.property('code', 200);\r",
											"        });\r",
											"        let outputData = response;\r",
											"\r",
											"        switch (preRequestNo) {\r",
											"            case \"preRequest1\":\r",
											"                caller.saveExistingDataFromPreRequest1(outputData);\r",
											"                caller.setCurrentRequestDataFromPrerequest1(outputData);\r",
											"                break;\r",
											"            case \"preRequest2\":\r",
											"                caller.saveExistingDataFromPreRequest2(outputData);\r",
											"                caller.setCurrentRequestDataFromPrerequest2(outputData);\r",
											"\r",
											"                break;\r",
											"            case \"preRequest3\":\r",
											"                caller.saveExistingDataFromPreRequest3(outputData);\r",
											"                caller.setCurrentRequestDataFromPrerequest3(outputData);\r",
											"\r",
											"                break;\r",
											"            case \"preRequest4\":\r",
											"                caller.saveExistingDataFromPreRequest4(outputData);\r",
											"                caller.setCurrentRequestDataFromPrerequest4(outputData);\r",
											"\r",
											"                break;\r",
											"            case \"preRequest5\":\r",
											"                caller.saveExistingDataFromPreRequest5(outputData);\r",
											"                caller.setCurrentRequestDataFromPrerequest5(outputData);\r",
											"                break;\r",
											"        }\r",
											"\r",
											"    });\r",
											"};\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getIMSOutputData = (responseBody) => {\r",
											"        let outputData = {};\r",
											"        if (typeof (responseBody) == \"string\") {\r",
											"            outputData = { \"message\": responseBody };\r",
											"        }\r",
											"        else {\r",
											"            outputData = JSON.parse(responseBody);\r",
											"        }\r",
											"        return outputData;\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateOKResponse = () => {\r",
											"        pm.test(\"Validate Response -> OK(200) response.\", () => {\r",
											"            pm.response.to.be.ok;\r",
											"            pm.response.to.be.withBody;\r",
											"            pm.response.to.be.json;\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.displayData = (msg, object, keys) => {\r",
											"        let dataToDisplay = \"[\";\r",
											"        for(key of keys) {\r",
											"            value = object[key]\r",
											"            if(value == '') {\r",
											"                value = ' '\r",
											"            }\r",
											"            dataToDisplay = dataToDisplay + key + \"=\"  + value + \"|\"\r",
											"        }\r",
											"        dataToDisplay = dataToDisplay.slice(0, -1); // Remove last comma\r",
											"        dataToDisplay = dataToDisplay + \"]\";\r",
											"        pm.test( msg + dataToDisplay);\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateNewId = (outputData, idKey) => {\r",
											"        pm.test(\"Validate output ->  A new identity record gets created & new \"+idKey+\" comes populated in the response.\", ()=>{\r",
											"            utils.validateIfNonEmpty(outputData[idKey]);\r",
											"        });\r",
											"    }\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateScenario = (msg) => {\r",
											"            pm.test(\"Validate scenario -> \" + msg , true);\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateRequiredFields = (object, keys) => {\r",
											"        var allKeys = '';\r",
											"        for(key of keys) {\r",
											"            allKeys = allKeys + key + \",\"\r",
											"        }\r",
											"        allKeys = allKeys.slice(0, -1); // Remove last comma\r",
											"        pm.test(\"Validate Input -> Required fields (\" + allKeys +\") are provided.\",()=>{\r",
											"            for(key of keys) {\r",
											"                utils.validateIfNonEmpty(object[key]);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateEmptyBodyOKResponse = () => {\r",
											"        pm.test(\"Validate Response -> OK(200) response.\", () => {\r",
											"            pm.response.to.be.ok;\r",
											"            pm.response.to.be.withBody;\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateForbiddenResponse = () => {\r",
											"        pm.test(\"Validate Response -> FORBIDDEN(403) response.\", () => {\r",
											"            pm.response.to.have.status(403);\r",
											"        });\r",
											"    }\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateBadRequestResponse = () => {\r",
											"        pm.test(\"Validate Response -> BAD REQUEST(400) response.\", () => {\r",
											"            pm.response.to.have.status(400);\r",
											"        });\r",
											"    }\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateInternalErrorResponse = () => {\r",
											"        pm.test(\"Validate Response -> INTERNAL ERROR(500) response.\", () => {\r",
											"            pm.response.to.have.status(500);\r",
											"        });\r",
											"    }\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateIfNonEmpty = (attribute) => {\r",
											"        pm.expect(attribute).to.not.equal(null);\r",
											"        pm.expect(attribute).to.not.equal(undefined);\r",
											"        pm.expect(attribute).to.be.not.empty;\r",
											"    }\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateIfEmpty = (attribute) => {\r",
											"        //pm.expect(attribute).to.equal(null);\r",
											"        pm.expect(attribute.trim()).to.be.empty;\r",
											"    }\r",
											"\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validatePOSTRequest = (clientCode) => {\r",
											"        msg = \"Check request => [request method = \" + pm.request.method + \", clientCode=\" + pm.request.headers.get(\"clientCode\") + \"]\";\r",
											"        pm.test(msg, () => {\r",
											"            pm.expect(pm.request.headers.get(\"accessToken\")).to.not.equal(\"\");\r",
											"            pm.expect(pm.request.headers.get(\"clientCode\")).to.equal(clientCode);\r",
											"            pm.expect(pm.request.method).to.equal(\"POST\")\r",
											"        });\r",
											"    }\r",
											"\r",
											"    utils.validateGETRequest = (clientCode, inputParams) => {\r",
											"        var params = {};\r",
											"        pm.request.url.query.all().forEach((param) => { params[param.key] = param.value });\r",
											"        msg = \"Check request => [request method = \" + pm.request.method + \", \"\r",
											"            + \"clientCode=\" + pm.request.headers.get(\"clientCode\") + \", \"\r",
											"            + \"QueryParameters=\" + JSON.stringify(params) + \", \"\r",
											"            + \"]\";\r",
											"        pm.test(msg, () => {\r",
											"            pm.expect(pm.request.headers.get(\"accessToken\")).to.not.equal(\"\");\r",
											"            pm.expect(pm.request.headers.get(\"clientCode\")).to.equal(clientCode);\r",
											"            pm.expect(pm.request.method).to.equal(\"GET\");\r",
											"            inputParams.forEach((inputParam) => { pm.expect(params[inputParam]).to.not.equal(\"\"); });\r",
											"        });\r",
											"    }\r",
											"\r",
											"    utils.validateDELETERequest = (clientCode) => {\r",
											"        msg = \"Check request => [request method = \" + pm.request.method + \", clientCode=\" + pm.request.headers.get(\"clientCode\") + \"]\";\r",
											"        pm.test(msg, () => {\r",
											"            pm.expect(pm.request.headers.get(\"accessToken\")).to.not.equal(\"\");\r",
											"            pm.expect(pm.request.headers.get(\"clientCode\")).to.equal(clientCode);\r",
											"            pm.expect(pm.request.method).to.equal(\"DELETE\")\r",
											"        });\r",
											"    }\r",
											"\r",
											"    utils.validatePOSTRequestWithNoAccessToken = (clientCode) => {\r",
											"        msg = \"Check request => [request method = \" + pm.request.method + \", clientCode=\" + pm.request.headers.get(\"clientCode\") + \"]\";\r",
											"        pm.test(msg, () => {\r",
											"            pm.expect(pm.request.headers.get(\"accessToken\")).to.equal(\"\");\r",
											"            pm.expect(pm.request.headers.get(\"clientCode\")).to.equal(clientCode);\r",
											"            pm.expect(pm.request.method).to.equal(\"POST\")\r",
											"        });\r",
											"    }\r",
											"\r",
											"    utils.validateGETRequestWithNoAccessToken = (clientCode, inputParams) => {\r",
											"        var params = {};\r",
											"        pm.request.url.query.all().forEach((param) => { params[param.key] = param.value });\r",
											"        msg = \"Check request => [request method = \" + pm.request.method + \", \"\r",
											"            + \"clientCode=\" + pm.request.headers.get(\"clientCode\") + \", \"\r",
											"            + \"QueryParameters=\" + JSON.stringify(params) + \", \"\r",
											"            + \"]\";\r",
											"        pm.test(msg, () => {\r",
											"            pm.expect(pm.request.headers.get(\"accessToken\")).to.equal(\"\");\r",
											"            pm.expect(pm.request.headers.get(\"clientCode\")).to.equal(clientCode);\r",
											"            pm.expect(pm.request.method).to.equal(\"GET\");\r",
											"            inputParams.forEach((inputParam) => { pm.expect(params[inputParam]).to.not.equal(\"\"); });\r",
											"        });\r",
											"    }\r",
											"\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateRequest = (method) => {\r",
											"        pm.expect(pm.request.method).to.equal(method);\r",
											"    };\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getOutputData = (responseData) => {\r",
											"        if (typeof (responseData) == 'undefined' || typeof (responseData.identityOutput) == 'undefined') {\r",
											"            console.log(\"undefined response data\");\r",
											"            return {};\r",
											"        }\r",
											"        let outputData = {\r",
											"            \"individualId\": responseData.identityOutput.individualId,\r",
											"            \"businessId\": responseData.identityOutput.businessId,\r",
											"            \"siteId\": responseData.identityOutput.standardizedIdentity.siteId,\r",
											"            \"householdId\": responseData.identityOutput.standardizedIdentity.householdId,\r",
											"            \"addressId\": responseData.identityOutput.standardizedIdentity.addressId,\r",
											"            \"userCorrelationId\": responseData.userCorrelationId,\r",
											"            \"fullName\": responseData.nameHygieneOutput.givenName\r",
											"                + \" \" + responseData.nameHygieneOutput.middleName\r",
											"                + \" \" + responseData.nameHygieneOutput.familyName,\r",
											"            \"addressLine1\": responseData.addressHygieneOutput.standardizedAddress.addressLine1,\r",
											"            \"addressLine2\": responseData.addressHygieneOutput.standardizedAddress.addressLine2,\r",
											"            \"emailAddress1\": responseData.emailHygieneOutput.cleansedEmailAddress1.cleansedEmailAddress,\r",
											"            \"emailAddress2\": responseData.emailHygieneOutput.cleansedEmailAddress2.cleansedEmailAddress,\r",
											"            \"emailHygiene1ReturnCode\": responseData.emailHygieneOutput.cleansedEmailAddress1.returnCode,\r",
											"            \"phone1\": responseData.phoneHygieneOutput.cleansedPhone1.cleansedPhone,\r",
											"            \"phone2\": responseData.phoneHygieneOutput.cleansedPhone2.cleansedPhone,\r",
											"            \"phone3\": responseData.phoneHygieneOutput.cleansedPhone3.cleansedPhone,\r",
											"            \"phoneHygieneReturncode1\": responseData.phoneHygieneOutput.cleansedPhone1.returnCode,\r",
											"            \"phoneHygieneReturncode2\": responseData.phoneHygieneOutput.cleansedPhone2.returnCode,\r",
											"            \"phoneHygieneReturncode3\": responseData.phoneHygieneOutput.cleansedPhone3.returnCode,\r",
											"            \"postalCode\": responseData.addressHygieneOutput.standardizedAddress.postalCode,\r",
											"            \"countryCode\": responseData.addressHygieneOutput.standardizedAddress.isoCode,\r",
											"            \"isoCode\": responseData.addressHygieneOutput.standardizedAddress.isoCode,\r",
											"            \"prefixName\":responseData.nameHygieneOutput.prefixName,\r",
											"            \"givenName\": responseData.nameHygieneOutput.givenName,\r",
											"            \"middleName\": responseData.nameHygieneOutput.middleName,\r",
											"            \"familyName\": responseData.nameHygieneOutput.familyName,\r",
											"            \"nameHygieneReturnCode\": responseData.nameHygieneOutput.returnCode,\r",
											"            \"nameHygieneProfanity\": responseData.nameHygieneOutput.profanity,\r",
											"            \"occupancyScore\": responseData.identityOutput.standardizedIdentity.occupancyScore,\r",
											"            \"tspAppendData\": responseData.identityOutput.tspAppendData,\r",
											"            \"professionalSuffix\": responseData.nameHygieneOutput.professionalSuffix,\r",
											"            \"generationalSuffix\": responseData.nameHygieneOutput.generationalSuffix,\r",
											"            \"consolidatedIds\": responseData.identityOutput.consolidations.consolidatedIds,\r",
											"            \"businessConsolidationsIds\": responseData.identityOutput.businessConsolidations.consolidatedIds,\r",
											"            \"deceased\"  : responseData.identityOutput.standardizedIdentity.deceased ,\r",
											"            \"deceasedDob\"  : responseData.identityOutput.standardizedIdentity.deceasedDob,\r",
											"            \"deceasedDod\"  : responseData.identityOutput.standardizedIdentity.deceasedDod,\r",
											"            \"doNotMail\"  : responseData.identityOutput.standardizedIdentity.doNotMail,\r",
											"            \"doNotCall\"  : responseData.identityOutput.standardizedIdentity.doNotCall,\r",
											"            \"doNotFax\"  : responseData.identityOutput.standardizedIdentity.doNotFax,\r",
											"            \"prison\"  : responseData.identityOutput.standardizedIdentity.prison,\r",
											"            \"nursingHome\"  : responseData.identityOutput.standardizedIdentity.nursingHome,   \r",
											"            \"companyName\" : responseData.nameHygieneOutput.companyName,\r",
											"            \"standardizedAddressReturnCode\" : responseData.addressHygieneOutput.standardizedAddress.returnCode,\r",
											"            \"standardizedAddressReturnCodeDesc\" : responseData.addressHygieneOutput.standardizedAddress.returnCodeDesc,\r",
											"            \"bestAddressReturnCode\" : responseData.addressHygieneOutput.bestAddress.returnCode,\r",
											"            \"bestAddressReturnCodeDesc\" : responseData.addressHygieneOutput.bestAddress.returnCodeDesc,\r",
											"            \"standardizedAddressMailabilityScore\":responseData.addressHygieneOutput.standardizedAddress.mailabilityScore,\r",
											"            \"bestAddressMailabilityScore\":responseData.addressHygieneOutput.bestAddress.mailabilityScore,\r",
											"            \"standardizedAddressMultiType\":responseData.addressHygieneOutput.standardizedAddress.multiType,\r",
											"            \"bestAddressMultiType\":responseData.addressHygieneOutput.bestAddress.multiType,\r",
											"            \"standardizedAddressAgeoSta\":responseData.addressHygieneOutput.standardizedAddress.ageoSta,\r",
											"            \"bestAddressAgeoSta\":responseData.addressHygieneOutput.bestAddress.ageoSta,\r",
											"            \"rdiFlag\":responseData.addressHygieneOutput.standardizedAddress.rdiFlag,\r",
											"            'identityOutputReturnCode' : responseData.identityOutput.returnCode\r",
											"\r",
											"        };\r",
											"        return outputData;\r",
											"    }\r",
											"\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.printExistingData = (caller) => {\r",
											"        let existingDataToDisplay = caller.defineExistingDataToDisplay();\r",
											"        if (null != existingDataToDisplay) {\r",
											"            pm.test(\"Check existing data=>\" + existingDataToDisplay);\r",
											"        }\r",
											"    };\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.printInputData = (caller) => {\r",
											"        let inputDataToDisplay = caller.defineInputDataToDisplay();\r",
											"        if (null != inputDataToDisplay) {\r",
											"            pm.test(\"Check input data =>\" + inputDataToDisplay);\r",
											"        }\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.printOutputData = (caller) => {\r",
											"        let outputDataToDisplay = caller.defineOutputDataToDisplay();\r",
											"        if (null != outputDataToDisplay) {\r",
											"            pm.test(\"Check output data => \" + outputDataToDisplay);\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.validateAll = (caller) => {\r",
											"        skipTestIfNoClientCode = pm.environment.get(\"skipTestIfNoClientCode\");\r",
											"        console.log(pm.request.headers.get(\"clientCode\"))\r",
											"        if(pm.request.headers.get(\"clientCode\") == \"\" &&  skipTestIfNoClientCode== \"true\"){\r",
											"            //pm.test.skip(\"Skipped - (as client code is not available) \" + pm.info.requestName );\r",
											"            pm.test.skip(\"SKIPPED - (as client code is not available.) --- \" +\"TESTCASE: \" + pm.info.requestName);\r",
											"        }\r",
											"        else {\r",
											"            utils.printExistingData(caller);\r",
											"            utils.printInputData(caller);\r",
											"            utils.printOutputData(caller);\r",
											"            caller.defineRequestValidation();\r",
											"            caller.defineResponseValidation();\r",
											"            caller.defineExistingDataValidation();\r",
											"            caller.defineInputDataValidation();\r",
											"            caller.defineOutputDataValidation();\r",
											"        }\r",
											"    }\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.submitBatchRequest = ( caller,requestDetail,preRequestNo) => {\r",
											"        let postRequest = utils.getPostRequestForBatch(requestDetail);\r",
											"        let msg = typeof (requestDetail.msg) == 'undefined' ? \" \" : requestDetail.msg;\r",
											"        \r",
											"        skipTestIfNoClientCode = pm.environment.get(\"skipTestIfNoClientCode\");\r",
											"        console.log(postRequest)\r",
											"        pm.sendRequest(postRequest, (error, response) => {\r",
											"            console.log(response);\r",
											"            if(requestDetail.clientCode == \"\" &&  skipTestIfNoClientCode== \"true\"){\r",
											"            console.log(\"skip\");\r",
											"            }\r",
											"            else{\r",
											"            pm.test(\"Generating data for precondition. \" + msg, () => {\r",
											"                pm.expect(response).to.have.property('code', 202);\r",
											"                });\r",
											"            }\r",
											"            console.log(response);\r",
											"            let outputData = utils.getBatchOutputData(response.json());\r",
											"            console.log(outputData);\r",
											"            switch (preRequestNo) {\r",
											"                case \"preRequest1\":\r",
											"                    caller.saveExistingDataFromPreRequest1(outputData);\r",
											"                    caller.setCurrentRequestDataFromPrerequest1(outputData);\r",
											"                    break;\r",
											"                case \"preRequest2\":\r",
											"                    caller.saveExistingDataFromPreRequest2(outputData);\r",
											"                    caller.setCurrentRequestDataFromPrerequest2(outputData);\r",
											"\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"\r",
											"    utils.getBatchOutputData = (responseData) => {\r",
											"        if (typeof (responseData) == 'undefined') {\r",
											"            console.log(\"undefined response data\");\r",
											"            return {};\r",
											"        }\r",
											"        let outputData = {\r",
											"            \"jobId\": responseData.jobId\r",
											"        };\r",
											"        return outputData;\r",
											"    }\r",
											"\r",
											"    utils.getPostRequestForBatch = (requestInput) => {\r",
											"\r",
											"        let header = {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"clientCode\": requestInput.clientCode\r",
											"        };\r",
											"\r",
											"        const postRequest = {\r",
											"            url: requestInput.url,\r",
											"            method: \"POST\",\r",
											"            header: header,\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(requestInput.data)\r",
											"            }\r",
											"        };\r",
											"\r",
											"        return postRequest;\r",
											"    };\r",
											"\r",
											"\r",
											"    utils.generateBatchPayload = (testerInput) => {\r",
											"        let sourceFile = (typeof (testerInput.sourceFile) == 'undefined') ? \"\" : testerInput.sourceFile;\r",
											"        let enableNameHygiene = (typeof (testerInput.enableNameHygiene) == 'undefined') ? \"yes\" : testerInput.enableNameHygiene;\r",
											"        let enableEmailHygiene = (typeof (testerInput.enableEmailHygiene) == 'undefined') ? \"yes\" : \"no\";\r",
											"        let enablePhoneHygiene = (typeof (testerInput.enablePhoneHygiene) == 'undefined') ? \"yes\" : testerInput.enablePhoneHygiene;\r",
											"        let enableAddressHygiene = (typeof (testerInput.enableAddressHygiene) == 'undefined') ? \"yes\" : testerInput.enableAddressHygiene;\r",
											"        let enablePac = (typeof (testerInput.enablePac) == 'undefined') ? \"no\" : testerInput.enablePac;\r",
											"        let enablePcoa = (typeof (testerInput.enablePcoa) == 'undefined') ? \"no\" : testerInput.enablePcoa;\r",
											"        let enableNcoa = (typeof (testerInput.enableNcoa) == 'undefined') ? \"no\" : testerInput.enableNcoa;\r",
											"        let enableDSF2 = (typeof (testerInput.enableDSF2) == 'undefined') ? \"yes\" : testerInput.enableDSF2;\r",
											"        let enableDSFWalkSequence = (typeof (testerInput.enableDSFWalkSequence) == 'undefined') ? \"yes\" : testerInput.enableDSFWalkSequence;\r",
											"        let enableIdentity = (typeof (testerInput.enableIdentity) == 'undefined') ? \"yes\" : testerInput.enableIdentity;\r",
											"        let enableOccupancyScore = (typeof (testerInput.enableOccupancyScore) == 'undefined') ? \"no\" : testerInput.enableOccupancyScore;\r",
											"        let enableGlobalSuppression = (typeof (testerInput.enableGlobalSuppression) == 'undefined') ? \"no\" : testerInput.enableGlobalSuppression;\r",
											"        let enableTspAppend = (typeof (testerInput.enableTspAppend) == 'undefined') ? \"no\" : testerInput.enableTspAppend;\r",
											"\r",
											"\r",
											"        let payload = {\r",
											"            \"sourceFile\": sourceFile,\r",
											"            \"serviceConfig\": {\r",
											"            \"enableNameHygiene\": enableNameHygiene,\r",
											"            \"enableEmailHygiene\": enableEmailHygiene,\r",
											"            \"enablePhoneHygiene\": enablePhoneHygiene,\r",
											"            \"enableAddressHygiene\": enableAddressHygiene,\r",
											"            \"configAddressHygiene\": {\r",
											"            \"enablePac\": enablePac,\r",
											"            \"enablePcoa\": enablePcoa,\r",
											"            \"enableNcoa\": enableNcoa,\r",
											"            \"enableDSF2\": enableDSF2,\r",
											"            \"enableDSFWalkSequence\": enableDSFWalkSequence\r",
											"            },\r",
											"            \"enableIdentity\": enableIdentity,\r",
											"            \"enableOccupancyScore\": enableOccupancyScore,\r",
											"            \"enableGlobalSuppression\": enableGlobalSuppression,\r",
											"            \"enableTspAppend\": enableTspAppend\r",
											"        }\r",
											"    }\r",
											"         return payload;\r",
											"}\r",
											"\r",
											"\r",
											"    utils.submitPostRequest = (caller, requestDetail, preRequestNo) => {\r",
											"        let postRequest = utils.getPostRequest(requestDetail);\r",
											"        let msg = typeof (requestDetail.msg) == 'undefined' ? \" \" : requestDetail.msg;\r",
											"        skipTestIfNoClientCode = pm.environment.get(\"skipTestIfNoClientCode\");\r",
											"        pm.sendRequest(postRequest, (error, response) => {\r",
											"            if(requestDetail.clientCode == \"\" &&  skipTestIfNoClientCode== \"true\"){\r",
											"            console.log(\"skip\");\r",
											"           }\r",
											"            else{\r",
											"            pm.test(\"Generating data for precondition. \" + msg, () => {\r",
											"                pm.expect(response).to.have.property('code', 200);\r",
											"                });\r",
											"            }\r",
											"            let outputData = utils.getOutputData(response.json());\r",
											"\r",
											"            switch (preRequestNo) {\r",
											"                case \"preRequest1\":\r",
											"                    caller.saveExistingDataFromPreRequest1(outputData);\r",
											"                    caller.setCurrentRequestDataFromPrerequest1(outputData);\r",
											"                    break;\r",
											"                case \"preRequest2\":\r",
											"                    caller.saveExistingDataFromPreRequest2(outputData);\r",
											"                    caller.setCurrentRequestDataFromPrerequest2(outputData);\r",
											"\r",
											"                    break;\r",
											"                case \"preRequest3\":\r",
											"                    caller.saveExistingDataFromPreRequest3(outputData);\r",
											"                    caller.setCurrentRequestDataFromPrerequest3(outputData);\r",
											"\r",
											"                    break;\r",
											"                case \"preRequest4\":\r",
											"                    caller.saveExistingDataFromPreRequest4(outputData);\r",
											"                    caller.setCurrentRequestDataFromPrerequest4(outputData);\r",
											"\r",
											"                    break;\r",
											"                case \"preRequest5\":\r",
											"                    caller.saveExistingDataFromPreRequest5(outputData);\r",
											"                    caller.setCurrentRequestDataFromPrerequest5(outputData);\r",
											"                    break;\r",
											"            }\r",
											"\r",
											"        });\r",
											"        \r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.generateIdentityPayload = (testerInput) => {\r",
											"\r",
											"        let emailAddress1 = (typeof (testerInput.emailAddress1) == 'undefined') ? utils.getEmail() : testerInput.emailAddress1;\r",
											"        let emailAddress2 = (typeof (testerInput.emailAddress1) == 'undefined') ? \"\" : testerInput.emailAddress2;\r",
											"        let countryCode = (typeof (testerInput.countryCode) == 'undefined') ? \"USA\" : testerInput.countryCode;\r",
											"        let fullName = (typeof (testerInput.fullName) == 'undefined') ? utils.getFullName() : testerInput.fullName;\r",
											"        let phone1 = (typeof (testerInput.phone1) == 'undefined') ? utils.getValidPhone1() : testerInput.phone1;\r",
											"        let businessEmail = (typeof (testerInput.businessEmail) == 'undefined') ? \"\" : testerInput.businessEmail;\r",
											"        let businessPhone = (typeof (testerInput.businessPhone) == 'undefined') ? \"\" : testerInput.businessPhone;\r",
											"        let companyName = (typeof (testerInput.companyName) == 'undefined') ? \"\" : testerInput.companyName;\r",
											"        let userCorrelationId = (typeof (testerInput.userCorrelationId) == 'undefined') ? utils.getRandomNumberBetween(10, 999999999) : testerInput.userCorrelationId;\r",
											"        let postalCode = (typeof (testerInput.postalCode) == 'undefined') ? utils.getRandomNumberBetween(10000, 99999) + \"\" : testerInput.postalCode;\r",
											"        let addressLine1 = (typeof (testerInput.addressLine1) == 'undefined') ? utils.getAddressLine1() : testerInput.addressLine1;\r",
											"        let gender = (typeof (testerInput.gender) == 'undefined') ? utils.getGender() : testerInput.gender;\r",
											"        let mode = (typeof (testerInput.mode) == 'undefined') ? \"IDENTITY\" : testerInput.mode;\r",
											"\r",
											"        let enableAddressHygiene = (typeof (testerInput.enableAddressHygiene) == 'undefined') ? \"yes\" : testerInput.enableAddressHygiene;\r",
											"        let enableEmailHygiene = (typeof (testerInput.enableEmailHygiene) == 'undefined') ? \"yes\" : testerInput.enableEmailHygiene;\r",
											"        let enableNameHygiene = (typeof (testerInput.enableNameHygiene) == 'undefined') ? \"yes\" : testerInput.enableNameHygiene;\r",
											"        let enableIdentity = (typeof (testerInput.enableIdentity) == 'undefined') ? \"yes\" : testerInput.enableIdentity;\r",
											"        let enablePhoneHygiene = (typeof (testerInput.enablePhoneHygiene) == 'undefined') ? \"yes\" : testerInput.enablePhoneHygiene;\r",
											"\r",
											"        let enableGlobalSuppression = (typeof (testerInput.enableGlobalSuppression) == 'undefined') ? \"no\" : testerInput.enableGlobalSuppression;\r",
											"        let enableOccupancyScore = (typeof (testerInput.enableOccupancyScore) == 'undefined') ? \"no\" : testerInput.enableOccupancyScore;\r",
											"        let enableTspAppend = (typeof (testerInput.enableTspAppend) == 'undefined') ? \"no\" : testerInput.enableTspAppend;\r",
											"        let enablePac = (typeof (testerInput.enablePac) == 'undefined') ? \"no\" : testerInput.enablePac;\r",
											"        let enablePcoa = (typeof (testerInput.enablePcoa) == 'undefined') ? \"no\" : testerInput.enablePcoa;\r",
											"\r",
											"        let familyName = (typeof (testerInput.familyName) == 'undefined') ? \"\" : testerInput.familyName;\r",
											"        let filterKeys1 = (typeof (testerInput.filterKeys1) == 'undefined') ? \"\" : testerInput.filterKeys1;\r",
											"        let filterKeys2 = (typeof (testerInput.filterKeys2) == 'undefined') ? \"\" : testerInput.filterKeys2;\r",
											"        let trustedBusinessID = (typeof (testerInput.trustedBusinessID) == 'undefined') ? \"\" : testerInput.trustedBusinessID;\r",
											"        let trustedIndividualId = (typeof (testerInput.trustedIndividualId) == 'undefined') ? \"\" : testerInput.trustedIndividualId;\r",
											"\r",
											"\r",
											"        let payload = {\r",
											"            \"inputRecord\": {\r",
											"                \"addressLine1\": addressLine1,\r",
											"                \"countryCode\": countryCode,\r",
											"                \"emailAddress1\": emailAddress1,\r",
											"                \"emailAddress2\": emailAddress2,\r",
											"                \"businessEmail\": businessEmail,\r",
											"                \"businessPhone\": businessPhone,\r",
											"                \"companyName\": companyName,\r",
											"                \"familyName\": familyName,\r",
											"                \"fullName\": fullName,\r",
											"                \"gender\": gender,\r",
											"                \"phone1\": phone1,\r",
											"                \"postalCode\": postalCode,\r",
											"                \"filterKeys1\": filterKeys1,\r",
											"                \"filterKeys2\": filterKeys2,\r",
											"                \"trustedBusinessID\": trustedBusinessID,\r",
											"                \"trustedIndividualId\": trustedIndividualId,\r",
											"                \"userCorrelationId\": userCorrelationId\r",
											"            },\r",
											"            \"serviceConfig\": {\r",
											"                \"configAddressHygiene\": {\r",
											"                    \"enablePac\": enablePac,\r",
											"                    \"enablePcoa\": enablePcoa\r",
											"                },\r",
											"                \"configIdentity\":{\r",
											"                \"mode\":mode\r",
											"                },\r",
											"                \"enableAddressHygiene\": enableAddressHygiene,\r",
											"                \"enableEmailHygiene\": enableEmailHygiene,\r",
											"                \"enableGlobalSuppression\": enableGlobalSuppression,\r",
											"                \"enableIdentity\": enableIdentity,\r",
											"                \"enableNameHygiene\": enableNameHygiene,\r",
											"                \"enableOccupancyScore\": enableOccupancyScore,\r",
											"                \"enablePhoneHygiene\": enablePhoneHygiene,\r",
											"                \"enableTspAppend\": enableTspAppend\r",
											"            }\r",
											"        };\r",
											"\r",
											"        return payload;\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.generateIdentityInput = (testerInput) => {\r",
											"        let emailAddress1 = (typeof (testerInput.emailAddress1) == 'undefined') ? utils.getEmail() : testerInput.emailAddress1;\r",
											"        let emailAddress2 = (typeof (testerInput.emailAddress2) == 'undefined') ? utils.getEmail() : testerInput.emailAddress2;\r",
											"        let countryCode = (typeof (testerInput.countryCode) == 'undefined') ? \"USA\" : testerInput.countryCode;\r",
											"        let fullName = (typeof (testerInput.fullName) == 'undefined') ? utils.getFullName() : testerInput.fullName;\r",
											"        let phone1 = (typeof (testerInput.phone1) == 'undefined') ? utils.getValidPhone1() : testerInput.phone1;\r",
											"        let phone2 = (typeof (testerInput.phone2) == 'undefined') ? \"\" : testerInput.phone2;\r",
											"        let phone3 = (typeof (testerInput.phone3) == 'undefined') ? \"\" : testerInput.phone3;\r",
											"        let businessEmail = (typeof (testerInput.businessEmail) == 'undefined') ? \"\" : testerInput.businessEmail;\r",
											"        let businessPhone = (typeof (testerInput.businessPhone) == 'undefined') ? \"\" : testerInput.businessPhone;\r",
											"        let companyName = (typeof (testerInput.companyName) == 'undefined') ? \"\" : testerInput.companyName;\r",
											"        let userCorrelationId = (typeof (testerInput.userCorrelationId) == 'undefined') ? utils.getRandomNumberBetween(10, 999999999) : testerInput.userCorrelationId;\r",
											"        let postalCode = (typeof (testerInput.postalCode) == 'undefined') ? utils.getRandomNumberBetween(10000, 99999) + \"\" : testerInput.postalCode;\r",
											"        let addressLine1 = (typeof (testerInput.addressLine1) == 'undefined') ? utils.getAddressLine1() : testerInput.addressLine1;\r",
											"        let gender = (typeof (testerInput.gender) == 'undefined') ? utils.getGender() : testerInput.gender;\r",
											"\r",
											"        let enableAddressHygiene = (typeof (testerInput.enableAddressHygiene) == 'undefined') ? \"yes\" : testerInput.enableAddressHygiene;\r",
											"        let enableEmailHygiene = (typeof (testerInput.enableEmailHygiene) == 'undefined') ? \"yes\" : testerInput.enableEmailHygiene;\r",
											"        let enableNameHygiene = (typeof (testerInput.enableNameHygiene) == 'undefined') ? \"yes\" : testerInput.enableNameHygiene;\r",
											"        let enableIdentity = (typeof (testerInput.enableIdentity) == 'undefined') ? \"yes\" : testerInput.enableIdentity;\r",
											"        let enablePhoneHygiene = (typeof (testerInput.enablePhoneHygiene) == 'undefined') ? \"yes\" : testerInput.enablePhoneHygiene;\r",
											"\r",
											"        let enableGlobalSuppression = (typeof (testerInput.enableGlobalSuppression) == 'undefined') ? \"no\" : testerInput.enableGlobalSuppression;\r",
											"        let enableOccupancyScore = (typeof (testerInput.enableOccupancyScore) == 'undefined') ? \"no\" : testerInput.enableOccupancyScore;\r",
											"        let enableTspAppend = (typeof (testerInput.enableTspAppend) == 'undefined') ? \"no\" : testerInput.enableTspAppend;\r",
											"        let enablePac = (typeof (testerInput.enablePac) == 'undefined') ? \"no\" : testerInput.enablePac;\r",
											"        let enablePcoa = (typeof (testerInput.enablePcoa) == 'undefined') ? \"no\" : testerInput.enablePcoa;\r",
											"\r",
											"        let familyName = (typeof (testerInput.familyName) == 'undefined') ? \"\" : testerInput.familyName;\r",
											"        let filterKeys1 = (typeof (testerInput.filterKeys1) == 'undefined') ? \"\" : testerInput.filterKeys1;\r",
											"        let filterKeys2 = (typeof (testerInput.filterKeys2) == 'undefined') ? \"\" : testerInput.filterKeys2;\r",
											"        let trustedBusinessID = (typeof (testerInput.trustedBusinessID) == 'undefined') ? \"\" : testerInput.trustedBusinessID;\r",
											"        let trustedIndividualId = (typeof (testerInput.trustedIndividualId) == 'undefined') ? \"\" : testerInput.trustedIndividualId;\r",
											"\r",
											"        let inputData = {\r",
											"            \"addressLine1\": addressLine1,\r",
											"            \"countryCode\": countryCode,\r",
											"            \"emailAddress1\": emailAddress1,\r",
											"            \"emailAddress2\": emailAddress2,\r",
											"            \"familyName\": familyName,\r",
											"            \"fullName\": fullName,\r",
											"            \"companyName\": companyName,\r",
											"            \"businessEmail\": businessEmail,\r",
											"            \"businessPhone\": businessPhone,  \r",
											"            \"gender\": gender,\r",
											"            \"phone1\": phone1,\r",
											"            \"phone2\": phone2,\r",
											"            \"phone3\": phone3,\r",
											"            \"postalCode\": postalCode,\r",
											"            \"filterKeys1\": filterKeys1,\r",
											"            \"filterKeys2\": filterKeys2,\r",
											"            \"trustedBusinessID\": trustedBusinessID,\r",
											"            \"trustedIndividualId\": trustedIndividualId,\r",
											"            \"userCorrelationId\": userCorrelationId,\r",
											"            \"enablePac\": enablePac,\r",
											"            \"enablePcoa\": enablePcoa,\r",
											"            \"enableAddressHygiene\": enableAddressHygiene,\r",
											"            \"enableEmailHygiene\": enableEmailHygiene,\r",
											"            \"enableGlobalSuppression\": enableGlobalSuppression,\r",
											"            \"enableIdentity\": enableIdentity,\r",
											"            \"enableNameHygiene\": enableNameHygiene,\r",
											"            \"enableOccupancyScore\": enableOccupancyScore,\r",
											"            \"enablePhoneHygiene\": enablePhoneHygiene,\r",
											"            \"enableTspAppend\": enableTspAppend\r",
											"        };\r",
											"\r",
											"\r",
											"        return inputData;\r",
											"    }\r",
											"    //------------------------------------------------------------------------------------------------\r",
											"    utils.generateClientSuppressionInput = (testerInput) => {\r",
											"        let randomEmailAddress = utils.getRandomString() + \"@autotest.com\";\r",
											"        let randomEmailDomain = \"autotest.com\";\r",
											"        let address1 = (typeof (testerInput.address1) == 'undefined') ? utils.getAddressLine1() : testerInput.address1;\r",
											"        let address2 = (typeof (testerInput.address2) == 'undefined') ? \"\" : testerInput.address2;\r",
											"        let address3 = (typeof (testerInput.address3) == 'undefined') ? \"\" : testerInput.address3;\r",
											"        let address4 = (typeof (testerInput.address4) == 'undefined') ? \"\" : testerInput.address4;\r",
											"        let locality1 = (typeof (testerInput.locality1) == 'undefined') ? utils.getRandomString() : testerInput.locality1;\r",
											"        let locality2 = (typeof (testerInput.locality2) == 'undefined') ? \"\" : testerInput.locality2;\r",
											"        let locality3 = (typeof (testerInput.locality3) == 'undefined') ? \"\" : testerInput.locality3;\r",
											"        let region1 = (typeof (testerInput.region1) == 'undefined') ? utils.getRandomString() : testerInput.region1;\r",
											"        let region2 = (typeof (testerInput.region2) == 'undefined') ? \"\" : testerInput.region2;\r",
											"        let postalCode = (typeof (testerInput.postalCode) == 'undefined') ? utils.getRandomNumberBetween(10000, 99999) + \"\" : testerInput.postalCode;\r",
											"        let countryCode = (typeof (testerInput.countryCode) == 'undefined') ? \"USA\" : testerInput.countryCode;\r",
											"        let emailAddress = (typeof (testerInput.emailAddress) == 'undefined') ? randomEmailAddress : testerInput.emailAddress;\r",
											"        let emailDomain = (typeof (testerInput.emailDomain) == 'undefined') ? randomEmailDomain : testerInput.emailDomain;\r",
											"        let phone = (typeof (testerInput.phone) == 'undefined') ? utils.getPhone() : testerInput.phone;\r",
											"        let digitalKey = (typeof (testerInput.digitalKey) == 'undefined') ? utils.getRandomNumberBetween(10, 999999999) : testerInput.digitalKey;\r",
											"        let unitNumber = (typeof (testerInput.unitNumber) == 'undefined') ? \"\" : testerInput.unitNumber;\r",
											"        let inputData = {\r",
											"            \"address1\": address1,\r",
											"            \"address2\": address2,\r",
											"            \"address3\": address3,\r",
											"            \"address4\": address4,\r",
											"           \"locality1\": locality1,\r",
											"            \"locality2\": locality2,\r",
											"            \"locality3\": locality3,\r",
											"            \"region1\": region1,\r",
											"            \"region2\": region2,\r",
											"            \"postalCode\": postalCode,\r",
											"            \"countryCode\": countryCode,\r",
											"            \"emailAddress\": emailAddress,\r",
											"            \"emailDomain\": emailDomain,\r",
											"            \"phone\": phone,\r",
											"            \"digitalKey\": digitalKey,\r",
											"            \"unitNumber\": unitNumber\r",
											"        }\r",
											"        return inputData;\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.setMetaData = (request, testInfo) => {\r",
											"        request.headers.add({ \"key\": \"testInfo\", \"value\": testInfo });\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getGender = () => {\r",
											"        const genders = [\"M\", \"F\"];\r",
											"        return genders[Math.floor(Math.random() * genders.length)];\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getPhone = () => {\r",
											"        let phone = _.random(1000000000, 9999999999) + \"\";\r",
											"        return phone;\r",
											"    };\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getInvalidPhoneNo = () => {\r",
											"        return \"2374945683\";\r",
											"    };\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"\r",
											"    utils.getValidAddress = () =>{\r",
											"        let addressList = pm.environment.get(\"addressList\");\r",
											"        return addressList[_.random(0, addressList.length - 1)];\r",
											"    }\r",
											"    utils.getValidEmailAddress1 = () =>{\r",
											"        let emailAddress1List = pm.environment.get(\"emailAddress1List\");\r",
											"        return emailAddress1List[_.random(0, emailAddress1List.length - 1)];\r",
											"    }\r",
											"    utils.randomizePhoneNumber = (phone)=>{\r",
											"        let phone1 = phone.substring(0,8);\r",
											"        phone1 = phone1 + _.random(0,9) + \"\" + _.random(0,9);\r",
											"        return phone1;\r",
											"    }\r",
											"    utils.getValidPhone1 = () => {\r",
											"        let phone1List = pm.environment.get(\"phone1List\");\r",
											"        return utils.randomizePhoneNumber(phone1List[_.random(0, phone1List.length - 1)]);\r",
											"    };\r",
											"    utils.getGlobalSuppressionData = () =>{\r",
											"        let globalSuppressionDataList = pm.environment.get(\"globalSuppressionDataList\");\r",
											"        return globalSuppressionDataList[_.random(0, globalSuppressionDataList.length - 1)];\r",
											"    };\r",
											"    utils.getTspData = () =>{\r",
											"        let tspDataList = pm.environment.get(\"tspDataList\");\r",
											"        return tspDataList[_.random(0, tspDataList.length - 1)];\r",
											"    };\r",
											"    utils.getOccupancyScoreData = () =>{\r",
											"        let occupancyScoreDataList = pm.environment.get(\"occupancyScoreDataList\");\r",
											"        return occupancyScoreDataList[_.random(0, occupancyScoreDataList.length - 1)];\r",
											"    };\r",
											"    utils.getValidPhoneNo = () => {\r",
											"        let validPhoneNumbers = [\r",
											"            \"4074553192\", \"2105216247\", \"3616606896\", \"6193857215\", \"8585278638\", \"9144502525\", \"8583689197\", \"2162411632\", \"6149010599\", \"8188630301\", \"6143968666\", \"2482503068\", \"2544932747\", \"3235931075\", \"3235931075\", \"2547022886\", \"9154913605\", \"7063695310\", \"9374458768\", \"6369314701\", \"3214390501\", \"2126281022\", \"9103628474\", \"2567787307\", \"2124917612\", \"2163262453\", \"6146531516\", \"7049190687\", \"6144069051\", \"7045521235\", \"4073478153\", \"2072993220\", \"4079141272\", \"2813230885\", \"7863328558\", \"3107807391\", \"2039277322\", \"6026391307\", \"4693070938\", \"3174854621\", \"7203311388\", \"7045531484\", \"6149220456\", \"9132715696\", \"3212978851\", \"7204542846\", \"7044359533\", \"3013662674\", \"5412606966\", \"4344703439\"\r",
											"        ];\r",
											"        return validPhoneNumbers[_.random(0, validPhoneNumbers.length - 1)];\r",
											"        \r",
											"    };\r",
											"\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getFullName = () => {\r",
											"        return utils.getRandomString() + \" \" + utils.getRandomString() + \" \" + utils.getRandomString();\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getEmail = () => {\r",
											"        return utils.getRandomString() + \"@autotest.com\";\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getFilterKey = () => {\r",
											"        return _.random(10000, 99999) + \"\";\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getRealTimeHeader = (clientCode, xApiKey) => {\r",
											"        let header = {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"clientCode\": clientCode,\r",
											"            \"accessToken\": pm.environment.get(\"accessToken\"),\r",
											"            \"x-api-key\": xApiKey\r",
											"        };\r",
											"        return header;\r",
											"    }\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getPostRequest = (requestInput) => {\r",
											"\r",
											"        let header = {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"clientCode\": requestInput.clientCode,\r",
											"            \"accessToken\": pm.environment.get(\"accessToken\"),\r",
											"            \"x-api-key\": requestInput.apiKey\r",
											"        };\r",
											"\r",
											"        const postRequest = {\r",
											"            url: requestInput.url,\r",
											"            method: \"POST\",\r",
											"            header: header,\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(requestInput.data)\r",
											"            }\r",
											"        };\r",
											"\r",
											"        return postRequest;\r",
											"    };\r",
											"    //---------------------------------------------------------------------------------------------------\r",
											"    utils.getPostRequestForIms = (requestInput) => {\r",
											"\r",
											"        let header = {\r",
											"\r",
											"        };\r",
											"\r",
											"        const postRequest = {\r",
											"            url: requestInput.url,\r",
											"            method: \"POST\",\r",
											"            header: header,\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(requestInput.data)\r",
											"            }\r",
											"        };\r",
											"\r",
											"        return postRequest;\r",
											"    };\r",
											"    //-----------------------------------------------------------------------------------\r",
											"    utils.setRandomDataForRequest = (testerInput) => {\r",
											"        let randomData = utils.generateIdentityInput(testerInput);\r",
											"        pm.variables.set(\"addressLine1\", randomData.addressLine1);\r",
											"        pm.variables.set(\"countryCode\", randomData.countryCode);\r",
											"        pm.variables.set(\"emailAddress1\", randomData.emailAddress1);\r",
											"        pm.variables.set(\"emailAddress2\", randomData.emailAddress2);\r",
											"        pm.variables.set(\"familyName\", randomData.familyName);\r",
											"        pm.variables.set(\"companyName\", randomData.companyName);\r",
											"        pm.variables.set(\"fullName\", randomData.fullName);\r",
											"        pm.variables.set(\"gender\", randomData.gender);\r",
											"        pm.variables.set(\"phone1\", randomData.phone1);\r",
											"        pm.variables.set(\"phone2\", randomData.phone2);\r",
											"        pm.variables.set(\"phone3\", randomData.phone3);\r",
											"        pm.variables.set(\"businessEmail\", randomData.businessEmail);\r",
											"        pm.variables.set(\"businessPhone\", randomData.businessPhone);\r",
											"        pm.variables.set(\"postalCode\", randomData.postalCode);\r",
											"        pm.variables.set(\"filterKeys1\", randomData.filterKeys1);\r",
											"        pm.variables.set(\"filterKeys2\", randomData.filterKeys2);\r",
											"        pm.variables.set(\"trustedBusinessID\", randomData.trustedBusinessID);\r",
											"        pm.variables.set(\"trustedIndividualId\", randomData.trustedIndividualId);\r",
											"        pm.variables.set(\"userCorrelationId\", randomData.userCorrelationId);\r",
											"        pm.variables.set(\"enablePac\", randomData.enablePac);\r",
											"        pm.variables.set(\"enablePcoa\", randomData.enablePcoa);\r",
											"        pm.variables.set(\"enableAddressHygiene\", randomData.enableAddressHygiene);\r",
											"        pm.variables.set(\"enableEmailHygiene\", randomData.enableEmailHygiene);\r",
											"        pm.variables.set(\"enableGlobalSuppression\", randomData.enableGlobalSuppression);\r",
											"        pm.variables.set(\"enableIdentity\", randomData.enableIdentity);\r",
											"        pm.variables.set(\"enableNameHygiene\", randomData.enableNameHygiene);\r",
											"        pm.variables.set(\"enableOccupancyScore\", randomData.enableOccupancyScore);\r",
											"        pm.variables.set(\"enablePhoneHygiene\", randomData.enablePhoneHygiene);\r",
											"        pm.variables.set(\"enableTspAppend\", randomData.enableTspAppend);\r",
											"    }\r",
											"\r",
											"    //-------------------------------------------------------------------------------------------\r",
											"    utils.getRandomDataForField = (field) => {        \r",
											"        switch(field) {\r",
											"            case 'emailAddress1' : return utils.getEmail();\r",
											"            case 'emailAddress2' : return utils.getEmail();\r",
											"            case 'countryCode': return \"USA\";\r",
											"            case 'fullName': return utils.getFullName();\r",
											"            case 'address': return utils.getValidAddress();            \r",
											"            case 'phone1': return utils.getValidPhone1();\r",
											"            case 'phone2': return utils.getValidPhone1();\r",
											"            case 'phone3': return utils.getValidPhone1();\r",
											"            case 'userCorrelationId': return utils.getRandomNumberBetween(10, 999999999);\r",
											"            case 'postalCode': return utils.getRandomNumberBetween(10000, 99999) + \"\";\r",
											"            case 'addressLine1' : return utils.getAddressLine1();\r",
											"            case 'gender' : return utils.getGender();\r",
											"            case 'familyName' : return utils.getRandomString();\r",
											"            case 'companyName' : return utils.getCompanyName();\r",
											"            case 'filterKey1' : return utils.getRandomNumberBetween(10, 999999999);\r",
											"            case 'filterKey2' : return utils.getRandomNumberBetween(10, 999999999);\r",
											"            case 'trustedBusinessId' : return utils.getRandomNumberBetween(10, 999999999);\r",
											"            case 'trustedIndividualId' : return utils.getRandomNumberBetween(10, 999999999);\r",
											"            default : {console.log(\"Error getting value for the field \" + field +\" .No random data generator configured.\"); break;}\r",
											"        }\r",
											"    }\r",
											"    //-------------------------------------------------------------------------------------------------\r",
											"    utils.setRandomDataForClientSuppressionRequest = (testerInput) => {\r",
											"        let randomData = utils.generateClientSuppressionInput(testerInput);\r",
											"        pm.variables.set(\"address1\", randomData.address1);\r",
											"        pm.variables.set(\"address2\", randomData.address2);\r",
											"        pm.variables.set(\"address3\", randomData.address3);\r",
											"        pm.variables.set(\"address4\", randomData.address4);\r",
											"        pm.variables.set(\"locality1\", randomData.locality1);\r",
											"        pm.variables.set(\"locality2\", randomData.locality2);\r",
											"        pm.variables.set(\"locality3\", randomData.locality3);\r",
											"        pm.variables.set(\"region1\", randomData.region1);\r",
											"        pm.variables.set(\"region2\", randomData.region2);\r",
											"        pm.variables.set(\"postalCode\", randomData.postalCode);\r",
											"        pm.variables.set(\"countryCode\", randomData.countryCode);\r",
											"        pm.variables.set(\"emailAddress\", randomData.emailAddress);\r",
											"        pm.variables.set(\"emailDomain\", randomData.emailDomain);\r",
											"        pm.variables.set(\"phone\", randomData.phone);\r",
											"        pm.variables.set(\"digitalKey\", randomData.digitalKey);\r",
											"        pm.variables.set(\"unitNumber\", randomData.unitNumber);\r",
											"    }\r",
											"\r",
											"    //----------------------------------------------------------------------------------------------\r",
											"    utils.setRandomDataForIMSRequest = (testerInput) => {\r",
											"        let randomData = utils.generateIMSInput(testerInput);\r",
											"        pm.variables.set(\"contextId\", randomData.contextId);\r",
											"        pm.variables.set(\"customerKey\", randomData.customerKey);\r",
											"        pm.variables.set(\"emailAddress\", randomData.emailAddress);\r",
											"        pm.variables.set(\"customerId\", randomData.customerId);\r",
											"        pm.variables.set(\"smsNumber\", randomData.smsNumber);\r",
											"        pm.variables.set(\"deviceId\", randomData.deviceId);\r",
											"        pm.variables.set(\"parentId\", randomData.parentId);\r",
											"    };\r",
											"    //------------------------------------------------------------------------------------------------\r",
											"    \r",
											"    \r",
											"\r",
											"//================================================================================================================================================================\r",
											"\r",
											"\r",
											"utils.validateJobStatus = (input) => {\r",
											"        currentJobId = input.currentJobId;\r",
											"        clientCode = input.clientCode;\r",
											"        const noOfTries = pm.environment.get(\"JOBSTATUSCHECK_NO_OF_TRIES\");\r",
											"        const sleepTime = pm.environment.get(\"JOBSTATUSCHECK_WAIT_BETWEEN_TRIES_IN_MS\");\r",
											"        //const FIVE_MINUES_IN_MS = 300000;\r",
											"        //var sleepTime = FIVE_MINUES_IN_MS;\r",
											"        //const FIVE_SECONDS_IN_MS = 5000;\r",
											"        //var sleepTime = FIVE_SECONDS_IN_MS;\r",
											"        var noOfTry = 1;\r",
											"        var JOBSTATUS_URL = \"http://\" + pm.globals.get(\"server\") +\"/jobs/v2/connect/jobstatus?jobId=\" + currentJobId;\r",
											"        var startTime = new Date();\r",
											"        let header = {\"clientCode\": clientCode};\r",
											"        const getRequest = {\r",
											"            url: JOBSTATUS_URL,\r",
											"            method: \"GET\",\r",
											"            header: header\r",
											"        };\r",
											"\r",
											"        function checkJobStatus() {\r",
											"            console.log(\"Try-\" + noOfTry + \", Checking status for job -\" +currentJobId);\r",
											"            pm.sendRequest(getRequest, (error, response) => {\r",
											"                let jobStatusDetails = response.json();\r",
											"                pm.test(\"Checking job status \"+\"(Try-\" + noOfTry + \").\", () => {\r",
											"                    pm.expect(response).to.have.property('code', 200);\r",
											"                });\r",
											"                if(jobStatusDetails.status != 'COMPLETED' && noOfTry < noOfTries) {\r",
											"                    console.log(\"Job is not completed. repeat status check post \" + sleepTime + \" ms.\" );\r",
											"                    noOfTry = noOfTry + 1;\r",
											"                    doStatusCheck();\r",
											"                } else {\r",
											"                    verifyJobDetail(jobStatusDetails);\r",
											"                }\r",
											"            });\r",
											"        }\r",
											"\r",
											"        function verifyJobDetail(jobStatusDetails) {\r",
											"            var message = \"Verify completion of job ( ID: \" + currentJobId +  \")\"\r",
											"                + \" |[Wait time = \" + (new Date() - startTime) + \" ms]\"\r",
											"                + \" | Job status response => \" + JSON.stringify(jobStatusDetails);\r",
											"            pm.test(message, function () {\r",
											"                pm.expect(jobStatusDetails.status).to.equal(\"COMPLETED\");\r",
											"                pm.expect(jobStatusDetails.jobId).to.equal(currentJobId);\r",
											"            });\r",
											"        }\r",
											"\r",
											"        function doStatusCheck() {\r",
											"            console.log(\"Waiting for \" + sleepTime + \"ms before checking the status......\")\r",
											"            setTimeout(()=>{checkJobStatus()}, sleepTime);\r",
											"        }\r",
											"\r",
											"        doStatusCheck();\r",
											"}//END-utils.validateJobStatus\r",
											"\r",
											"\r",
											"//End of businessEmailThreshol\r",
											"\r",
											"    utils.validateBatchResponse = () =>  {\r",
											"        pm.test(\"Validate response and jobId. [Returned jobId: \"+ currentJobId + \"]\", function () {\r",
											"            pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
											"            pm.expect(pm.response.text()).to.include(\"jobId\");\r",
											"        });\r",
											"    }\r",
											"\r",
											"    //-------------------------------------\r",
											"    utils.validateFailedJobStatus = (input) => {\r",
											"        currentJobId = input.currentJobId;\r",
											"        clientCode = input.clientCode;\r",
											"        const noOfTries = pm.environment.get(\"JOBSTATUSCHECK_NO_OF_TRIES\");\r",
											"        const sleepTime = pm.environment.get(\"JOBSTATUSCHECK_WAIT_BETWEEN_TRIES_IN_MS\");\r",
											"\r",
											"        var noOfTry = 1;\r",
											"        var JOBSTATUS_URL = \"http://\" + pm.globals.get(\"server\") +\"/jobs/v2/connect/jobstatus?jobId=\" + currentJobId;\r",
											"        var startTime = new Date();\r",
											"        let header = {\"clientCode\": clientCode};\r",
											"        const getRequest = {\r",
											"            url: JOBSTATUS_URL,\r",
											"            method: \"GET\",\r",
											"            header: header\r",
											"        };\r",
											"\r",
											"        function checkJobStatus() {\r",
											"            console.log(\"Try-\" + noOfTry + \", Checking status for job -\" +currentJobId);\r",
											"            pm.sendRequest(getRequest, (error, response) => {\r",
											"                let jobStatusDetails = response.json();\r",
											"                pm.test(\"Checking job status \"+\"(Try-\" + noOfTry + \").\", () => {\r",
											"                    pm.expect(response).to.have.property('code', 200);\r",
											"                });\r",
											"                if(jobStatusDetails.status != 'JOB_FAILED' && noOfTry < noOfTries) {\r",
											"                    console.log(\"Job is not completed. repeat status check post \" + sleepTime + \" ms.\" );\r",
											"                    noOfTry = noOfTry + 1;\r",
											"                    doStatusCheck();\r",
											"                } else {\r",
											"                    verifyJobDetail(jobStatusDetails);\r",
											"                }\r",
											"            });\r",
											"        }\r",
											"\r",
											"        function verifyJobDetail(jobStatusDetails) {\r",
											"            var message = \"Verify completion of job ( ID: \" + currentJobId +  \")\"\r",
											"                + \" |[Wait time = \" + (new Date() - startTime) + \" ms]\"\r",
											"                + \" | Job status response => \" + JSON.stringify(jobStatusDetails);\r",
											"            pm.test(message, function () {\r",
											"                pm.expect(jobStatusDetails.status).to.equal(\"JOB_FAILED\");\r",
											"                pm.expect(jobStatusDetails.jobId).to.equal(currentJobId);\r",
											"            });\r",
											"        }\r",
											"        function doStatusCheck() {\r",
											"            console.log(\"Waiting for \" + sleepTime + \"ms before checking the status......\")\r",
											"            setTimeout(()=>{checkJobStatus()}, sleepTime);\r",
											"        }\r",
											"        doStatusCheck();\r",
											"    }\r",
											"\r",
											"    //-------------------------------------\r",
											"    \r",
											"utils.getDMSBatchOutput = (input,validate) => {\r",
											"        currentJobId = input.currentJobId;\r",
											"        clientCode = input.clientCode;\r",
											"        let dmsBatchOutput;\r",
											"        const noOfTries = pm.environment.get(\"JOBSTATUSCHECK_NO_OF_TRIES\");\r",
											"        const sleepTime = pm.environment.get(\"JOBSTATUSCHECK_WAIT_BETWEEN_TRIES_IN_MS\");\r",
											"        var noOfTry = 1;\r",
											"        var JOBSTATUS_URL = \"http://\" + pm.globals.get(\"server\") +\"/jobs/v2/connect/jobstatus?jobId=\" + currentJobId;\r",
											"        var startTime = new Date();\r",
											"        let header = {\"clientCode\": clientCode};\r",
											"        const getRequest = {\r",
											"            url: JOBSTATUS_URL,\r",
											"            method: \"GET\",\r",
											"            header: header\r",
											"        };\r",
											"\r",
											"        function checkJobStatus() {\r",
											"            console.log(\"Try-\" + noOfTry + \", Checking status for job -\" +currentJobId);\r",
											"            pm.sendRequest(getRequest, (error, response) => {\r",
											"                let jobStatusDetails = response.json();\r",
											"                pm.test(\"Checking job status \"+\"(Try-\" + noOfTry + \").\", () => {\r",
											"                    pm.expect(response).to.have.property('code', 200);\r",
											"                });\r",
											"                if(jobStatusDetails.status != 'COMPLETED' && noOfTry < noOfTries) {\r",
											"                    console.log(\"Job is not completed. repeat status check post \" + sleepTime + \" ms.\" );\r",
											"                    noOfTry = noOfTry + 1;\r",
											"                    doStatusCheck();\r",
											"                } else {\r",
											"                    validate(jobStatusDetails);\r",
											"                }\r",
											"            });\r",
											"        }\r",
											"\r",
											"        // function verifyJobDetail(jobStatusDetails) {\r",
											"        //     var message = \"Verify completion of job ( ID: \" + currentJobId +  \")\"\r",
											"        //         + \" |[Wait time = \" + (new Date() - startTime) + \" ms]\"\r",
											"        //         + \" | Job status response => \" + JSON.stringify(jobStatusDetails);\r",
											"        //     pm.test(message, function () {\r",
											"        //         pm.expect(jobStatusDetails.status).to.equal(\"COMPLETED\");\r",
											"        //         pm.expect(jobStatusDetails.jobId).to.equal(currentJobId);\r",
											"        //     });\r",
											"        // }\r",
											"\r",
											"        function doStatusCheck() {\r",
											"            console.log(\"Waiting for \" + sleepTime + \"ms before checking the status......\")\r",
											"            setTimeout(()=>{checkJobStatus()}, sleepTime);\r",
											"        }\r",
											"\r",
											"        doStatusCheck();\r",
											"        return dmsBatchOutput;\r",
											"}//END-utils.validateJobStatus\r",
											"\r",
											"    //----------------------------------------------------------------\r",
											"\r",
											"    utils.getJobStatusAndValidate = (input,validate) => {\r",
											"        const currentJobId = input.currentJobId;\r",
											"        const clientCode = input.clientCode;\r",
											"        let noOfTries = pm.environment.get(\"JOBSTATUSCHECK_NO_OF_TRIES\");\r",
											"        let sleepTime = pm.environment.get(\"JOBSTATUSCHECK_WAIT_BETWEEN_TRIES_IN_MS\");\r",
											"        let noOfTry = 1;\r",
											"        const JOBSTATUS_URL = \"http://\" + pm.globals.get(\"server\") +\"/jobs/v2/connect/jobstatus?jobId=\" + currentJobId;\r",
											"        const startTime = new Date();\r",
											"        let header = {\"clientCode\": clientCode};\r",
											"        const getRequest = {\r",
											"            url: JOBSTATUS_URL,\r",
											"            method: \"GET\",\r",
											"            header: header\r",
											"        };\r",
											"\r",
											"        function checkJobStatus() {\r",
											"            console.log(\"Try-\" + noOfTry + \", Checking status for job -\" +currentJobId);\r",
											"            pm.sendRequest(getRequest, (error, response) => {\r",
											"                let jobStatusDetails = response.json();\r",
											"                pm.test(\"Checking job status \"+\"(Try-\" + noOfTry + \").\", () => {\r",
											"                    pm.expect(response).to.have.property('code', 200);\r",
											"                });\r",
											"                if(jobStatusDetails.status != 'COMPLETED' && noOfTry < noOfTries) {\r",
											"                    console.log(\"Job is not completed. repeat status check post \" + sleepTime + \" ms.\" );\r",
											"                    noOfTry = noOfTry + 1;\r",
											"                    doStatusCheck();\r",
											"                } else {\r",
											"                    verifyJobDetail(jobStatusDetails);\r",
											"                }\r",
											"            });\r",
											"        }\r",
											"\r",
											"        function verifyJobDetail(jobStatusDetails) {\r",
											"            var message = \"Verify completion of job ( ID: \" + currentJobId +  \")\"\r",
											"                + \" |[Wait time = \" + (new Date() - startTime) + \" ms]\"\r",
											"                + \" | Job status response => \" + JSON.stringify(jobStatusDetails);\r",
											"            pm.test(message, function () {\r",
											"                pm.expect(jobStatusDetails.status).to.equal(\"COMPLETED\");\r",
											"                pm.expect(jobStatusDetails.jobId).to.equal(currentJobId);\r",
											"            });\r",
											"            validate(jobStatusDetails);\r",
											"        }\r",
											"\r",
											"        function doStatusCheck() {\r",
											"            console.log(\"Waiting for \" + sleepTime + \"ms before checking the status......\")\r",
											"            setTimeout(()=>{checkJobStatus()}, sleepTime);\r",
											"        }\r",
											"        doStatusCheck();\r",
											"    }\r",
											"\r",
											"    utils.validateBatchResponse = () =>  {\r",
											"        pm.test(\"Validate response and jobId. [Returned jobId: \"+ currentJobId + \"]\", function () {\r",
											"            pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
											"            pm.expect(pm.response.text()).to.include(\"jobId\");\r",
											"        });\r",
											"    }\r",
											"\r",
											"\r",
											"    //------------------------------------------------------------------------------------------------------------------------------------\r",
											"    utils.doTestLogging = (input) => {\r",
											"    type = input.type; \r",
											"    msg = input.msg;\r",
											"    let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"    let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"    switch(type) {\r",
											"        case 'PRINT_MSG' : {\r",
											"            pm.test(msg, true);\r",
											"            break;\r",
											"        }\r",
											"        case 'VALIDATE_REQUEST' : {\r",
											"            \r",
											"            msg = msg + \"=> [method = \" + pm.request.method + \"| clientCode =\" + pm.request.headers.get(\"clientCode\") + \"]\";\r",
											"            pm.test(msg, () => {\r",
											"                pm.expect(pm.request.headers.get(\"accessToken\")).to.not.equal(\"\");\r",
											"                pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"                pm.expect(pm.request.method).to.equal(\"POST\");\r",
											"            }); \r",
											"            break;            \r",
											"        }\r",
											"        case 'VALIDATE_OKRESPONSE' : {            \r",
											"            pm.test(msg, () => {\r",
											"                pm.response.to.be.ok;\r",
											"                pm.response.to.be.withBody;\r",
											"                pm.response.to.be.json;\r",
											"                pm.response.to.have.status(200);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        case 'CHECK_INPUT' : {                         \r",
											"            pm.test(  \r",
											"                msg + \" => \"+ (function getDataToDisplay(){\r",
											"                        let dataToDisplay = \"[\";\r",
											"                        for(key of input.fields) {                \r",
											"                            dataToDisplay = dataToDisplay + key + \"=\"  + (inputData[key] == '' ? \"' '\" : inputData[key] ) + \"|\"\r",
											"                        }\r",
											"                        return dataToDisplay = dataToDisplay.slice(0, -1) +  \"]\"\r",
											"                        })()                \r",
											"            );\r",
											"            break;\r",
											"        }        \r",
											"        case 'CHECK_OUTPUT' : {                         \r",
											"            pm.test(  \r",
											"                msg + \" => \"+ (function getDataToDisplay(){\r",
											"                        let dataToDisplay = \"[\";\r",
											"                        for(key of input.fields) {                \r",
											"                            dataToDisplay = dataToDisplay + key + \"=\"  + (outputData[key] == '' ? \"' '\" : outputData[key] ) + \"|\"\r",
											"                        }\r",
											"                        return dataToDisplay = dataToDisplay.slice(0, -1) +  \"]\"\r",
											"                        })()                \r",
											"            );\r",
											"            break;\r",
											"        }\r",
											"        case 'CHECK_EXISTINGDATA' : {\r",
											"            id = typeof(input.id) == 'undefined' ? 'individualId' : input.id;\r",
											"\r",
											"            allIds = [] \r",
											"            for(recordName in input.existingRecords) {               \r",
											"                allIds.push(input.existingRecords[recordName][id]);\r",
											"            }   \r",
											"            msg = msg + \" => existing \" + id + \"(s) : \" + allIds + \"\";\r",
											"            pm.test(msg);\r",
											"            //------------\r",
											"            for(recordName in input.existingRecords) {                \r",
											"                existingRecord = input.existingRecords[recordName];                  \r",
											"                msg =  \"(@)-Match found. \" + recordName + \"----->\";\r",
											"                msg = msg + (function getDataToDisplay(){\r",
											"                        let dataToDisplay = \"[\";\r",
											"                        for(key of input.fields) {                \r",
											"                            dataToDisplay = dataToDisplay + key + \"=\"  + (existingRecord[key] == '' ? \"' '\" : existingRecord[key] ) + \"|\"\r",
											"                        }\r",
											"                        return dataToDisplay = dataToDisplay.slice(0, -1) +  \"]\"\r",
											"                        })()                \r",
											"                pm.test(msg);\r",
											"            }\r",
											"            \r",
											"            \r",
											"            break;\r",
											"        }\r",
											"        case 'PRINT_DATA' : {          \r",
											"            pm.test(  \r",
											"                msg + \" => \"+ (function getDataToDisplay(){\r",
											"                        let dataToDisplay = \"[\";\r",
											"                        \r",
											"                        for(key in input.data) {                \r",
											"                            dataToDisplay = dataToDisplay + key + \"=\"  + input.data[key] + \"|\"\r",
											"                        }\r",
											"                        return dataToDisplay = dataToDisplay.slice(0, -1) +  \"]\"\r",
											"                        })()                \r",
											"            );\r",
											"            break;\r",
											"        }        \r",
											"        case 'VALIDATE_NEWINDV' : {\r",
											"            msg = msg + \"(individulaId = \" + outputData.individualId + \")\";                         \r",
											"            pm.test( msg, () => {\r",
											"                utils.validateIfNonEmpty(outputData.individualId);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        case 'VALIDATE_EXISTING_DIFFINDVID' : {\r",
											"            msg = msg + \"(individulaId = \" + outputData.individualId + \")\";                         \r",
											"            pm.test( msg, () => {\r",
											"                pm.expect(outputData.individualId).to.not.equal(input.existingRecord.individualId);\r",
											"            });\r",
											"            break;\r",
											"        } \r",
											"        case 'VALIDATE_EXISTINGINDV' : {\r",
											"            msg = msg + \"(individulaId = \" + outputData.individualId + \")\";                         \r",
											"            pm.test( msg, () => {\r",
											"                utils.validateIfNonEmpty(outputData.individualId);\r",
											"                pm.expect(outputData.individualId).to.equal(input.existingRecord.individualId);\r",
											"            });\r",
											"            break;\r",
											"        }        \r",
											"        case 'VALIDATE_NEWADDRESS' : {\r",
											"            msg = msg + \"(addressId = \" + outputData.addressId + \")\";                         \r",
											"            pm.test( msg, () => {\r",
											"                utils.validateIfNonEmpty(outputData.addressId);\r",
											"            });\r",
											"            break;\r",
											"        } \r",
											"        case 'VALIDATE_EXISTINGADDRESS' : {\r",
											"            msg = msg + \"(addressId = \" + outputData.addressId + \")\";                         \r",
											"            pm.test( msg, () => {\r",
											"                utils.validateIfNonEmpty(outputData.addressId);\r",
											"                pm.expect(outputData.addressId).to.equal(input.existingRecord.addressId);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        case 'VALIDATE_SHORTESTID' : {                           \r",
											"            allIndvIds = [] \r",
											"            for (record of input.existingRecords) {                \r",
											"                allIndvIds.push(record.individualId);\r",
											"            }                      \r",
											"            msg = msg + \"(individulaId = \" + outputData.individualId + \" i.e shortest among \"+ JSON.stringify(allIndvIds) + \")\";\r",
											"            pm.test( msg, () => {\r",
											"                utils.validateIfNonEmpty(outputData.individualId);\r",
											"                pm.expect(outputData.individualId).to.equal(_.min( allIndvIds ));\r",
											"            });\r",
											"            break;\r",
											"        }  \r",
											"        case 'VALIDATE_CONSOLIDATION' : {                           \r",
											"            allIndvIds = [] \r",
											"            for (record of input.existingRecords) {                \r",
											"                allIndvIds.push(record.individualId);\r",
											"            }                      \r",
											"            msg = msg + \"(individulaId = \" + outputData.individualId + \" i.e shortest among \"+ JSON.stringify(allIndvIds) + \")\" + \"and (consolidatedIds = \" + outputData.consolidatedIds[0] + \" i.e largest among \"+ JSON.stringify(allIndvIds);\r",
											"            pm.test( msg, () => {\r",
											"                utils.validateIfNonEmpty(outputData.individualId);\r",
											"                pm.expect(outputData.individualId).to.equal(_.min( allIndvIds ));\r",
											"                pm.expect(outputData.consolidatedIds[0]).to.equal(_.max( allIndvIds ));\r",
											"            });\r",
											"            break;\r",
											"        }       \r",
											"        default : {\r",
											"            errorMessage = \"Given testName \" + type + \" not found.\"\r",
											"            console.log(errorMessage);\r",
											"            throw errorMessage;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"//----------------------------------------------------------------------------------------------------------------------------------\r",
											"    utils.constructIdentityRequest = (input) => {\r",
											"        testerInput = input.testerInput     \r",
											"        getValue = (key, defaultVal) => {return (key in input.testerInput ) ? testerInput[key] : defaultVal}\r",
											"        const payload = {\r",
											"                \"inputRecord\": {\r",
											"                    \"addressLine1\": getValue('addressLine1', \"\"),\r",
											"                    \"countryCode\": getValue('countryCode', \"\"),\r",
											"                    \"emailAddress1\": getValue('emailAddress1', \"\"),\r",
											"                    \"emailAddress2\": getValue('emailAddress2', \"\"),\r",
											"                    \"familyName\": getValue('familyName', \"\"),\r",
											"                    \"givenName\": getValue('givenName', \"\"),\r",
											"                    \"fullName\": getValue('fullName', \"\"),\r",
											"                    \"companyName\": getValue('companyName', \"\"),\r",
											"                    \"businessEmail\": getValue('businessEmail', \"\"),\r",
											"                    \"businessPhone\": getValue('businessPhone', \"\"),\r",
											"                    \"businessKeys1\": getValue('businessKeys1', \"\"),\r",
											"                    \"businessKeys2\": getValue('businessKeys2', \"\"),\r",
											"                    \"gender\": getValue('gender', \"\"),\r",
											"                    \"phone1\": getValue('phone1', \"\"),\r",
											"                    \"postalCode\": getValue('postalCode', \"\"),\r",
											"                    \"filterKeys1\": getValue('filterKeys1', \"\"),\r",
											"                    \"filterKeys2\": getValue('filterKeys2', \"\"),\r",
											"                    \"trustedBusinessID\": getValue('trustedBusinessId', \"\"),\r",
											"                    \"trustedIndividualId\": getValue('trustedIndividualId', \"\"),\r",
											"                    \"userCorrelationId\": getValue('userCorrelationId', \"\")\r",
											"                },\r",
											"                \"serviceConfig\": {\r",
											"                    \"configAddressHygiene\": {\r",
											"                        \"enablePac\": getValue('enablePac', \"no\"),\r",
											"                        \"enablePcoa\": getValue('enablePcoa', \"no\"),\r",
											"                    },\r",
											"                    \"enableIdentity\": getValue('enableIdentity', \"yes\"),\r",
											"                    \"enableAddressHygiene\": getValue('enableAddressHygiene', \"yes\"),\r",
											"                    \"enableEmailHygiene\":  getValue('enableEmailHygiene', \"yes\"),\r",
											"                    \"enablePhoneHygiene\": getValue('enablePhoneHygiene', \"yes\"),\r",
											"                    \"enableNameHygiene\": getValue('enableNameHygiene', \"yes\"),\r",
											"\r",
											"                    \"enableOccupancyScore\": getValue('enableOccupancyScore', \"no\"),\r",
											"                    \"enableGlobalSuppression\": getValue('enableGlobalSuppression', \"no\"),\r",
											"                    \"enableTspAppend\": getValue('enableTspAppend', \"no\"),\r",
											"                }\r",
											"            };\r",
											"        const postRequest = {\r",
											"            url: input.url,\r",
											"            method: \"POST\",\r",
											"            header: {\r",
											"                \"Content-Type\": \"application/json\",\r",
											"                \"clientCode\": input.clientCode,\r",
											"                \"x-api-key\": input.apiKey,\r",
											"                \"accessToken\": pm.environment.get(\"accessToken\"),\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(payload)\r",
											"            }\r",
											"        };\r",
											"\r",
											"        return postRequest;\r",
											"    }\r",
											"    \r",
											"    utils.constructIdentityRequestWithTSPConfig = (input) => {\r",
											"        testerInput = input.testerInput     \r",
											"        getValue = (key, defaultVal) => {return (key in input.testerInput ) ? testerInput[key] : defaultVal}\r",
											"        const payload = {\r",
											"                \"inputRecord\": {\r",
											"                    \"addressLine1\": getValue('addressLine1', \"\"),\r",
											"                    \"countryCode\": getValue('countryCode', \"\"),\r",
											"                    \"emailAddress1\": getValue('emailAddress1', \"\"),\r",
											"                    \"emailAddress2\": getValue('emailAddress2', \"\"),\r",
											"                    \"familyName\": getValue('familyName', \"\"),\r",
											"                    \"givenName\": getValue('givenName', \"\"),\r",
											"                    \"fullName\": getValue('fullName', \"\"),\r",
											"                    \"companyName\": getValue('companyName', \"\"),\r",
											"                    \"businessEmail\": getValue('businessEmail', \"\"),\r",
											"                    \"businessPhone\": getValue('businessPhone', \"\"),\r",
											"                    \"businessKeys1\": getValue('businessKeys1', \"\"),\r",
											"                    \"businessKeys2\": getValue('businessKeys2', \"\"),\r",
											"                    \"gender\": getValue('gender', \"\"),\r",
											"                    \"phone1\": getValue('phone1', \"\"),\r",
											"                    \"postalCode\": getValue('postalCode', \"\"),\r",
											"                    \"filterKeys1\": getValue('filterKeys1', \"\"),\r",
											"                    \"filterKeys2\": getValue('filterKeys2', \"\"),\r",
											"                    \"trustedBusinessID\": getValue('trustedBusinessId', \"\"),\r",
											"                    \"trustedIndividualId\": getValue('trustedIndividualId', \"\"),\r",
											"                    \"userCorrelationId\": getValue('userCorrelationId', \"\")\r",
											"                },\r",
											"                \"serviceConfig\": {\r",
											"                    \"configAddressHygiene\": {\r",
											"                        \"enablePac\": getValue('enablePac', \"no\"),\r",
											"                        \"enablePcoa\": getValue('enablePcoa', \"no\"),\r",
											"                    },\r",
											"                    \"enableIdentity\": getValue('enableIdentity', \"yes\"),\r",
											"                    \"enableAddressHygiene\": getValue('enableAddressHygiene', \"yes\"),\r",
											"                    \"enableEmailHygiene\":  getValue('enableEmailHygiene', \"yes\"),\r",
											"                    \"enablePhoneHygiene\": getValue('enablePhoneHygiene', \"yes\"),\r",
											"                    \"enableNameHygiene\": getValue('enableNameHygiene', \"yes\"),\r",
											"\r",
											"                    \"enableOccupancyScore\": getValue('enableOccupancyScore', \"no\"),\r",
											"                    \"enableGlobalSuppression\": getValue('enableGlobalSuppression', \"no\"),\r",
											"                    \"enableTspAppend\": getValue('enableTspAppend', \"no\"),\r",
											"                    \"configTspOptions\": getValue('configTspOptions', [])\r",
											"                }\r",
											"            };\r",
											"        const postRequest = {\r",
											"            url: input.url,\r",
											"            method: \"POST\",\r",
											"            header: {\r",
											"                \"Content-Type\": \"application/json\",\r",
											"                \"clientCode\": input.clientCode,\r",
											"                \"x-api-key\": input.apiKey,\r",
											"                \"accessToken\": pm.environment.get(\"accessToken\"),\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(payload)\r",
											"            }\r",
											"        };\r",
											"\r",
											"        return postRequest;\r",
											"    }\r",
											"\r",
											"    //===================================================================================\r",
											"    \r",
											"    utils.getTspMatchData = (type) =>{\r",
											"        if(type == \"ADR\") \r",
											"            return utils.getTspData();\r",
											"        else if(type == \"EML\"){\r",
											"            let tspEMLData = pm.environment.get('tspEMLData');\r",
											"            return tspEMLData[_.random(0, tspEMLData.length - 1)];\r",
											"        }\r",
											"        else if(type == \"ADREML\"){\r",
											"            let tspADREMLData = pm.environment.get('tspADREMLData');\r",
											"            return tspADREMLData[_.random(0, tspADREMLData.length - 1)];\r",
											"        }\r",
											"        return {};\r",
											"    };\r",
											"\r",
											"    utils.validateJobStatusAndJobCompletion = (input, validateCompletedJob) => {\r",
											"        currentJobId = input.currentJobId;\r",
											"        clientCode = input.clientCode;\r",
											"        const noOfTries = pm.environment.get(\"JOBSTATUSCHECK_NO_OF_TRIES\");\r",
											"        const sleepTime = pm.environment.get(\"JOBSTATUSCHECK_WAIT_BETWEEN_TRIES_IN_MS\");\r",
											"        var noOfTry = 1;\r",
											"        var JOBSTATUS_URL = \"http://\" + pm.globals.get(\"server\") +\"/jobs/v2/connect/jobstatus?jobId=\" + currentJobId;\r",
											"        var startTime = new Date();\r",
											"        let header = {\"clientCode\": clientCode};\r",
											"        const getRequest = {\r",
											"            url: JOBSTATUS_URL,\r",
											"            method: \"GET\",\r",
											"            header: header\r",
											"        };\r",
											"\r",
											"        function checkJobStatus() {\r",
											"            console.log(\"Try-\" + noOfTry + \", Checking status for job -\" +currentJobId);\r",
											"            pm.sendRequest(getRequest, (error, response) => {\r",
											"                let jobStatusDetails = response.json();\r",
											"                pm.test(\"Checking job status \"+\"(Try-\" + noOfTry + \").\", () => {\r",
											"                    pm.expect(response).to.have.property('code', 200);\r",
											"                });\r",
											"                if(jobStatusDetails.status != 'COMPLETED' && noOfTry < noOfTries) {\r",
											"                    console.log(\"Job is not completed. repeat status check post \" + sleepTime + \" ms.\" );\r",
											"                    noOfTry = noOfTry + 1;\r",
											"                    doStatusCheck();\r",
											"                } else {\r",
											"                    verifyJobDetail(jobStatusDetails);\r",
											"                }\r",
											"            });\r",
											"        }\r",
											"\r",
											"        function verifyJobDetail(jobStatusDetails) {\r",
											"            var message = \"Verify completion of job ( ID: \" + currentJobId +  \")\"\r",
											"                + \" |[Wait time = \" + (new Date() - startTime) + \" ms]\"\r",
											"                + \" | Job status response => \" + JSON.stringify(jobStatusDetails);\r",
											"            pm.test(message, function () {\r",
											"                pm.expect(jobStatusDetails.status).to.equal(\"COMPLETED\");\r",
											"                pm.expect(jobStatusDetails.jobId).to.equal(currentJobId);\r",
											"            });\r",
											"            validateCompletedJob(jobStatusDetails);\r",
											"        }\r",
											"\r",
											"        function doStatusCheck() {\r",
											"            console.log(\"Waiting for \" + sleepTime + \"ms before checking the status......\")\r",
											"            setTimeout(()=>{checkJobStatus()}, sleepTime);\r",
											"        }\r",
											"\r",
											"        doStatusCheck();\r",
											"    }//END-utils.validateJobStatusAndJobCompletion\r",
											"    return utils;\r",
											"} + '; connectUtils();');\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if(pm.response.code === 200){   \r",
											"    postman.setNextRequest(\"Authentication > (PID-7398)  - Generate access token\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"TerminateTestSuite\");\r",
											"}\r",
											"pm.test(\"Identity health-check is successfull.\",() => pm.response.to.have.status(200));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server}}/usart/ping",
									"host": [
										"{{server}}"
									],
									"path": [
										"usart",
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({\"key\":\"folder\", \"value\":\"Init\"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "AUTHENTICATION",
					"item": [
						{
							"name": "init-authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"utils.enableOrDisableFeatures();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server}}/usart/ping",
									"host": [
										"{{server}}"
									],
									"path": [
										"usart",
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication > (PID-7398)  - Generate access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the generation of the Access Token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
											"    pm.expect(pm.response.text()).to.include(\"token_type\");\r",
											"    pm.expect(pm.response.text()).to.include(\"expires_in\");\r",
											"});\r",
											"\r",
											"//Set access token in environment//\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"accessToken\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7398\",\r",
											"                    sprint: \"Q3-2020\",\r",
											"                    subject: \"authentication\",\r",
											"                    tags: \"#precondition#authentication#accesstoken\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//=======================================================================================================================================//"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "authorization",
										"value": "Basic MG9heHZ2ODE1MkNvUDBubnQwaDc6VUxvMXJhOWdkYk53VjZsYjhnWmRtN0RIZzI2YTJZVENFQnZSNzh3ZQ=="
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									},
									{
										"key": "content-type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=72F75B04ED171242CB44BA4B9629D421; JSESSIONID=FB4C45DF924BE73562E19BD797FDEDFA"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://epsilonclient.oktapreview.com/oauth2/ausv325m2vAuTnEyx0h7/v1/token",
									"protocol": "https",
									"host": [
										"epsilonclient",
										"oktapreview",
										"com"
									],
									"path": [
										"oauth2",
										"ausv325m2vAuTnEyx0h7",
										"v1",
										"token"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7398](https://jira.cnvrmedia.net/browse/PID-7398)\n\n&#9724; **NAME:** Generate access token\n\n&#9724; **DESCRIPTION:** \n*    Octa-Authentication-request is made to generate accessToken with valid username/password and grant_type.\n\n&#9724; **EXPECTED RESULT:**\n*    accessToken is generated and set in environment variable.\n\n&#9724; **REQUIRED HEADERS:**\n\n*    \"userName\"\n*    \"password\"\n*    \"grant_type\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"accessToken\""
							},
							"response": []
						},
						{
							"name": "Authentication > (PID-7399)- Validating accesstoken generation when tried with invalid credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var description =\"This shows error : 'The credential provided were invalid.'\"\r",
											"pm.test(description, function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(jsonData.error).to.not.be.null;\r",
											"    pm.expect(jsonData.error_description).to.not.be.null;\r",
											"    pm.expect(jsonData.error).to.equal(\"invalid_grant\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"The credentials provided were invalid.\");\r",
											" });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7399\",\r",
											"                    sprint: \"Q3-2020\",\r",
											"                    subject: \"authentication\",\r",
											"                    tags: \"#Authentication#Core#accessTokenGeneration#invalidCredentials\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=77202F648DCEBA8BE1A919D725E4C6EE"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "\"\"",
											"value": "\"\"",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://datahub-poc.okta.com/oauth2/ausnd2e1vgy1PNiOE4x6/v1/token?client_id=0oaotczfmsV8vXKS84x6&grant_type=password&username=con_service.admin@domain.com&password=Connect@1234&scope=openid",
									"protocol": "https",
									"host": [
										"datahub-poc",
										"okta",
										"com"
									],
									"path": [
										"oauth2",
										"ausnd2e1vgy1PNiOE4x6",
										"v1",
										"token"
									],
									"query": [
										{
											"key": "client_id",
											"value": "0oaotczfmsV8vXKS84x6"
										},
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "con_service.admin@domain.com"
										},
										{
											"key": "password",
											"value": "Connect@1234"
										},
										{
											"key": "scope",
											"value": "openid"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7399](https://jira.cnvrmedia.net/browse/PID-7399)\n\n&#9724; **NAME:** Validating accesstoken generation when tried with invalid credential\n\n&#9724; **DESCRIPTION:** \n*    Octa-Authentication-request is made to generate accessToken with invalid username/password.\n\n&#9724; **EXPECTED RESULT:**\n*    An exception will occur and it will display following error message,\n*    \"error\": \"invalid_grant\"\n*    \"error_description\": \"The credentials provided were invalid.\"\n\n&#9724; **REQUIRED HEADERS:**\n\n*    \"userName\"\n*    \"password\"\n*    \"grant_type\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"error\"\n*   \"error_description\""
							},
							"response": []
						},
						{
							"name": "Authentication > (PID-7400)-Validating accesstoken-generation  when tried with  invalid grant type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var description =\"Display error message as : The authorization grant type is not supported by the authorization server\"\r",
											"pm.test(description, function () {\r",
											" pm.response.to.be.withBody;\r",
											" pm.response.to.be.json;\r",
											" pm.response.to.have.status(400);\r",
											" pm.expect(jsonData.error).to.not.be.null;\r",
											" pm.expect(jsonData.error_description).to.not.be.null;\r",
											" pm.expect(jsonData.error).to.equal(\"unsupported_grant_type\");\r",
											" pm.expect(jsonData.error_description).to.contains(\"The authorization grant type is not supported by the authorization server\");\r",
											" });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7400\",\r",
											"                    sprint: \"Q3-2020\",\r",
											"                    subject: \"authentication\",\r",
											"                    tags: \"#Authentication#Core#accessTokenGeneration#invalidGrantType\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=77202F648DCEBA8BE1A919D725E4C6EE"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "\"\"",
											"value": "\"\"",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://datahub-poc.okta.com/oauth2/ausnd2e1vgy1PNiOE4x6/v1/token?client_id=0oaotczfmsV8vXKS84x6&grant_type=password1&username=con_service.admin@domain.com&password=Connect@123&scope=openid",
									"protocol": "https",
									"host": [
										"datahub-poc",
										"okta",
										"com"
									],
									"path": [
										"oauth2",
										"ausnd2e1vgy1PNiOE4x6",
										"v1",
										"token"
									],
									"query": [
										{
											"key": "client_id",
											"value": "0oaotczfmsV8vXKS84x6"
										},
										{
											"key": "grant_type",
											"value": "password1"
										},
										{
											"key": "username",
											"value": "con_service.admin@domain.com"
										},
										{
											"key": "password",
											"value": "Connect@123"
										},
										{
											"key": "scope",
											"value": "openid"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7400](https://jira.cnvrmedia.net/browse/PID-7400)\n\n&#9724; **NAME:** Validating accesstoken-generation  when tried with  invalid grant type\n\n&#9724; **DESCRIPTION:** \n*    Octa-Authentication-request is made to generate accessToken with invalid grant_type.\n\n&#9724; **EXPECTED RESULT:**\n*    An exception will occur and it will display following error message,\n*    \"error\": \"unsupported_grant_type\",\n*    \"error_description\": \"The authorization grant type is not supported by the authorization server. Configured grant types: [refresh_token, password, authorization_code].\"\n\n\n&#9724; **REQUIRED HEADERS:**\n\n*    \"userName\"\n*    \"password\"\n*    \"grant_type\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"error\"\n*   \"error_description\""
							},
							"response": []
						},
						{
							"name": "terminate-authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Terminating : \" + pm.variables.get(\"folder\"), ()=>{});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server}}/usart/ping",
									"host": [
										"{{server}}"
									],
									"path": [
										"usart",
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({\"key\":\"folder\", \"value\":\"Authentication\"});",
									"pm.variables.set(\"folder\", \"authentication\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "REALTIME",
					"item": [
						{
							"name": "init-realtime",
							"item": [
								{
									"name": "init-realtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "identity-search",
							"item": [
								{
									"name": "init-identity-search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.globals.set('identityUtilFunctions', function identityUtilFunctions() {\r",
													"let identityUtil = {};\r",
													"//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx//\r",
													"identityUtil.displayData = (msg, object, keys) => {\r",
													"    let dataToDisplay = \"[\";    \r",
													"    for(key of keys) {\r",
													"        value = object[key]\r",
													"        if(value == '') {\r",
													"            value = ' '\r",
													"        }\r",
													"        dataToDisplay = dataToDisplay + key + \"=\"  + value + \"|\"\r",
													"    }\r",
													"    dataToDisplay = dataToDisplay.slice(0, -1); // Remove last comma\r",
													"    dataToDisplay = dataToDisplay + \"]\";\r",
													"    pm.test( msg + dataToDisplay);\r",
													"}\r",
													"\r",
													"identityUtil.validateRequiredFields = (object, keys) => {\r",
													"    var allKeys = '';\r",
													"    for(key of keys) {\r",
													"        allKeys = allKeys + key + \",\"\r",
													"    }\r",
													"    allKeys = allKeys.slice(0, -1); // Remove last comma\r",
													"    pm.test(\"Validate Input -> Required fields (\" + allKeys +\") are provided.\",()=>{\r",
													"        for(key of keys) {\r",
													"            utils.validateIfNonEmpty(object[key]);\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"identityUtil.validateExistingRecord = (inputRecord, existingRecord, keys, emptyFields) => {\r",
													"    var allKeys = '';\r",
													"    for(key of keys) {\r",
													"        allKeys = allKeys + key + \",\"\r",
													"    }\r",
													"    allKeys = allKeys.slice(0, -1); // Remove last comma\r",
													"    var allEmptyFields = '';\r",
													"    for(key of emptyFields) {\r",
													"        allEmptyFields =  allEmptyFields + key + \",\"\r",
													"    }\r",
													"    allEmptyFields = allEmptyFields.slice(0, -1); // Remove last comma\r",
													"    \r",
													"    if(allEmptyFields != '') {\r",
													"        allKeys = allKeys + \" & no (\" + allEmptyFields + \")\"\r",
													"    }\r",
													"    pm.test(\"Validate existing -> Identity exists with given \" + allKeys , ()=>{\r",
													"        utils.validateIfNonEmpty(existingRecord['individualId']);\r",
													"        for(key of keys) {\r",
													"           pm.expect(inputRecord[key]).to.equal(existingRecord[key]);\r",
													"        }\r",
													"        for(key of emptyFields) {\r",
													"          utils.validateIfEmpty(existingRecord[key]);\r",
													"        }                \r",
													"    });\r",
													"}\r",
													"identityUtil.validateNewId = (outputData, idKey) => {\r",
													"    pm.test(\"Validate output ->  A new identity record gets created & \"+idKey+\" comes populated in the response.\", ()=>{\r",
													"        utils.validateIfNonEmpty(outputData[idKey]);\r",
													"    });\r",
													"}\r",
													"\r",
													"identityUtil.validateExistingId = (outputData, existingData, idKey) => {\r",
													"    pm.test(\"Validate output ->  Existing \"+idKey+\" comes populated in the output.\", ()=>{\r",
													"        pm.expect(outputData[idKey]).to.equal(existingData[idKey]);\r",
													"    });\r",
													"} \r",
													"\r",
													"identityUtil.validateIdentitySearchRequestAndResponse = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"identityUtil.executeTestScript = (caller) => {\r",
													"    var requestList = pm.variables.get(\"requestList\");\r",
													"    var requestNo = pm.variables.get(\"requestNo\");    \r",
													"    if(typeof(requestNo) == 'undefined') {\r",
													"        requestNo = 0;\r",
													"    }\r",
													"    var requestType = requestList[requestNo];\r",
													"    switch(requestType) {\r",
													"        case \"noMatchFoundRequest\" : caller.testScript_noMatchFoundRequest(); break;\r",
													"        case \"partialMatchFoundRequest\" : caller.testScript_partialMatchFoundRequest(); break;\r",
													"        case \"fullMatchFoundRequest\" : caller.testScript_fullMatchFoundRequest(); break;\r",
													"        default: {console.log(\"Request No = \"+ requestNo +\"Request Type=\"+ requestType +\".No request handler found.\")}\r",
													"    }\r",
													"    pm.variables.clear();\r",
													"    if(requestNo != requestList.length-1) {\r",
													"        pm.variables.set(\"requestNo\", requestNo + 1);\r",
													"        postman.setNextRequest(pm.info.requestName);\r",
													"    }\r",
													"}\r",
													"\r",
													"identityUtil.executePreRequestScript = (caller) =>  {    \r",
													"    requestList = caller.requestList;\r",
													"    pm.variables.set(\"requestList\", requestList);\r",
													"    var requestNo = pm.variables.get(\"requestNo\");\r",
													"    if(typeof(requestNo) == 'undefined') {\r",
													"        requestNo = 0;        \r",
													"    }\r",
													"    var requestType = requestList[requestNo];\r",
													"    switch(requestType) {\r",
													"        case \"noMatchFoundRequest\" : caller.preReqScript_noMatchFoundRequest(); break;\r",
													"        case \"partialMatchFoundRequest\" : caller.preReqScript_partialMatchFoundRequest(); break;\r",
													"        case \"fullMatchFoundRequest\" : caller.preReqScript_fullMatchFoundRequest(); break;\r",
													"        default: {console.log(\"Request type = \"+ requestType +\".No request handler found.\")}\r",
													"    }\r",
													"    setMetadata();\r",
													"}\r",
													"\r",
													"\r",
													"//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx//\r",
													"    return identityUtil;\r",
													"} + '; identityUtilFunctions();');\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > identity-search >(PID-7007)- Identity search by  emailAddress1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-search by emailAddress1 when no match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New individual gets generated and individualID returns in the output.\", type : \"VALIDATE_NEWINDV\"});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"SINGLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-search by emailAddress1 when single match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'emailAddress1', 'fullName'],\r",
													"            existingRecords : { \"email-match-record\" : pm.variables.get('matchingRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchingRecord')});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"MULTIPLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-3 : Identity-search by emailAddress1 when multiple match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'emailAddress1', 'fullName'],\r",
													"            existingRecords : { \"email-match-record-1\" : pm.variables.get('matchingRecord1'), \"email-match-record-2\": pm.variables.get('matchingRecord2')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Shortest matching individualID returns in the output.\",\r",
													"         type : \"VALIDATE_SHORTESTID\", existingRecords :[pm.variables.get('matchingRecord1'), pm.variables.get('matchingRecord2')]});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();        \r",
													"    })();\r",
													"}\r",
													"//=================================================================================================================="
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7007\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByEmailAddress1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"NO_MATCH_FOUND_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"emailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
													"    pm.variables.set(\"requestType\", 'NO_MATCH_FOUND_REQUEST');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request.testerInput = {'emailAddress1' : utils.getRandomDataForField('emailAddress1')};    \r",
													"    (function createMatchingRecord() {                        \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                   \r",
													"            pm.variables.set(\"requestType\", 'SINGLE_MATCH_FOUND_REQUEST');     \r",
													"            pm.variables.set(\"emailAddress1\", request.testerInput.emailAddress1);                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    emailAddress = utils.getRandomDataForField('emailAddress1');\r",
													"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request1.testerInput = {'emailAddress1' : emailAddress, 'fullName' : utils.getRandomDataForField('fullName') };\r",
													"    request2.testerInput = {'emailAddress1' : emailAddress, 'fullName' : utils.getRandomDataForField('fullName')}; \r",
													"    (function createMatchingRecord1() {                                  \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) => {                \r",
													"                pm.variables.set(\"matchingRecord1\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function createMatchingRecord2() {                                    \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) => {               \r",
													"                pm.variables.set(\"matchingRecord2\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                        \r",
													"            pm.variables.set(\"emailAddress1\", emailAddress);\r",
													"            pm.variables.set(\"requestType\", 'MULTIPLE_MATCH_FOUND_REQUEST');                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"\",\r\n        \"addressLine1\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"familyName\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7007](https://jira.cnvrmedia.net/browse/PID-7007)\n\n&#9724; **NAME:** Identity search by  emailAddress1\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> identity-search with only \"emailAddress1\" provided in the input and other search keys (such as fullName) give empty.\n\n&#9724; **EXPECTED RESULT:**\n*   case1: no match found ->  new individualId generated and returned in response\n*   case2: single match found - existing individualId returned in the response\n*   case3: multiple match found (i.e multiple record exists with different fullName)- shortest existing individualId returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*   \"emailAddress1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity-search >(PID-7009)- Identity search by  emailAddress1+fullName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7009\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByEmailAddress1AndFullName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-search by ( emailAddress1 + fullName) when no match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New individual gets generated and individualID returns in the output.\", type : \"VALIDATE_NEWINDV\"});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"SINGLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-search by (emailAddress1 + fullName) when single match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'emailAddress1', 'fullName'],\r",
													"            existingRecords : { \"(email+fullName)-match-record\" : pm.variables.get('matchingRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchingRecord')});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"MULTIPLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-3 : Identity-search by (emailAddress1 + fullName) when multiple match found(with different phone1).\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'emailAddress1', 'fullName', 'phone1'],\r",
													"            existingRecords : { \r",
													"                \"(email+fullName)-match-record-1\" : pm.variables.get('matchingRecord1'),\r",
													"                \"(email+fullName)-match-record-2\": pm.variables.get('matchingRecord2')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Shortest matching individualID returns in the output.\",\r",
													"         type : \"VALIDATE_SHORTESTID\", existingRecords :[pm.variables.get('matchingRecord1'), pm.variables.get('matchingRecord2')]});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();        \r",
													"    })();\r",
													"}\r",
													"//=================================================================================================================="
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7009\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"Realtime > Identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByEmailAddress1AndFullName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"NO_MATCH_FOUND_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"emailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
													"    pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
													"    pm.variables.set(\"requestType\", 'NO_MATCH_FOUND_REQUEST');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request.testerInput = {'emailAddress1' : utils.getRandomDataForField('emailAddress1'), \r",
													"    'fullName' : utils.getRandomDataForField('fullName')};    \r",
													"    (function createMatchingRecord() {                        \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                   \r",
													"            pm.variables.set(\"requestType\", 'SINGLE_MATCH_FOUND_REQUEST');     \r",
													"            pm.variables.set(\"emailAddress1\", request.testerInput.emailAddress1);                  \r",
													"            pm.variables.set(\"fullName\", request.testerInput.fullName);                     \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    emailAddress = utils.getRandomDataForField('emailAddress1');\r",
													"    fullName = utils.getRandomDataForField('fullName');\r",
													"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request1.testerInput = {'emailAddress1' : emailAddress, 'fullName' : fullName, 'phone1' : utils.getRandomDataForField('phone1') };\r",
													"    request2.testerInput = {'emailAddress1' : emailAddress, 'fullName' : fullName, 'phone1' : utils.getRandomDataForField('phone1') }; \r",
													"    (function createMatchingRecord1() {                                  \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) => {                \r",
													"                pm.variables.set(\"matchingRecord1\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function createMatchingRecord2() {                                    \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) => {               \r",
													"                pm.variables.set(\"matchingRecord2\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                        \r",
													"            pm.variables.set(\"emailAddress1\", emailAddress);\r",
													"            pm.variables.set(\"fullName\", fullName);\r",
													"            pm.variables.set(\"requestType\", 'MULTIPLE_MATCH_FOUND_REQUEST');                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"addressLine1\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"familyName\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7009](https://jira.cnvrmedia.net/browse/PID-7009)\n\n&#9724; **NAME:** Identity search by  emailAddress1+fullName\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> identity-search with \"emailAddress1\", \"fullName\" provided in the input.\n\n&#9724; **EXPECTED RESULT:**\n*   case1: no match found ->  new individualId generated and returned in response\n*   case2: single match found - existing individualId returned in the response\n*   case3: multiple match found (i.e multiple record exists with different phone1)- shortest existing individualId returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*   \"emailAddress1\"\n*   \"fullName\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity-search >(PID-7011)- Identity search by  phone1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7011\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByPhone1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"NO_MATCH_FOUND_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"phone1\", utils.getRandomDataForField('phone1'));\r",
													"    pm.variables.set(\"requestType\", 'NO_MATCH_FOUND_REQUEST');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request.testerInput = {'phone1' : utils.getRandomDataForField('phone1')};    \r",
													"    (function createMatchingRecord() {                        \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                   \r",
													"            pm.variables.set(\"requestType\", 'SINGLE_MATCH_FOUND_REQUEST');     \r",
													"            pm.variables.set(\"phone1\", request.testerInput.phone1);                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    phone = utils.getRandomDataForField('phone1');\r",
													"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request3 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request1.testerInput = {'phone1' : phone, 'fullName' : utils.getRandomDataForField('fullName') };\r",
													"    request2.testerInput = {'phone1' : phone, 'fullName' : utils.getRandomDataForField('fullName')}; \r",
													"    request3.testerInput = {'phone1' : phone, 'fullName' : \"\"}; \r",
													"    (function createMatchingRecord1() {                                  \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) => {                \r",
													"                pm.variables.set(\"matchingRecord1\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function createMatchingRecord2() {                                    \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) => {               \r",
													"                pm.variables.set(\"matchingRecord2\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function createMatchingRecord3() {                                    \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request3), (error, response) => {               \r",
													"                pm.variables.set(\"matchingRecord3\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                        \r",
													"            pm.variables.set(\"phone1\", phone);\r",
													"            pm.variables.set(\"requestType\", 'MULTIPLE_MATCH_FOUND_REQUEST');                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"\r",
													"if(outputData.individualId == undefined || outputData.individualId == ''){\r",
													"        pm.test(\"Input phone no(\"+ outputData.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(outputData.individualId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"    }    \r",
													"\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-search by phone1 when no match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['phone1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New individual gets generated and individualID returns in the output.\", type : \"VALIDATE_NEWINDV\"});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"SINGLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-search by phone1 when single match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['phone1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'phone1', 'fullName'],\r",
													"            existingRecords : { \"phone-match-record\" : pm.variables.get('matchingRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchingRecord')});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"MULTIPLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-3 : Identity-search by phone1 when multiple match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['phone1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'phone1'] });\r",
													"        console.log(\"ssssssssssssssssspm.variables.get('matchingRecord3')=\" + JSON.stringify(pm.variables.get('matchingRecord3')));\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'phone1', 'fullName'],\r",
													"            existingRecords : { \"phone-match-record-1\" : pm.variables.get('matchingRecord1'),\r",
													"                                 \"phone-match-record-2\": pm.variables.get('matchingRecord2'),\r",
													"                                 \"phone-match-record-3\": pm.variables.get('matchingRecord3')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Shortest matching individualID returns in the output.\",\r",
													"         type : \"VALIDATE_SHORTESTID\", existingRecords :[pm.variables.get('matchingRecord1'), pm.variables.get('matchingRecord2'),  pm.variables.get('matchingRecord3')]});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();        \r",
													"    })();\r",
													"}\r",
													"//=================================================================================================================="
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"addressLine1\": \"\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"familyName\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7011](https://jira.cnvrmedia.net/browse/PID-7011)\n\n&#9724; **NAME:** Identity search by  phone1\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> identity-search with only \"phone1\" provided in the input and other search keys (such as fullName) give empty.\n\n&#9724; **EXPECTED RESULT:**\n*   case1: no match found ->  new individualId generated and returned in response\n*   case2: single match found - existing individualId returned in the response\n*   case3: multiple match found (i.e multiple record exists with different fullName)- shortest existing individualId returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*   \"phone1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity-search >(PID-7012)- Identity search by  phone1+fullName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7012\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByPhone1AndFullName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"NO_MATCH_FOUND_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"phone1\", utils.getRandomDataForField('phone1'));\r",
													"    pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
													"    pm.variables.set(\"requestType\", 'NO_MATCH_FOUND_REQUEST');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request.testerInput = {'phone1' : utils.getRandomDataForField('phone1'), \r",
													"    'fullName' : utils.getRandomDataForField('fullName')};    \r",
													"    (function createMatchingRecord() {                        \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                   \r",
													"            pm.variables.set(\"requestType\", 'SINGLE_MATCH_FOUND_REQUEST');     \r",
													"            pm.variables.set(\"phone1\", request.testerInput.phone1);                  \r",
													"            pm.variables.set(\"fullName\", request.testerInput.fullName);                     \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    phone = utils.getRandomDataForField('phone1');\r",
													"    fullName = utils.getRandomDataForField('fullName');\r",
													"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request1.testerInput = {'phone1' : phone, 'fullName' : fullName, 'emailAddress1' : utils.getRandomDataForField('emailAddress1') };\r",
													"    request2.testerInput = {'phone1' : phone, 'fullName' : fullName, 'emailAddress1' : utils.getRandomDataForField('emailAddress1') }; \r",
													"    (function createMatchingRecord1() {                                  \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) => {                \r",
													"                pm.variables.set(\"matchingRecord1\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function createMatchingRecord2() {                                    \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) => {               \r",
													"                pm.variables.set(\"matchingRecord2\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                        \r",
													"            pm.variables.set(\"phone1\", phone);\r",
													"            pm.variables.set(\"fullName\", fullName);\r",
													"            pm.variables.set(\"requestType\", 'MULTIPLE_MATCH_FOUND_REQUEST');                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													" if(outputData.individualId == undefined || outputData.individualId == ''){\r",
													"        pm.test(\"Input phone no(\"+ outputData.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(outputData.individualId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"    }\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-search by ( phone1 + fullName) when no match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['phone1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New individual gets generated and individualID returns in the output.\", type : \"VALIDATE_NEWINDV\"});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"SINGLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-search by (phone1 + fullName) when single match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['phone1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'phone1', 'fullName'],\r",
													"            existingRecords : { \"(phone+fullName)-match-record\" : pm.variables.get('matchingRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchingRecord')});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"MULTIPLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-3 : Identity-search by (phone1 + fullName) when multiple match found(with different emailAddress1).\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['phone1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'phone1', 'fullName', 'emailAddress1'],\r",
													"            existingRecords : { \r",
													"                \"(phone+fullName)-match-record-1\" : pm.variables.get('matchingRecord1'),\r",
													"                \"(phone+fullName)-match-record-2\": pm.variables.get('matchingRecord2')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Shortest matching individualID returns in the output.\",\r",
													"         type : \"VALIDATE_SHORTESTID\", existingRecords :[pm.variables.get('matchingRecord1'), pm.variables.get('matchingRecord2')]});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();        \r",
													"    })();\r",
													"}\r",
													"//=================================================================================================================="
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"addressLine1\": \"\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"familyName\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7012](https://jira.cnvrmedia.net/browse/PID-7012)\n\n&#9724; **NAME:** Identity search by  phone1+fullName\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> identity-search with \"phone1\", \"fullName\" provided in the input.\n\n&#9724; **EXPECTED RESULT:**\n*   case1: no match found ->  new individualId generated and returned in response\n*   case2: single match found - existing individualId returned in the response\n*   case3: multiple match found (i.e multiple record exists with different emailAddress1 and no emailAddress1 )- shortest existing individualId returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*   \"phone1\"\n*   \"fullName\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity-search >(PID-7879)- Identity search by  addressLine1+postalCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-search by (addressLine1 + postalCode) when no match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['addressId', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New addressId gets generated and addressId returns in the output.\", type : \"VALIDATE_NEWADDRESS\"});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"SINGLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-search by (addressLine1 + postalCode) when a match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['addressId', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", id : 'addressId',\r",
													"            fields : ['addressId', 'addressLine1', 'postalCode'],\r",
													"            existingRecords : { \"(addressLine1 + postalCode)-match-record\" : pm.variables.get('matchingRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing addressId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGADDRESS\", existingRecord : pm.variables.get('matchingRecord')});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();        \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7879\",\r",
													"                    sprint: \"21.01.02\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByAddressLine1AndPostalCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"NO_MATCH_FOUND_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    address = utils.getRandomDataForField('address');\r",
													"    pm.variables.set(\"addressLine1\", address.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", address.postalCode);\r",
													"    pm.variables.set(\"requestType\", 'NO_MATCH_FOUND_REQUEST');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    address = utils.getRandomDataForField('address');\r",
													"    request.testerInput = {'addressLine1' : address.addressLine1, 'postalCode' : address.postalCode};    \r",
													"    (function createMatchingRecord() {                        \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                   \r",
													"            pm.variables.set(\"requestType\", 'SINGLE_MATCH_FOUND_REQUEST');     \r",
													"            pm.variables.set(\"addressLine1\", request.testerInput.addressLine1);                        \r",
													"            pm.variables.set(\"postalCode\", request.testerInput.postalCode);                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"fullName\":\"\",\r\n    \"emailAddress1\":\"\",\r\n    \"addressLine1\": \"{{addressLine1}}\",    \r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"\",\r\n    \"familyName\": \"\",\r\n    \"gender\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"no\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7879](https://jira.cnvrmedia.net/browse/PID-7879)\n\n&#9724; **NAME:** Identity search by  addressLine1+postalCode\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> identity-search with addressLine1, postalCode provided in the input.\n\n&#9724; **EXPECTED RESULT:**\n*   case1: no match found ->  new addressId generated and returned in response\n*   case2: single match found - existing addressId returned in the response\n*   Note- multiple match not possible as there is no additional search key for address\n\n&#9724; **INPUT FIELDS:**\n*   \"postalCode\"\n*   \"addressLine1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"addressId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity-search >(PID-7880)- Identity search by  emailAddress1 + phone1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"if(outputData.individualId == undefined || outputData.individualId == ''){\r",
													"        pm.test(\"Input phone no(\"+ outputData.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(outputData.individualId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"    }\r",
													"    let phoneMatchingRecord = pm.variables.get(\"phoneMatchRecord\");\r",
													"    console.log(phoneMatchingRecord);\r",
													"    if(phoneMatchingRecord != undefined){\r",
													"        console.log(phoneMatchingRecord.individualId);\r",
													"        if(phoneMatchingRecord.individualId == undefined || phoneMatchingRecord.individualId == ''){\r",
													"            pm.test(\"Input phone no(\"+ phoneMatchingRecord.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(phoneMatchRecord.individualId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    \r",
													"\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-search by (emailAddress1 + phone1) when no match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New individual gets generated and individualID returns in the output.\", type : \"VALIDATE_NEWINDV\"});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"SINGLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-search by (emailAddress1 + phone1) when single match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'emailAddress1', 'phone1'],\r",
													"            existingRecords : { \"(email + phone)-match-record\" : pm.variables.get('matchingRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchingRecord')});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"MULTIPLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-3 : Identity-search by (emailAddress1 + phone1 + fullName) when multiple match found (i.e email-match & phone-match with same fullName).\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'phone1', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1', 'phone1'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'emailAddress1', 'phone1', 'fullName'],\r",
													"            existingRecords : { \"email-Match-Record\" : pm.variables.get('emailMatchRecord'), \"phone-match-record\": pm.variables.get('phoneMatchRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Shortest matching individualID returns in the output.\",\r",
													"         type : \"VALIDATE_SHORTESTID\", existingRecords :[pm.variables.get('phoneMatchRecord'), pm.variables.get('emailMatchRecord')]});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();        \r",
													"    })();\r",
													"}\r",
													"//=================================================================================================================="
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7880\",\r",
													"                    sprint: \"21.01.02\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByEmailAddress1AndPhone1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"NO_MATCH_FOUND_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"emailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
													"    pm.variables.set(\"phone1\", utils.getRandomDataForField('phone1'));\r",
													"    pm.variables.set(\"fullName\", \"\");\r",
													"    pm.variables.set(\"requestType\", 'NO_MATCH_FOUND_REQUEST');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request.testerInput = {'emailAddress1' : utils.getRandomDataForField('emailAddress1'),\r",
													"        'phone1' : utils.getRandomDataForField('phone1')};    \r",
													"    (function createMatchingRecord() {                        \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                   \r",
													"            pm.variables.set(\"requestType\", 'SINGLE_MATCH_FOUND_REQUEST');     \r",
													"            pm.variables.set(\"emailAddress1\", request.testerInput.emailAddress1);                        \r",
													"            pm.variables.set(\"phone1\", request.testerInput.phone1);   \r",
													"            pm.variables.set(\"fullName\", \"\");                     \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    fullName = utils.getRandomDataForField('fullName');\r",
													"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request1.testerInput = {'emailAddress1' : utils.getRandomDataForField('emailAddress1'), 'fullName' :  fullName};\r",
													"    request2.testerInput = {'phone1' : utils.getRandomDataForField('phone1'), 'fullName' : fullName}; \r",
													"    (function createMatchingRecord1() {                                  \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) => {                \r",
													"                pm.variables.set(\"emailMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function createMatchingRecord2() {                                    \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) => {               \r",
													"                pm.variables.set(\"phoneMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                        \r",
													"            pm.variables.set(\"emailAddress1\", request1.testerInput.emailAddress1);\r",
													"            pm.variables.set(\"phone1\", request2.testerInput.phone1);\r",
													"            pm.variables.set(\"fullName\", fullName);\r",
													"            pm.variables.set(\"requestType\", 'MULTIPLE_MATCH_FOUND_REQUEST');                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"fullName\":\"{{fullName}}\",\r\n    \"emailAddress1\":\"{{emailAddress1}}\",\r\n    \"addressLine1\": \"\",    \r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"\",\r\n    \"countryCode\": \"\",\r\n    \"familyName\": \"\",\r\n    \"gender\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"no\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7880](https://jira.cnvrmedia.net/browse/PID-7880)\n\n&#9724; **NAME:** Identity search by  emailAddress1 + phone1\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> identity-search with (emailAddress1 + phone1) provided in the input\n\n&#9724; **EXPECTED RESULT:**\n*   case1: no match found ->  new individualId generated and returned in response\n*   case2: single match found - existing individualId returned in the response\n*   case3: multiple match found (i.e multiple record exists with different fullName and same (phone1 + emailAddress1))- shortest existing individualId returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*   \"emailAddress1\"\n*   \"phone1\"\n*   \"fullName\"\n\n&#9724;**OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime  >identity-search-(PID-9214)Realtime request with \"NULL\",\"N/A\",\"\\N\" in addressLine2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"// //INITIALIZATION==============================================================================================================================================//\r",
													" const utils = eval(globals.connectUtils);\r",
													"// //DEFINITION=================================================================================================================================================//\r",
													" let requestBody = JSON.parse(pm.request.body);\r",
													" let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													" let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													" this.defineResponseValidation = () => {\r",
													"     utils.validateOKResponse();\r",
													" }\r",
													"\r",
													" this.defineRequestValidation= () => {\r",
													"     utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													" }\r",
													" this.defineInputDataValidation =() => {\r",
													"     pm.test(\"Validate Input -> Required fields(fullName, addressLine1,addressLine2, postalCode,countryCode) are provided.\",()=>{\r",
													"          utils.validateIfNonEmpty(inputData.fullName)\r",
													"          utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"          utils.validateIfNonEmpty(inputData.addressLine2);\r",
													"          utils.validateIfNonEmpty(inputData.postalCode);\r",
													"          utils.validateIfNonEmpty(inputData.countryCode);\r",
													"     });\r",
													"    \r",
													" }\r",
													" this.defineExistingDataValidation = () => {\r",
													"     // Not Applicable\r",
													" };\r",
													"\r",
													" this.defineOutputDataValidation= () => {\r",
													"     pm.test(\"Validate output -> addressID comes populated in the output.\", () => {\r",
													"         //utils.validateIfNonEmpty(outputData.addressLine2);\r",
													"         utils.validateIfNonEmpty(outputData.addressId);\r",
													"\r",
													"     });\r",
													" }\r",
													" this.defineInputDataToDisplay = ()=> {\r",
													"     let inputDataToDisplay = \r",
													"      \"[\"\r",
													"       + \"fullName=\" + inputData.fullName+\" ,\"\r",
													"       + \"addressLine1=\"+ inputData.addressLine1+\" ,\"\r",
													"       +\"addressLine2=\"+inputData.addressLine2+\" ,\"\r",
													"       +\" postalCode=\"+inputData.postalCode+\" ,\"\r",
													"       +\" countryCode=\"+ inputData.countryCode+\"]\";\r",
													"       return inputDataToDisplay;\r",
													"   }\r",
													"  \r",
													"\r",
													"   this.defineOutputDataToDisplay = ()=> {\r",
													"     let outputDataToDisplay = \"[\"\r",
													"             +\"addressLine1=\"+ outputData.addressLine1\r",
													"             +\" ,\"\r",
													"             +\"addressLine2=\"+ outputData.addressLine2\r",
													"         +\"]\";\r",
													"     return outputDataToDisplay;    \r",
													" }\r",
													" this.defineExistingDataToDisplay = () => {\r",
													"     //Not applicable\r",
													" };\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================\r",
													" (function setMetadata() {\r",
													"     pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                     pid: \"9214\",\r",
													"                     sprint: \"22.02.03\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enableShortIdCheckProfileEnhancement\"\r",
													"                 })\r",
													"     });\r",
													" })();\r",
													"  let testMetadata = {\r",
													"           \"pid\": \"8382\",\r",
													"     \"sprint\": \"22.02.03\",\r",
													"     \"subject\": \"realtime > identity-search\",\r",
													"     \"tags\": \"#RealTime#identity#\"\r",
													" };\r",
													"// //INITIALIZATION==============================================================================================================================================//\r",
													" const utils = eval(globals.connectUtils);\r",
													"\r",
													" this.generateDataForCurrentRequest = () => {\r",
													"     let testerInput = {\"fullName\":\"Dax Bays\",\"addressLine1\":\"356 W 45TH ST\",\"addressLine2\":\"BSMT NULL\",\"postalCode\":\"76054\",\"countryCode\":\"USA\"};\r",
													"     utils.setRandomDataForRequest(testerInput);\r",
													" }\r",
													"\r",
													"// //EXECUTION================================================================================================================================================//\r",
													" this.generateDataForCurrentRequest();\r",
													" utils.setMetaData(pm.request, JSON.stringify(testMetadata));\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"{{fullname}}\",\r\n        \"addressLine1\":\"{{addressLine1}}\" ,\r\n        \"addressLine2\": \"{{addressLine2}}\",\r\n        \"locality1\": \"\",\r\n        \"locality2\": \"\",\r\n        \"locality3\": \"\",\r\n        \"region1\": \"\",\r\n        \"region2\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"countryCode\": \"{{countryCode}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"yes\",\r\n            \"enablePcoa\": \"yes\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > identity-search >PID-7884)- Identity search by  all (emailAddress1, phone1, fullName, address(addressLine1 + postalCode))",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"if(outputData.individualId == undefined || outputData.individualId == ''){\r",
													"        pm.test(\"Input phone no(\"+ outputData.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(outputData.individualId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"    }\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-search by all (emailAddress1, phone1, fullName, (addressLine1+postalCode)) when no match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'phone1', 'fullName', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1', 'phone1', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New individual gets generated and individualID returns in the output.\", type : \"VALIDATE_NEWINDV\"});\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > New address gets generated and addressId returns in the output.\", type : \"VALIDATE_NEWADDRESS\"});\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"SINGLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-search by all (emailAddress1, phone1, fullName, (addressLine1+postalCode)) when single match found.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'phone1', 'fullName', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1', 'phone1', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['individualId', 'addressId', 'emailAddress1', 'phone1', 'fullName', 'addressLine1', 'postalCode'],\r",
													"            existingRecords : { \"(emailAddress1 + phone1 + fullName + (addressLine1+postalCode))-match-record\" : pm.variables.get('matchingRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchingRecord')});\r",
													"        utils.doTestLogging({msg : \"(7)- Validate Output > Existing addressId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGADDRESS\", existingRecord : pm.variables.get('matchingRecord')});     \r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"MULTIPLE_MATCH_FOUND_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-3 : Identity-search by all (emailAddress1, phone1, fullName, (addressLine1+postalCode)) when multiple match found (i.e email-match & phone-match with same (addressLine1 + postalCode))).\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'phone1', 'fullName', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1', 'phone1', 'addressLine1', 'postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['addressLine1', 'postalCode','individualId','addressId', 'emailAddress1', 'phone1', 'fullName' ],\r",
													"            existingRecords : { \"email-Match-Record\" : pm.variables.get('emailMatchRecord'), \"phone-match-record\": pm.variables.get('phoneMatchRecord')} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Shortest matching individualID returns in the output.\",\r",
													"         type : \"VALIDATE_SHORTESTID\", existingRecords :[pm.variables.get('phoneMatchRecord'), pm.variables.get('emailMatchRecord')]});\r",
													"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing addressId returns in the output.\",\r",
													"             type : \"VALIDATE_EXISTINGADDRESS\", existingRecord : pm.variables.get('emailMatchRecord')}); \r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();        \r",
													"    })();\r",
													"}\r",
													"//=================================================================================================================="
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7884\",\r",
													"                    sprint: \"21.01.02\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#realtime#identitySearch#searchByEmailAddress1Phone1AddressLine1PostalCodeAndFullName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"NO_MATCH_FOUND_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"NO_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"emailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
													"    pm.variables.set(\"phone1\", utils.getRandomDataForField('phone1'));\r",
													"    pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
													"    address = utils.getRandomDataForField('address');\r",
													"    pm.variables.set(\"addressLine1\", address.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", address.postalCode);\r",
													"    pm.variables.set(\"requestType\", 'NO_MATCH_FOUND_REQUEST');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"SINGLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    address = utils.getRandomDataForField('address');\r",
													"    addressLine1 = utils.getRandomDataForField('addressLine1');\r",
													"    request.testerInput = {\r",
													"        'emailAddress1' : utils.getRandomDataForField('emailAddress1'),\r",
													"        'phone1' : utils.getRandomDataForField('phone1'), \r",
													"        'fullName' : utils.getRandomDataForField('fullName'),\r",
													"        'addressLine1' : addressLine1,\r",
													"        'postalCode' : address.postalCode};    \r",
													"    (function createMatchingRecord() {                        \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                   \r",
													"            pm.variables.set(\"requestType\", 'SINGLE_MATCH_FOUND_REQUEST');     \r",
													"            pm.variables.set(\"emailAddress1\", request.testerInput.emailAddress1);                        \r",
													"            pm.variables.set(\"phone1\", request.testerInput.phone1);   \r",
													"            pm.variables.set(\"fullName\", request.testerInput.fullName);\r",
													"            pm.variables.set(\"addressLine1\", request.testerInput.addressLine1);\r",
													"            pm.variables.set(\"postalCode\", request.testerInput.postalCode);                     \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"if(requestType == \"MULTIPLE_MATCH_FOUND_REQUEST\") {\r",
													"    pm.variables.clear();\r",
													"    fullName = utils.getRandomDataForField('fullName');\r",
													"    address = utils.getRandomDataForField('address');\r",
													"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"    addressLine1 = utils.getRandomDataForField('addressLine1');\r",
													"    request1.testerInput = {'emailAddress1' : utils.getRandomDataForField('emailAddress1'), 'fullName' :  fullName, 'addressLine1' : addressLine1, 'postalCode' : address.postalCode};\r",
													"    request2.testerInput = {'phone1' : utils.getRandomDataForField('phone1'), 'fullName' : fullName, 'addressLine1' : addressLine1, 'postalCode' : address.postalCode}; \r",
													"    (function createMatchingRecord1() {                                  \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) => {                \r",
													"                pm.variables.set(\"emailMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function createMatchingRecord2() {                                    \r",
													"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) => {               \r",
													"                pm.variables.set(\"phoneMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"    (function saveDataForCurrentRequest() {                        \r",
													"            pm.variables.set(\"emailAddress1\", request1.testerInput.emailAddress1);\r",
													"            pm.variables.set(\"phone1\", request2.testerInput.phone1);\r",
													"            pm.variables.set(\"fullName\", fullName);\r",
													"            pm.variables.set(\"addressLine1\", addressLine1);\r",
													"            pm.variables.set(\"postalCode\", address.postalCode);\r",
													"            pm.variables.set(\"requestType\", 'MULTIPLE_MATCH_FOUND_REQUEST');                        \r",
													"    })();\r",
													"}\r",
													"//==============================================================================================================\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"countryCode\": \"\",\r\n        \"familyName\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7884](https://jira.cnvrmedia.net/browse/PID-7884)\n\n&#9724; **NAME:** Identity search by  all (emailAddress1, phone1, fullName, address(addressLine1 + postalCode))\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> identity-search with  emailAddress1, phone1, fullName, address(addressLine1 + postalCode) provided in the input.\n\n\n&#9724; **EXPECTED RESULT:**\n*   case1: no match found ->  new individualId & addressId generated and returned in response\n*   case2: single match found - existing individualId & addressId returned in the response\n*   case3: multiple match found (i.e phone-match & email-match record exist with an address(addressLine1+postalCode))- shortest existing individualId  and the single(i.e common) addressId returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*   \"emailAddress1\"\n*   \"phone1\"\n*   \"fullName\"\n*   \"addressLine1\"\n*   \"postalCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"addressId\""
									},
									"response": []
								},
								{
									"name": "Realtime>identity-search>verify the add mode behaviour in the pac correction when secondary data is not provided in the request.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================\r",
													" (function setMetadata() {\r",
													"     pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                     pid: \"9214\",\r",
													"                     sprint: \"22.02.03\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enableShortIdCheckProfileEnhancement\"\r",
													"                 })\r",
													"     });\r",
													" })();\r",
													"  let testMetadata = {\r",
													"           \"pid\": \"8382\",\r",
													"     \"sprint\": \"22.02.03\",\r",
													"     \"subject\": \"realtime > identity-search\",\r",
													"     \"tags\": \"#RealTime#identity#\"\r",
													" };\r",
													"// //INITIALIZATION==============================================================================================================================================//\r",
													" const utils = eval(globals.connectUtils);\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"//      let testerInput = {\"fullName\":\"Dax Bays\",\"addressLine1\":\"356 W 45TH ST\",\"addressLine2\":\"BSMT NULL\",\"postalCode\":\"76054\",\"countryCode\":\"USA\"};\r",
													"//      utils.setRandomDataForRequest(testerInput);\r",
													"  }\r",
													"\r",
													"// //EXECUTION================================================================================================================================================//\r",
													" this.generateDataForCurrentRequest();\r",
													" utils.setMetaData(pm.request, JSON.stringify(testMetadata));\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"// //INITIALIZATION==============================================================================================================================================//\r",
													" const utils = eval(globals.connectUtils);\r",
													"// //DEFINITION=================================================================================================================================================//\r",
													" let requestBody = JSON.parse(pm.request.body);\r",
													" let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													" let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													" this.defineResponseValidation = () => {\r",
													"     utils.validateOKResponse();\r",
													" }\r",
													"\r",
													" this.defineRequestValidation= () => {\r",
													"     utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													" }\r",
													" this.defineInputDataValidation =() => {\r",
													"     pm.test(\"Validate Input -> Required fields(fullName, addressLine1,, postalCode,countryCode) are provided.\",()=>{\r",
													"          utils.validateIfNonEmpty(inputData.fullName)\r",
													"          utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"          //utils.validateIfNonEmpty(inputData.addressLine2);\r",
													"          utils.validateIfNonEmpty(inputData.postalCode);\r",
													"          utils.validateIfNonEmpty(inputData.countryCode);\r",
													"     });\r",
													"    \r",
													" }\r",
													" this.defineExistingDataValidation = () => {\r",
													"     // Not Applicable\r",
													" };\r",
													"\r",
													" this.defineOutputDataValidation= () => {\r",
													"     pm.test(\"Validate output -> addressLine2 comes populated in the output.\", () => {\r",
													"         utils.validateIfNonEmpty(outputData.addressLine2);\r",
													"         \r",
													"\r",
													"     });\r",
													" }\r",
													" this.defineInputDataToDisplay = ()=> {\r",
													"     let inputDataToDisplay = \r",
													"      \"[\"\r",
													"       + \"fullName=\" + inputData.fullName+\" ,\"\r",
													"       + \"addressLine1=\"+ inputData.addressLine1+\" ,\"\r",
													"       +\"locality1=\"+inputData.locality1+\" ,\"\r",
													"       +\"region1=\"+inputData.region1+\" ,\"\r",
													"       +\" postalCode=\"+inputData.postalCode+\" ,\"\r",
													"       +\" countryCode=\"+ inputData.countryCode+\"]\";\r",
													"       return inputDataToDisplay;\r",
													"   }\r",
													"  \r",
													"\r",
													"   this.defineOutputDataToDisplay = ()=> {\r",
													"     let outputDataToDisplay = \"[\"\r",
													"             +\"addressLine1=\"+ outputData.addressLine1\r",
													"             +\" ,\"\r",
													"             +\"addressLine2=\"+ outputData.addressLine2\r",
													"         +\"]\";\r",
													"     return outputDataToDisplay;    \r",
													" }\r",
													" this.defineExistingDataToDisplay = () => {\r",
													"     //Not applicable\r",
													" };\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"JACQUETTA COBB\",\r\n        \"addressLine1\":\"1250 CENTER ST APT 4G\" ,\r\n        \"addressLine2\": \"\",\r\n        \"locality1\": \"HENDERSON\",\r\n        \"locality2\": \"\",\r\n        \"locality3\": \"\",\r\n        \"region1\": \"KY\",\r\n        \"region2\": \"\",\r\n        \"postalCode\": \"76054\",\r\n        \"countryCode\": \"USA\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"yes\",\r\n            \"enablePcoa\": \"yes\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime>identity-search>verify the add mode behaviour in the pac correction when secondary data is  provided in the request.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================\r",
													" (function setMetadata() {\r",
													"     pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                     pid: \"9214\",\r",
													"                     sprint: \"22.02.03\",\r",
													"                    subject: \"realtime > identity-search\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enableShortIdCheckProfileEnhancement\"\r",
													"                 })\r",
													"     });\r",
													" })();\r",
													"  let testMetadata = {\r",
													"           \"pid\": \"8382\",\r",
													"     \"sprint\": \"22.02.03\",\r",
													"     \"subject\": \"realtime > identity-search\",\r",
													"     \"tags\": \"#RealTime#identity#\"\r",
													" };\r",
													"// //INITIALIZATION==============================================================================================================================================//\r",
													" const utils = eval(globals.connectUtils);\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"//      let testerInput = {\"fullName\":\"Dax Bays\",\"addressLine1\":\"356 W 45TH ST\",\"addressLine2\":\"BSMT NULL\",\"postalCode\":\"76054\",\"countryCode\":\"USA\"};\r",
													"//      utils.setRandomDataForRequest(testerInput);\r",
													"  }\r",
													"\r",
													"// //EXECUTION================================================================================================================================================//\r",
													" this.generateDataForCurrentRequest();\r",
													" utils.setMetaData(pm.request, JSON.stringify(testMetadata));\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"// //INITIALIZATION==============================================================================================================================================//\r",
													" const utils = eval(globals.connectUtils);\r",
													"// //DEFINITION=================================================================================================================================================//\r",
													" let requestBody = JSON.parse(pm.request.body);\r",
													" let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													" let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													" this.defineResponseValidation = () => {\r",
													"     utils.validateOKResponse();\r",
													" }\r",
													"\r",
													" this.defineRequestValidation= () => {\r",
													"     utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													" }\r",
													" this.defineInputDataValidation =() => {\r",
													"     pm.test(\"Validate Input -> Required fields(fullName, addressLine1,addressLine2, postalCode,countryCode) are provided.\",()=>{\r",
													"          utils.validateIfNonEmpty(inputData.fullName)\r",
													"          utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"          utils.validateIfNonEmpty(inputData.addressLine2);\r",
													"          utils.validateIfNonEmpty(inputData.postalCode);\r",
													"          utils.validateIfNonEmpty(inputData.countryCode);\r",
													"     });\r",
													"    \r",
													" }\r",
													" this.defineExistingDataValidation = () => {\r",
													"     // Not Applicable\r",
													" };\r",
													"\r",
													" this.defineOutputDataValidation= () => {\r",
													"     pm.test(\"Validate output -> addressLine2 comes populated with given address in the output .\", () => {\r",
													"         utils.validateIfNonEmpty(outputData.addressLine2);\r",
													"         \r",
													"\r",
													"\r",
													"         \r",
													"\r",
													"     });\r",
													" }\r",
													" this.defineInputDataToDisplay = ()=> {\r",
													"     let inputDataToDisplay = \r",
													"      \"[\"\r",
													"       + \"fullName=\" + inputData.fullName+\" ,\"\r",
													"       + \"addressLine1=\"+ inputData.addressLine1+\" ,\"\r",
													"       + \"addressLine2=\"+ inputData.addressLine2+\" ,\"\r",
													"       +\"locality1=\"+inputData.locality1+\" ,\"\r",
													"       +\"region1=\"+inputData.region1+\" ,\"\r",
													"       +\" postalCode=\"+inputData.postalCode+\" ,\"\r",
													"       +\" countryCode=\"+ inputData.countryCode+\"]\";\r",
													"       return inputDataToDisplay;\r",
													"   }\r",
													"  \r",
													"\r",
													"   this.defineOutputDataToDisplay = ()=> {\r",
													"     let outputDataToDisplay = \"[\"\r",
													"             +\"addressLine1=\"+ outputData.addressLine1\r",
													"             +\" ,\"\r",
													"             +\"addressLine2=\"+ outputData.addressLine2\r",
													"         +\"]\";\r",
													"     return outputDataToDisplay;    \r",
													" }\r",
													" this.defineExistingDataToDisplay = () => {\r",
													"     //Not applicable\r",
													" };\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"JACQUETTA COBB\",\r\n        \"addressLine1\":\"1250 CENTER ST APT 4G\" ,\r\n        \"addressLine2\": \"300 AB\",\r\n        \"locality1\": \"HENDERSON\",\r\n        \"locality2\": \"\",\r\n        \"locality3\": \"\",\r\n        \"region1\": \"KY\",\r\n        \"region2\": \"\",\r\n        \"postalCode\": \"76054\",\r\n        \"countryCode\": \"USA\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"yes\",\r\n            \"enablePcoa\": \"yes\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										}
									},
									"response": []
								},
								{
									"name": "terminate-identity-search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \"+ pm.variables.get(\"folder\"),()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"identity-search\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "identity-trustedIndividualId",
							"item": [
								{
									"name": "identity-hygiene-public-end-point",
									"item": [
										{
											"name": "identity-hygiene-public-end-point",
											"item": [
												{
													"name": "init-identity-hygiene-public-end-point",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const utils = eval(globals.connectUtils);\r",
																	"utils.enableOrDisableFeatures();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "address-hygiene",
											"item": [
												{
													"name": "init-address-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const utils = eval(globals.connectUtils);\r",
																	"utils.enableOrDisableFeatures();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												},
												{
													"name": "Realtime > address-hygiene > (PID-6972) - Identity-request with address hygiene enabled",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body);\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    pm.test(\"Validate Input -> required attribute serviceConfig.enableAddressHygiene provided with value 'yes'\", ()=>{\r",
																	"        pm.expect(inputData.serviceConfig.enableAddressHygiene.toUpperCase()).to.equal(\"YES\");\r",
																	"    });\r",
																	"    pm.test(\"Validate Input -> required attribute (fullName, addressLine1, postalCode) are provided \", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.inputRecord.fullName);\r",
																	"        utils.validateIfNonEmpty(inputData.inputRecord.addressLine1);\r",
																	"        utils.validateIfNonEmpty(inputData.inputRecord.postalCode);\r",
																	"    })\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    pm.test(\"Validate Output => addressId, addressLine1 and postalCode comes populated in response\", function(){\r",
																	"        utils.validateIfNonEmpty(outputData.addressId);\r",
																	"        utils.validateIfNonEmpty(outputData.addressLine1);\r",
																	"        utils.validateIfNonEmpty(outputData.postalCode);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"inputRecord.fullName=\" + inputData.inputRecord.fullName + \", \"\r",
																	"        + \"inputRecord.addressLine1=\" + inputData.inputRecord.addressLine1 + \", \"\r",
																	"        + \"inputRecord.postalCode=\" + inputData.inputRecord.postalCode + \", \"\r",
																	"        + \"serviceConfig.enableAddressHygiene=\" + inputData.serviceConfig.enableAddressHygiene\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\" \r",
																	"        + \"addressId=\" + outputData.addressId + \", \"\r",
																	"        + \"addressLine1=\" + outputData.addressLine1 + \", \"\r",
																	"        + \"postalCode=\" + outputData.postalCode + \", \"\r",
																	"    +\"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=============================================================================================================================\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"6972\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > address-hygiene\",\r",
																	"                    tags: \"#RealTime#addressHygiene#addressMatch\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-6972](https://jira.cnvrmedia.net/browse/PID-6972)\n\n&#9724; **NAME:** Identity-request with address hygiene enabled.\n\n&#9724; **DESCRIPTION:** Identity-request's submitted with\n*   serviceConfig.enableAddressHygiene = \"yes\"\n*   Required inputs (addressLine1, postalCode) provided.\n*   Additional inputs for address hygiene (addressLine2, addressLine3) could be provided.\n\n&#9724; **EXPECTED RESULT:**\n*   \"standardizedAddress\" fields comes populated with the address hygiene(addressHygieneOutput) in the output.\n\n&#9724; **INPUT FIELDS:**\n*   \"serviceConfig.enableAddressHygiene\" = \"yes\"\n*   \"addressLine1\"\n*   \"postalCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"addressHygieneOutput\" -> standardizedAddress(addressLine1, postalCode)"
													},
													"response": []
												},
												{
													"name": "Realtime > address-hygiene > (PID-8308) -  Identity-request with address hygiene when addressline1 contains long input for door no",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    pm.test(\"Validate Input -> required attribute (fullName, addressLine1(with long door no), postalCode)  are provided \", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.fullName);\r",
																	"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
																	"        utils.validateIfNonEmpty(inputData.postalCode);\r",
																	"    })\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    pm.test(\"Validate output -> addressId, addressLine1 and postalCode comes populated in identity-output.\", ()=>{\r",
																	"        utils.validateIfNonEmpty(outputData.addressId);\r",
																	"        utils.validateIfNonEmpty(outputData.addressLine1);\r",
																	"        utils.validateIfNonEmpty(outputData.postalCode);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"fullName=\" + inputData.fullName + \", \"\r",
																	"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
																	"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[ \"\r",
																	"      + \"addressId = \"  + outputData.addressId + \", \"\r",
																	"      + \"addressLine1 = \"  + outputData.addressLine1 + \", \"\r",
																	"      + \"postalCode = \"  + outputData.postalCode \r",
																	"    + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=============================================================================================================================\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"8308\",\r",
																	"                    sprint: \"21.02.04\",\r",
																	"                    subject: \"realtime > address-hygiene\",\r",
																	"                    tags: \"#RealTime#addressHygiene#LongDoorNumber\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let addressLine1WithLongDoorNo = \"1133151143911144071170\" + \" \" + utils.getAddressLine1();\r",
																	"    let testerInput = {\"addressLine1\":addressLine1WithLongDoorNo};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"type": "text",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}"
															},
															{
																"key": "accessToken",
																"type": "text",
																"value": "{{accessToken}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8308](https://jira.cnvrmedia.net/browse/PID-8308)\n\n&#9724; **NAME:** Identity-request with address hygiene when addressline1 contains long input for door no.\n\n&#9724; **DESCRIPTION:** Identity-request's submitted with\n*   \"serviceConfig.enableAddressHygiene\" = \"yes\"\n*   Required inputs (fullName, addressLine1, postalCode) provided.\naddressLine1 contains very long value for door number (Example - 1133151143911144071170)\n\n&#9724; **EXPECTED RESULT:**\n*   address-hygiene is not affected by the long door number provided and is performed as expected.\n*   \"addressHygieneOutput\" gets populated with the address-hygiene detail.\n\n&#9724; **INPUT FIELDS:**\n*   \"serviceConfig.enableAddressHygiene\" = \"yes\"\n*   \"addressLine1\"\n*   \"postalCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"addressHygieneOutput\" -> standardizedAddress(addressLine1, postalCode)"
													},
													"response": []
												},
												{
													"name": "terminate-address-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.variables.set(\"folder\",\"address-hygiene\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "name-hygiene",
											"item": [
												{
													"name": "init-name-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const utils = eval(globals.connectUtils);\r",
																	"utils.enableOrDisableFeatures();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												},
												{
													"name": "Realtime > name-hygiene > (PID-7000) - Connect-realtime request -> with name hygiene -> when no name-hygiene-input provided",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"// let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation= () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation =() => {\r",
																	"    pm.test(\"Validate Input -> required attributes (fullName, companyName) are not provided.\", () =>{\r",
																	"        utils.validateIfEmpty(inputData.fullName);\r",
																	"        utils.validateIfEmpty(inputData.companyName);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation= () => {\r",
																	"    pm.test(\"Validate output ->  fields in nameHygieneOutput comes populated as empty.\"); \r",
																	"    utils.validateIfEmpty(outputData.nameHygieneReturnCode);\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = ()=> {\r",
																	"    let inputDataToDisplay = \r",
																	"     \"[\"\r",
																	"      + \"fullName=\" + inputData.fullName + \", \"\r",
																	"      + \"companyName=\" + inputData.companyName\r",
																	"      +\"]\";\r",
																	"      return inputDataToDisplay;\r",
																	"  }\r",
																	"\r",
																	"  this.defineOutputDataToDisplay = ()=> {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"            +\"givenName=\"+ outputData.givenName +\", \"\r",
																	"            +\"middleName=\"+ outputData.middleName +\", \"\r",
																	"            +\"familyName=\"+ outputData.familyName +\", \"\r",
																	"            +\"nameHygieneOutput.returnCode=\"+ outputData.nameHygieneReturnCode +\", \"\r",
																	"        +\"]\";\r",
																	"    return outputDataToDisplay;    \r",
																	"}\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    //Not applicable\r",
																	"};\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"utils.validateAll(this);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=============================================================================================================================\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7000\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > name-hygiene\",\r",
																	"                    tags: \"#RealTime#NameHygiene#checkError\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"addressLine1\":\"\",\"phone1\":\"\", \"fullName\":\"\",\"companyName\":\"\"};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\":\"\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7000](https://jira.cnvrmedia.net/browse/PID-7000)\n\n&#9724; **NAME:** Connect-realtime request -> with name hygiene -> when no name-hygiene-input provided\n\n&#9724; **DESCRIPTION:** Connect-realtime-request is submitted with\n*   \"serviceConfig.enableNameHygiene\" = \"yes\"\n*   Name-hygiene input such as (\"fullName\", \"familyName\") are given empty /not provided in the input.\n\n&#9724; **EXPECTED RESULT:**\n*   Fields in \"nameHygieneOutput\" such as (\"givenName\",\"middleName\",\"familyName\") comes populated empty and flags & default attributes such as(\"gender\", \"profanity\" etc ) comes populated with default values.\n\n&#9724; **INPUT FIELDS:**\n*   \"serviceConfig.enableNameHygiene=\"yes\"\"\n*   \"fullName\" = \"\"\n*   \"familyName\" = \"\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"nameHygieneOutput.givenName\"=\"\"\n*   \"nameHygieneOutput.middleName\"=\"\"\n*   \"nameHygieneOutput.familyName\"=\"\"\n*   \"nameHygieneOutput.profanity\"=\"N\"\n*   \"nameHygieneOutput.gender\"=\"U\""
													},
													"response": []
												},
												{
													"name": "Realtime > name-hygiene > (PID-7001) - Connect-realtime request -> with name hygiene -> general scenario",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody))\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation= () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation =() => {\r",
																	"    pm.test(\"Validate Input -> required attribute (fullName) is provided\", ()=>{\r",
																	"        utils.validateIfNonEmpty(inputData.fullName);\r",
																	"    });\r",
																	"   /* pm.test(\"Validate Input -> extra attributes (countryCode,emailAddress1, familyName, fullName, gender, postalCode, userCorrelationId) are provided.\",()=>{\r",
																	"        utils.validateIfNonEmpty(inputData.countryCode)\r",
																	"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
																	"        utils.validateIfNonEmpty(inputData.familyName); \r",
																	"        utils.validateIfNonEmpty(inputData.gender);\r",
																	"        utils.validateIfNonEmpty(inputData.postalCode);\r",
																	"        utils.validateIfNonEmpty(inputData.userCorrelationId);\r",
																	"    });*/\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    //Not applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation= () => {\r",
																	"    pm.test(\"Validate output -> firstName/givenName, lastName/familyName, middleName comes populated in identity-output\", ()=>{\r",
																	"        utils.validateIfNonEmpty(outputData.givenName);\r",
																	"        utils.validateIfNonEmpty(outputData.middleName);\r",
																	"        utils.validateIfNonEmpty(outputData.familyName);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = ()=> {\r",
																	"  let inputDataToDisplay = \r",
																	"   \"[\"\r",
																	"    + \"fullName=\" + inputData.fullName +\", \"\r",
																	"    +\"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = ()=> {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"            +\"givenName=\" + outputData.givenName +\", \"\r",
																	"            +\"middleName=\" + outputData.middleName +\", \"\r",
																	"            +\"familyName=\"+ outputData.familyName +\", \"\r",
																	"        +\"]\";\r",
																	"    return outputDataToDisplay;    \r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    //Not applicable\r",
																	" };\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=============================================================================================================================\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7001\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > name-hygiene\",\r",
																	"                    tags: \"#RealTime#NameHygiene#positiveCase\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"addressLine1\":\"\",\"phone1\":\"\", \"familyName\":utils.getRandomString()};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7001](https://jira.cnvrmedia.net/browse/PID-7001)\n\n&#9724; **NAME:**  Connect-realtime request -> with name hygiene -> general scenario\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enableNameHygiene \" = \"yes\"\n* \t Name-hygiene input such as ( \"fullName \") provided i.e (first name, middle name, last name separated by space)\n\n&#9724; **EXPECTED RESULT:**\n*    Fields in  \"nameHygieneOutput \" such as ( \"givenName \", \"middleName \", \"lastName \") comes populated with values corresponding to first name, middle name, last name in the input  \"fullName \" and related flags and attributes such as( \"gender \",  \"profanity \" etc ) comes populated with related or default values as applied.\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enableNameHygiene=\"yes\" \"\n*\t\"fullName \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"nameHygieneOutput.givenName \"\n*\t\"nameHygieneOutput.middleName \"\n*\t\"nameHygieneOutput.familyName \"\n*\t\"nameHygieneOutput.profanity \"\n*\t\"nameHygieneOutput.gender \" =\"U\""
													},
													"response": []
												},
												{
													"name": "Realtime > name-hygiene > (PID-7002) - Connect-realtime request -> with name hygiene -> when input fullName contains a profanity-keyword",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation= () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation =() => {\r",
																	"    pm.test(\"Validate Input ->Input fullName contains profanity keyword (\"+pm.variables.get('profanityKeyword')+\")\", \r",
																	"    ()=>{pm.expect(inputData.fullName).to.include(pm.variables.get('profanityKeyword'));\r",
																	"    })\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {       \r",
																	"    // Not applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation= () => {\r",
																	"    pm.test(\"Validate output ->  nameHygieneOutput.profanity  comes populated as 'Y' in response.\", \r",
																	"    ()=>pm.expect(outputData.nameHygieneProfanity).to.equal(\"Y\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = ()=> {\r",
																	"  let inputDataToDisplay = \r",
																	"   \"[\"\r",
																	"    + \"fullName=\" + inputData.fullName \r",
																	"    +\"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineOutputDataToDisplay = ()=> {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"            +\"givenName=\" + outputData.givenName +\", \"\r",
																	"            +\"familyName=\"+ outputData.familyName +\", \"\r",
																	"            +\"nameHygieneOutputProfanity=\" + outputData.nameHygieneProfanity \r",
																	"        +\"]\";\r",
																	"    return outputDataToDisplay;    \r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {  \r",
																	"    // Not Applicable   \r",
																	"};\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"utils.validateAll(this);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=============================================================================================================================\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7002\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > name-hygiene\",\r",
																	"                    tags: \"#RealTime#NameHygiene#profanityCheck\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let profanityKeyword = \"CLIT\";\r",
																	"    pm.variables.set(\"profanityKeyword\", profanityKeyword);\r",
																	"    let fullName = profanityKeyword + \" \" + utils.getValidNames() \r",
																	"    \r",
																	"    let testerInput = {\"addressLine1\":\"\",\"phone1\":\"\",\"fullName\": fullName, \"familyName\": utils.getRandomString()};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7002](https://jira.cnvrmedia.net/browse/PID-7002)\n\n&#9724; **NAME:**  Connect-realtime request -> with name hygiene -> when input fullName contains a profanity-keyword\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enableNameHygiene \" = \"yes\"\n* \t Name-hygiene input such as ( \"fullName \") provided i.e (first name, middle name, last name separated by space) and fullName contains a profanity-keyword, for example - CLIT\n\n&#9724; **EXPECTED RESULT:**\n*\tFields in  \"nameHygieneOutput \" such as ( \"givenName \", \"middleName \", \"lastName \") comes populated with values corresponding to\n        first name, middle name, last name in the input  \"fullName \"\n*\tprofanity-flag comes populated as yes i.e(  \"nameHygieneOutput.profanity \" = \"Y\")\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enableNameHygiene=\"yes\" \"\n*\t\"fullName \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"nameHygieneOutput.givenName \"\n*\t\"nameHygieneOutput.middleName \"\n*\t\"nameHygieneOutput.familyName \"\n*\t\"nameHygieneOutput.profanity \" = \"Y\""
													},
													"response": []
												},
												{
													"name": "Realtime > name-hygiene >(PID-8503) - identity - request with name hygiene - when companyName is given",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"8503\",\r",
																	"                    sprint: \"21.03.01\",\r",
																	"                    subject: \"realtime > name-hygiene\",\r",
																	"                    tags: \"#realtime#nameHygiene#companyName\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//==================================================================================================\r",
																	"\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"let requestType='';\r",
																	"//==============================================================================================\r",
																	"( function initialize (){\r",
																	"        requestType = pm.variables.get(\"requestType\");\r",
																	"        if(typeof(requestType) == 'undefined') {\r",
																	"            requestType = \"COMPANY_NAME_USA\";\r",
																	"        }\r",
																	"})()\r",
																	"\r",
																	"//===================================================================================================\r",
																	"let companyName =  utils.getCompanyName();\r",
																	"if(requestType == \"COMPANY_NAME_USA\") {\r",
																	"    pm.variables.clear();\r",
																	"    pm.variables.set(\"companyName\", companyName);\r",
																	"    pm.variables.set(\"countryCode\", \"USA\");\r",
																	"    pm.variables.set(\"requestType\", 'COMPANY_NAME_USA');\r",
																	"}\r",
																	"if(requestType == \"COMPANY_NAME_CAN\") {\r",
																	"    pm.variables.clear();\r",
																	"    pm.variables.set(\"companyName\", companyName);\r",
																	"    pm.variables.set(\"countryCode\", \"CAN\");\r",
																	"    pm.variables.set(\"requestType\", 'COMPANY_NAME_CAN');\r",
																	"}\r",
																	"if(requestType == \"COMPANY_NAME_GLOBAL\") {\r",
																	"    pm.variables.clear();\r",
																	"    pm.variables.set(\"companyName\", companyName);\r",
																	"    pm.variables.set(\"countryCode\", \"AUS\");\r",
																	"    pm.variables.set(\"requestType\", 'COMPANY_NAME_GLOBAL');\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//==================================================================\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"//=================================================================\r",
																	"let requestType = pm.variables.get(\"requestType\");\r",
																	"//=================================================================\r",
																	"function verifyAllCompanyName() {\r",
																	"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
																	"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
																	"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName'] });\r",
																	"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['companyName'] });\r",
																	"    pm.test(\"(5)- Validate Output > companyName comes populated in the response\", ()=>{\r",
																	"        utils.validateIfNonEmpty(outputData.companyName);\r",
																	"    });\r",
																	"}\r",
																	"if(requestType == \"COMPANY_NAME_USA\") {\r",
																	"    utils.doTestLogging({msg: \"CASE-1 : Identity-request when companyName given (USA)\", type : \"PRINT_MSG\"});\r",
																	"    verifyAllCompanyName();\r",
																	"    (function setNextRequest() {\r",
																	"        pm.variables.clear();\r",
																	"        pm.variables.set(\"requestType\", \"COMPANY_NAME_CAN\");\r",
																	"        postman.setNextRequest(pm.info.requestName);    \r",
																	"    })();\r",
																	"}\r",
																	"if(requestType == \"COMPANY_NAME_CAN\") {\r",
																	"    utils.doTestLogging({msg: \"CASE-2 : Identity-request when companyName given (CAN)\", type : \"PRINT_MSG\"});\r",
																	"    verifyAllCompanyName();\r",
																	"    (function setNextRequest() {\r",
																	"        pm.variables.clear();\r",
																	"        pm.variables.set(\"requestType\", \"COMPANY_NAME_GLOBAL\");\r",
																	"        postman.setNextRequest(pm.info.requestName);    \r",
																	"    })();\r",
																	"}\r",
																	"if(requestType == \"COMPANY_NAME_GLOBAL\") {\r",
																	"    utils.doTestLogging({msg: \"CASE-3 : Identity-request when companyName given (GLOBAL)\", type : \"PRINT_MSG\"});\r",
																	"    verifyAllCompanyName();\r",
																	"    (function setNextRequest() {\r",
																	"        pm.variables.clear();  \r",
																	"    })();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\":\"{{companyName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8503](https://jira.cnvrmedia.net/browse/PID-8503)\n\n&#9724; NAME: identity - request with name hygiene - when companyName is given.\n\n&#9724; DESCRIPTION:Identity-request's is submitted with name hygiene enabled  \ncompanyName  given with a valid value \n\n&#9724; EXPECTED RESULT: name-hygiene processed and companyName gets populated in output (example - nameHygieneOutput.companyName = \"Epsilon\")\n\n&#9724; INPUT FIELDS:\n* companyName\n\n&#9724; OUTPUT FIELDS:\n* nameHygieneOutput.companyName"
													},
													"response": []
												},
												{
													"name": "Realtime > name-hygiene >(PID-8504) - identity - request with name hygiene - when companyName is given invalid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"8504\",\r",
																	"                    sprint: \"21.03.01\",\r",
																	"                    subject: \"realtime > name-hygiene\",\r",
																	"                    tags: \"#realtime#nameHygiene#companyName\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//=======================================================================================================================================//\r",
																	"\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//============================================================================================================================\r",
																	"pm.variables.set(\"emailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
																	"pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//=============================================================================================================================\r",
																	"\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"//===============================================================================================================\r",
																	"(function verifyAll_invalidCountryCode() {\r",
																	"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
																	"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
																	"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName'] });\r",
																	"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['companyName'] });\r",
																	"        pm.test(\"(5)- Validate Output > companyName comes populated empty in the response\", ()=>{\r",
																	"            utils.validateIfEmpty(outputData.companyName);\r",
																	"        });\r",
																	"})();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"companyName\":\"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8504](https://jira.cnvrmedia.net/browse/PID-8504)\n\n&#9724; NAME: identity - request with name hygiene - when companyName is given invalid\n\n&#9724; DESCRIPTION: Identity-request's is submitted with name hygiene enabled  \ncompanyName  given as invalid \n\n&#9724; EXPECTED RESULT: name-hygiene gets processed and companyName comes populate empty in output (i.e nameHygieneOutput.companyName = \"\")\n\n&#9724; INPUT FIELDS:\n* compnyName\n\n&#9724; OUTPUT FIELDS:\n* nameHygieneOutput.companyName = \" \""
													},
													"response": []
												},
												{
													"name": "Realtime > name-hygiene > (PID-8384) > Realtime request with name hygiene for specific full names.",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"let testMetadata = {\r",
																	"    \"pid\": \"8384\",\r",
																	"    \"sprint\": \"21.02.06\",\r",
																	"    \"subject\": \"realtime > name-hygiene\",\r",
																	"    \"automation\": \"Yes\",\r",
																	"    \"tags\": \"#RealTime#NameHygiene#checkError\"\r",
																	"};\r",
																	"\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"fullName\":\"Bill Flowers\"};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();\r",
																	"utils.setMetaData(pm.request, JSON.stringify(testMetadata));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation= () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation =() => {\r",
																	"    pm.test(\"Validate Input -> required attributes (fullName) are provided.\", () =>{\r",
																	"        utils.validateIfNonEmpty(inputData.fullName);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation= () => {\r",
																	"    pm.test(\"Validate output ->  Part of the name should not be treated as professional suffix. \", \r",
																	"    pm.expect(outputData.professionalSuffix).to.equal(\"\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = ()=> {\r",
																	"    let inputDataToDisplay = \r",
																	"     \"[\"\r",
																	"      + \"fullName=\" + inputData.fullName\r",
																	"      +\"]\";\r",
																	"      return inputDataToDisplay;\r",
																	"  }\r",
																	"\r",
																	"  this.defineOutputDataToDisplay = ()=> {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"            +\"givenName=\"+ outputData.givenName +\", \"\r",
																	"            +\"middleName=\"+ outputData.middleName +\", \"\r",
																	"            +\"familyName=\"+ outputData.familyName\r",
																	"        +\"]\";\r",
																	"    return outputDataToDisplay;    \r",
																	"}\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    //Not applicable\r",
																	"};\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"utils.validateAll(this);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"type": "text",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}"
															},
															{
																"key": "accessToken",
																"type": "text",
																"value": "{{accessToken}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA:**-[https://jira.cnvrmedia.net/browse/PID-8384](https://jira.cnvrmedia.net/browse/PID-8384)\n\n&#9724; **NAME:** Realtime request with name hygiene for specific full names.\n\n&#9724; **DESCRIPTION:** Realtime-NameHygiene request for Checking NameParsing with specific fullnames.\n\n&#9724; **EXPECTED RESULT:**\n\n* fullName gets parsed and givenName,middleName,familyName come populated with the parsed value in nameHygiene Output.\n* Part of the name should not be treated as professional suffix.\n\n**INPUT FIELDS:**\n* \"fullName\"\n* \"emailAddress1\"\n\n**OUTPUT FIELDS:**\n* \"individualId\"\n* \"proffessionalSuffix\""
													},
													"response": []
												},
												{
													"name": "terminate-name-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.variables.set(\"folder\",\"name-hygiene\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "email-hygiene",
											"item": [
												{
													"name": "init-email-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const utils = eval(globals.connectUtils);\r",
																	"utils.enableOrDisableFeatures();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												},
												{
													"name": "Realtime > email-hygiene > (PID-6971) - Identity request with email hygiene enabled.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let inputServiceConfig = JSON.parse(pm.request.body).serviceConfig;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    pm.test(\"Validate Input -> additional attributes (countryCode, familyName, fullName, gender, userCorrelationId) are provided.\", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.countryCode);\r",
																	"        utils.validateIfNonEmpty(inputData.familyName);\r",
																	"        utils.validateIfNonEmpty(inputData.fullName);\r",
																	"        utils.validateIfNonEmpty(inputData.gender);\r",
																	"        utils.validateIfNonEmpty(inputData.userCorrelationId);\r",
																	"    });\r",
																	"    pm.test(\"Validate Input -> required attribute valid emailAddress1 is provided and (enableEmailHygiene) is set to (yes).\", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
																	"        utils.validateIfNonEmpty(inputServiceConfig.enableEmailHygiene);\r",
																	"        pm.expect((inputServiceConfig.enableEmailHygiene).toLowerCase()).to.equal(\"yes\");\r",
																	"    })\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    pm.test(\"Validate output ->  (emailHygieneOutput.cleansedEmailAddress1.returnCode) comes populated as 0 i.e. valid.\",\r",
																	"        pm.expect(outputData.emailHygiene1ReturnCode).to.equal(\"0\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"emailHygieneOutput.cleansedEmailAddress1.cleansedEmailAddress=\" + outputData.emailAddress1 + \", \"\r",
																	"        + \"emailHygieneOutput.cleansedEmailAddress1.returnCode=\" + outputData.emailHygiene1ReturnCode\r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//==============================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"6971\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > email-hygiene\",\r",
																	"                    tags: \"#RealTime#EmailHygiene#equalityCheck\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"familyName\":utils.getRandomString()};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-6971](https://jira.cnvrmedia.net/browse/PID-6971)\n\n&#9724; **NAME:**  Identity request with email hygiene enabled\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enableEmailHygiene \" = \"yes\"\n* \t \"emailAddress1 \" is provided with an email address i.e. genuine and in the valid email id format.\n\n&#9724; **EXPECTED RESULT:**\n*\t\"emailHygieneOutput \"-> \"cleansedEmailAddress1 \"-> \"cleansedEmailAddress \" comes populated with input  \"emailAddress1 \".\n*\t\"emailHygieneOutput \"-> \"cleansedEmailAddress1 \"-> \"returnCode \" comes populated as 0 (i.e. valid emil id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enableEmailHygiene=\"yes\" \"\n*\t\"emailAddress1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"emailHygieneOutput.cleansedEmailAddress1.cleansedEmailAddress \"\n*\t\"emailHygieneOutput.cleansedEmailAddress1.returnCode \" = 0"
													},
													"response": []
												},
												{
													"name": "Realtime > email-hygiene > (PID-6999) - Connect-realtime request -> with email hygiene -> when input email id is  not genuine",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    /*pm.test(\"Validate Input -> extra attributes (countryCode, familyName, fullName, gender, userCorrelationId) are provided.\", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.countryCode);\r",
																	"        utils.validateIfNonEmpty(inputData.familyName);\r",
																	"        utils.validateIfNonEmpty(inputData.fullName);\r",
																	"        utils.validateIfNonEmpty(inputData.gender);\r",
																	"        utils.validateIfNonEmpty(inputData.userCorrelationId);\r",
																	"    });*/\r",
																	"    pm.test(\"Validate Input -> invalid value given for required attribute emailAddress1 - It does not contain @ symbol\", ()=>{\r",
																	"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
																	"        pm.expect(inputData.emailAddress1).to.not.include(\"@\");\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable.\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    pm.test(\"Validate Output > invalid email standardized to upperCase and  field (emailHygieneOutput.cleansedEmailAddress1.returnCode)comes populated as 1 i.e invalid\", ()=>{\r",
																	"        pm.expect(outputData.emailAddress1).to.equal(inputData.emailAddress1.toUpperCase());\r",
																	"        pm.expect(outputData.emailHygiene1ReturnCode).to.equal(\"1\");\r",
																	"    })\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"emailAddress1=\" + inputData.emailAddress1 \r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"emailHygieneOutput.cleansedEmailAddress1.cleansedEmailAddress=\" + outputData.emailAddress1 + \", \"\r",
																	"        + \"emailHygieneOutput.cleansedEmailAddress1.returnCode=\" + outputData.emailHygiene1ReturnCode\r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//==============================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"6999\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > email-hygiene\",\r",
																	"                    tags: \"#RealTime#EmailHygiene#invalidEmailAddress\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"familyName\":utils.getRandomString(), \"emailAddress1\": utils.getRandomString() + \".\" + utils.getRandomString() };\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-6999](https://jira.cnvrmedia.net/browse/PID-6999)\n\n&#9724; **NAME:**  Connect-realtime request -> with email hygiene -> when input email id is not genuine\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enableEmailHygiene \" = \"yes\"\n* \t \"emailAddress1 \" given  an email address i.e. not genuine or not in a valid email id format\n*       For example\n\t*\tdoes not contain '@'\n\t*\tcontains more than one '@@'\n\t*\tcontains @ in the beginning\n\t*\tdoesn't end with a domain address  \n\t*\tstarts with a domain address before @\n\t\n&#9724; **EXPECTED RESULT:**\n*\t \"emailHygieneOutput \"-> \"cleansedEmailAddress1 \"-> \"cleansedEmailAddress \" comes populated with input  \"emailAddress1 \".\n*\t \"emailHygieneOutput \"-> \"cleansedEmailAddress1 \"-> \"returnCode \" comes populated as 1 (i.e. invalid emil id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enableEmailHygiene=\"yes\" \"\n*\t\"emailAddress1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"emailHygieneOutput.cleansedEmailAddress1.cleansedEmailAddress \"\n*\t\"emailHygieneOutput.cleansedEmailAddress1.returnCode \" = 1"
													},
													"response": []
												},
												{
													"name": "terminate-email-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.variables.set(\"folder\", \"email-hygiene\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "phone-hygiene",
											"item": [
												{
													"name": "init-phone-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const utils = eval(globals.connectUtils);\r",
																	"utils.enableOrDisableFeatures();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												},
												{
													"name": "Realtime >phone-hygiene > (PID-7004) - Phone hygiene with a valid phone no",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"if(outputData.individualId == undefined || outputData.individualId == ''){\r",
																	"        pm.test(\"Input phone no(\"+ outputData.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
																	"            utils.validateIfNonEmpty(outputData.individualId);\r",
																	"        });\r",
																	"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
																	"        return;\r",
																	"    }\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    pm.test(\"Validate Input -> required attributes (phone1) is provided - it contains valid value.\", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.phone1);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    pm.test(\"Validate output -> (phoneHygieneOutput.cleansedPhone1.returnCode) comes populated as 0 i.e valid\", ()=>{\r",
																	"        pm.expect(outputData.phoneHygieneReturncode1).to.equal(\"0\");\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"phone1=\" + inputData.phone1 + \", \"\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"phone1=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone1.returnCode=\" + outputData.phoneHygieneReturncode1\r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"\r",
																	"utils.validateAll(this);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7004\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > phone-hygiene\",\r",
																	"                    tags: \"#RealTime#PhoneHygiene#positiveCase\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"phone1\":utils.getValidPhoneNo()};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7004](https://jira.cnvrmedia.net/browse/PID-7004)\n\n&#9724; **NAME:**  Phone hygiene with a valid phone no\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enablePhoneHygiene \" = \"yes\"\n* \t \"phone1\" given with a valid phone no.\n\t\n&#9724; **EXPECTED RESULT:**\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"cleansedPhone \" comes populated with input  \"phone1\".\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"returnCode \" comes populated as 0 (i.e. valid phone id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enablePhoneHygiene=\"yes\" \"\n*\t\"phone1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"phoneHygieneOutput.cleansedPhone1.cleansedPhone \"\n*\t\"phoneHygieneOutput.cleansedPhone1.returnCode \" = 0"
													},
													"response": []
												},
												{
													"name": "Realtime > phone-hygiene > (PID-7006) - Phone hygiene with phone number having incorrect number of digits",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    pm.test(\"Validate Input -> required attribute (phone1) is provided.\", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.phone1);\r",
																	"    });\r",
																	"    pm.test(\"Validate Input -> Invalid value given for (phone1)- it contains incorrect number of digits.\", ()=>{\r",
																	"        pm.expect(inputData.phone1.length !== 10 && inputData.phone1.length !== 11).to.be.true;\r",
																	"    }); \r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    pm.test(\"Validate output -> (phoneHygieneOutput.cleansedPhone1.returnCode) comes populated as 1 i.e invalid.\", ()=>{\r",
																	"        pm.expect(outputData.phoneHygieneReturncode1).to.equal(\"1\");\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"phone1=\" + inputData.phone1 \r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"phone1=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone1.returnCode=\" + outputData.phoneHygieneReturncode1\r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7006\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > phone-hygiene\",\r",
																	"                    tags: \"#RealTime#PhoneHygiene#incorrectDigits\"\r",
																	"                })\r",
																	"    });\r",
																	"})();//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let phoneWithIncorrectNoOfDigits =  _.random(100000000, 999999999)+\"\";\r",
																	"    let testerInput = {\"phone1\":phoneWithIncorrectNoOfDigits,\"addressLine1\":\"\",\"familyName\":utils.getRandomString()};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}",
																"type": "text"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7006](https://jira.cnvrmedia.net/browse/PID-7006)\n\n&#9724; **NAME:**  Phone hygiene with phone number having incorrect number of digits\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enablePhoneHygiene \" = \"yes\"\n* \t phone1 given with a  phone number having incorrect number of digits.(Example - 123)\n\t\n&#9724; **EXPECTED RESULT:**\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"cleansedPhone \" comes populated with input  \"phone1\".\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"returnCode \" comes populated as 1 (i.e. invalid phone id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enablePhoneHygiene=\"yes\" \"\n*\t\"phone1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"phoneHygieneOutput.cleansedPhone1.cleansedPhone \"\n*\t\"phoneHygieneOutput.cleansedPhone1.returnCode \" = 1"
													},
													"response": []
												},
												{
													"name": "Realtime > phone-hygiene > (PID-7113) - Identity-request for phone hygiene with an invalid input for phone",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    pm.test(\"Validate Input -> required attribute (phone1) is provided. phone1 is given invalid.\", () => {\r",
																	"        utils.validateIfNonEmpty(inputData.phone1);\r",
																	"    });\r",
																	"    \r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    pm.test(\"Validate output -> (phoneHygieneOutput.cleansedPhone1.returnCode) comes populated as 1 i.e invalid\", () => {\r",
																	"        pm.expect(outputData.phoneHygieneReturncode1).to.equal(\"1\");\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"phone1=\" + inputData.phone1\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"phone1=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone1.returnCode=\" + outputData.phoneHygieneReturncode1\r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7113\",\r",
																	"                    sprint: \"Q2-2020\",\r",
																	"                    subject: \"realtime > phone-hygiene\",\r",
																	"                    tags: \"#RealTime#Identity#phoneHygnEnabled\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"phone1\":utils.getInvalidPhoneNo()};\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"type": "text",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}"
															},
															{
																"key": "accessToken",
																"type": "text",
																"value": "{{accessToken}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7113](https://jira.cnvrmedia.net/browse/PID-7113)\n\n&#9724; **NAME:**  Identity-request for phone hygiene with an invalid input for phone\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enablePhoneHygiene \" = \"yes\"\n* \t Identity-request's made with phone1 with an invalid phone no , for instance \"000123\"\n\t\n&#9724; **EXPECTED RESULT:**\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"cleansedPhone \" comes populated with input  \"phone1\".\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"returnCode \" comes populated as 1 (i.e. invalid phone id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enablePhoneHygiene=\"yes\" \"\n*\t\"phone1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"phoneHygieneOutput.cleansedPhone1.cleansedPhone \"\n*\t\"phoneHygieneOutput.cleansedPhone1.returnCode \" = 1"
													},
													"response": []
												},
												{
													"name": "Realtime > phone-hygiene > (PID-7778) - Phone hygiene with phone number having 2-9 in first digit and same digit in second and 3rd position",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    let msg = \"Validate Input ->phone1, phone2, phone3 are provided.\";\r",
																	"    pm.test(msg, () => {\r",
																	"        utils.validateIfNonEmpty(inputData.phone1);\r",
																	"        utils.validateIfNonEmpty(inputData.phone2);\r",
																	"        utils.validateIfNonEmpty(inputData.phone3);\r",
																	"    });\r",
																	"    msg = \"Validate Input -> phone1, phone2, phone3 are given invalid - contains 1st digit in range(2,9) and 2nd and 3rd digits are same\";\r",
																	"    pm.test(msg);\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    let msg = \"Validate output -> (phoneHygieneOutput.cleansedPhone1.returnCode), (phoneHygieneOutput.cleansedPhone2.returnCode), (phoneHygieneOutput.cleansedPhone3.returnCode) comes populated as 1 i.e invalid.\";\r",
																	"    pm.test(msg, () => {\r",
																	"        pm.expect(outputData.phoneHygieneReturncode1).to.equal(\"1\");\r",
																	"        pm.expect(outputData.phoneHygieneReturncode2).to.equal(\"1\");\r",
																	"        pm.expect(outputData.phoneHygieneReturncode3).to.equal(\"1\");\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"phone1=\" + inputData.phone1 + \" ,\"\r",
																	"        + \"phone1=\" + inputData.phone2 + \" ,\"\r",
																	"        + \"phone1=\" + inputData.phone3 + \" ,\"\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"phone1=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone1.returnCode=\" + outputData.phoneHygieneReturncode1 + \", \"\r",
																	"        + \"phone2=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone2.returnCode=\" + outputData.phoneHygieneReturncode2 + \", \"\r",
																	"        + \"phone3=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone3.returnCode=\" + outputData.phoneHygieneReturncode3 + \", \"\r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7778\",\r",
																	"                    sprint: \"Q4-2020\",\r",
																	"                    subject: \"realtime > phone-hygiene\",\r",
																	"                    tags: \"#RealTime#PhoneHygiene#handlingRegEx\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"\r",
																	"this.getPhoneNoRegExp1 = () => {\r",
																	"    // 1st digit range is 2 thru 9 and\r",
																	"    // 2nd and 3rd digits are the same (i.e. '00', '11', '22', ...)\r",
																	"    let sameDigit = _.random(0, 9);\r",
																	"    let phone = \"\" + _.random(2, 9) + sameDigit + sameDigit + _.random(1000000, 9999999);\r",
																	"    return phone;\r",
																	"}\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = { \"phone1\": this.getPhoneNoRegExp1(), \"phone2\": this.getPhoneNoRegExp1(), \"phone3\": this.getPhoneNoRegExp1() };\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Cookie",
																"value": "SRVID=c1652112daa31b64"
															},
															{
																"key": "x-api-key",
																"type": "text",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"\",\n        \"emailAddress1\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"\",\n        \"gender\": \"\",\n        \"phone1\": \"{{phone1}}\",\n        \"phone2\": \"{{phone2}}\",\n        \"phone3\": \"{{phone3}}\",\n        \"postalCode\": \"\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7778](https://jira.cnvrmedia.net/browse/PID-7778)\n\n&#9724; **NAME:**  Phone hygiene with phone number having 2-9 in first digit and same digit in second and 3rd position \n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enablePhoneHygiene \" = \"yes\"\n* \t phone1 given with a  phone number having 2-9 as first digit and same digit for 2nd and 3rd position (example - 800-451-6789, 233-980-789, 566-456789 etc)\n\t\n&#9724; **EXPECTED RESULT:**\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"cleansedPhone \" comes populated with input  \"phone1\".\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"returnCode \" comes populated as 1 (i.e. invalid phone id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enablePhoneHygiene=\"yes\" \"\n*\t\"phone1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"phoneHygieneOutput.cleansedPhone1.cleansedPhone \"\n*\t\"phoneHygieneOutput.cleansedPhone1.returnCode \" = 1"
													},
													"response": []
												},
												{
													"name": "Realtime > phone-hygiene > (PID-7779) - Phone hygiene with phone number having  555 in it's 4th,5th,6th position",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    \r",
																	"    msg = \"Validate Input -> phone1 is in invalid format that contains correct 1st, 2nd and 3rd digits and 4th, 5th and 6th digits are 5\";\r",
																	"    pm.test(msg, () =>{\r",
																	"        utils.validateIfNonEmpty(inputData.phone1);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    let msg = \"Validate output -> (phoneHygieneOutput.cleansedPhone1.returnCode) comes populated as 1 i.e invalid\";\r",
																	"    pm.test(msg, () => {\r",
																	"        pm.expect(outputData.phoneHygieneReturncode1).to.equal(\"1\");\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"phone1=\" + inputData.phone1 + \" ,\"\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"phone1=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone1.returnCode=\" + outputData.phoneHygieneReturncode1 \r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7779\",\r",
																	"                    sprint: \"Q4-2020\",\r",
																	"                    subject: \"realtime > phone-hygiene\",\r",
																	"                    tags: \"#RealTime#PhoneHygiene#handlingRegEx\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"\r",
																	"this.getPhoneNoRegExp2 = () =>{\r",
																	"    // 1st, 2nd and 3rd digits are correct\r",
																	"    // 4th, 5th and 6th digits are 5\r",
																	"    return \"214\" + \"-555-\" + _.random(1000,9999);\r",
																	"}\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    let testerInput = {\"phone1\": this.getPhoneNoRegExp2()};\r",
																	"    console.log(testerInput);\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Cookie",
																"value": "SRVID=c1652112daa31b64; SRVID=c1652112daa31b64"
															},
															{
																"key": "x-api-key",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"\",\n        \"emailAddress1\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"\",\n        \"gender\": \"\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7779](https://jira.cnvrmedia.net/browse/PID-7779)\n\n&#9724; **NAME:**  Phone hygiene with phone number having  555 in it's 4th,5th,6th position \n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enablePhoneHygiene \" = \"yes\"\n* \t phone1 given with a  phone number having  555 in it's 4th,5th,6th position (example - 214-555-6789)\n\t\n&#9724; **EXPECTED RESULT:**\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"cleansedPhone \" comes populated with input  \"phone1\".\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"returnCode \" comes populated as 1 (i.e. invalid phone id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enablePhoneHygiene=\"yes\" \"\n*\t\"phone1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"phoneHygieneOutput.cleansedPhone1.cleansedPhone \"\n*\t\"phoneHygieneOutput.cleansedPhone1.returnCode \" = 1"
													},
													"response": []
												},
												{
													"name": "Realtime > phone-hygiene > (PID-7780) - Phone hygiene with phone number where 4-5 position digits are 95 and 6th position contain 0,8 or 9",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"//DEFINITION=================================================================================================================================================//\r",
																	"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
																	"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
																	"\r",
																	"this.defineResponseValidation = () => {\r",
																	"    utils.validateOKResponse();\r",
																	"}\r",
																	"\r",
																	"this.defineRequestValidation = () => {\r",
																	"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_PUBLIC_ENDPOINT\"));\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataValidation = () => {\r",
																	"    let msg = \"Validate Input -> phone1, phone2, phone3 are provided.\";\r",
																	"    pm.test(msg, () => {\r",
																	"        utils.validateIfNonEmpty(inputData.phone1);\r",
																	"        utils.validateIfNonEmpty(inputData.phone2);\r",
																	"        utils.validateIfNonEmpty(inputData.phone3);\r",
																	"    });\r",
																	"    msg = \"Check Input ->phone1, phone2, phone3 are given invalid. \"\r",
																	"        + \"All phone contains correct 1st, 2nd and 3rd digits and 4th digit is 9 and 5th digit is 5\" \r",
																	"        + \"and 6th digit range is 0, 8 and 9\";\r",
																	"    pm.test(msg, () =>{\r",
																	"        \r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineExistingDataValidation = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"this.defineOutputDataValidation = () => {\r",
																	"    let msg = \"Validate output -> (phoneHygieneOutput.cleansedPhone1.returnCode), (phoneHygieneOutput.cleansedPhone2.returnCode), (phoneHygieneOutput.cleansedPhone3.returnCode) comes populated as 1 i.e invalid\";\r",
																	"    pm.test(msg, () => {\r",
																	"        pm.expect(outputData.phoneHygieneReturncode1).to.equal(\"1\");\r",
																	"        pm.expect(outputData.phoneHygieneReturncode2).to.equal(\"1\");\r",
																	"        pm.expect(outputData.phoneHygieneReturncode3).to.equal(\"1\");\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"this.defineInputDataToDisplay = () => {\r",
																	"    let inputDataToDisplay =\r",
																	"        \"[\"\r",
																	"        + \"phone1=\" + inputData.phone1 + \" ,\"\r",
																	"        + \"phone1=\" + inputData.phone2 + \" ,\"\r",
																	"        + \"phone1=\" + inputData.phone3 + \" ,\"\r",
																	"        + \"]\";\r",
																	"    return inputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"this.defineOutputDataToDisplay = () => {\r",
																	"    let outputDataToDisplay = \"[\"\r",
																	"        + \"phone1=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone1.returnCode=\" + outputData.phoneHygieneReturncode1 + \", \"\r",
																	"        + \"phone2=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone2.returnCode=\" + outputData.phoneHygieneReturncode2 + \", \"\r",
																	"        + \"phone3=\" + outputData.phone1 + \", \"\r",
																	"        + \"phoneHygieneOutput.cleansedPhone3.returnCode=\" + outputData.phoneHygieneReturncode3 + \", \"\r",
																	"        + \"]\";\r",
																	"    return outputDataToDisplay;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"this.defineExistingDataToDisplay = () => {\r",
																	"    // Not Applicable\r",
																	"};\r",
																	"\r",
																	"\r",
																	"//EXECUTION==============================================================================================================================================//\r",
																	"\r",
																	"utils.validateAll(this);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//=======================================================================================================================================//\r",
																	"(function setMetadata() {\r",
																	"    pm.request.headers.add({ \r",
																	"        \"key\": \"testInfo\",\r",
																	"         \"value\": JSON.stringify({\r",
																	"                    pid: \"7780\",\r",
																	"                    sprint: \"Q4-2020\",\r",
																	"                    subject: \"realtime > phone-hygiene\",\r",
																	"                    tags: \"#RealTime#PhoneHygiene#handlingRegEx\"\r",
																	"                })\r",
																	"    });\r",
																	"})();\r",
																	"//INITIALIZATION==============================================================================================================================================//\r",
																	"const utils = eval(globals.connectUtils);\r",
																	"\r",
																	"//DEFINATION=================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest = () => {\r",
																	"    // 1st, 2nd and 3rd digits are correct\r",
																	"    // 4th digit is 9 and 5th digit is 5 and 6th digit range is 0, 8 and 9\r",
																	"    let phone1 = _.random(100, 999) + \"-950-\" + _.random(1000, 9999);\r",
																	"    let phone2 = _.random(100, 999) + \"-958-\" + _.random(1000, 9999);\r",
																	"    let phone3 = _.random(100, 999) + \"-959-\" + _.random(1000, 9999);\r",
																	"    let testerInput = {\r",
																	"        \"phone1\": phone1,\r",
																	"        \"phone2\": phone2, \"phone3\": phone3\r",
																	"    };\r",
																	"\r",
																	"    console.log(testerInput);\r",
																	"    utils.setRandomDataForRequest(testerInput);\r",
																	"}\r",
																	"\r",
																	"//EXECUTION================================================================================================================================================//\r",
																	"this.generateDataForCurrentRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "clientCode",
																"value": "{{CCODE_PUBLIC_ENDPOINT}}"
															},
															{
																"key": "accessToken",
																"value": "{{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Cookie",
																"value": "SRVID=c1652112daa31b64; SRVID=c1652112daa31b64; SRVID=c1652112daa31b64"
															},
															{
																"key": "x-api-key",
																"value": "{{XAPIKEY_PUBLIC_ENDPOINT}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"\",\n        \"emailAddress1\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"\",\n        \"gender\": \"\",\n        \"phone1\": \"{{phone1}}\",\n        \"phone2\": \"{{phone2}}\",\n        \"phone3\": \"{{phone3}}\",\n        \"postalCode\": \"\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
														},
														"url": {
															"raw": "{{serverPublicEndpoint}}/v2/connect/realtime/service",
															"host": [
																"{{serverPublicEndpoint}}"
															],
															"path": [
																"v2",
																"connect",
																"realtime",
																"service"
															]
														},
														"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7780](https://jira.cnvrmedia.net/browse/PID-7780)\n\n&#9724; **NAME:**  Phone hygiene with phone number where 4-5 position digits are 95 and 6th position contain 0,8 or 9\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime-request's submitted with\n*\t \"serviceConfig.enablePhoneHygiene \" = \"yes\"\n* \t phone1 given with a  phone number where 4-5 position digits are 95 and 6th position contain 0,8 or 9 (example - 214-958-6789, 214-950-6789, 214-959-6789)\n\n&#9724; **EXPECTED RESULT:**\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"cleansedPhone \" comes populated with input  \"phone1\".\n*\t \"phoneHygieneOutput \"-> \"cleansedPhone1 \"-> \"returnCode \" comes populated as 1 (i.e. invalid phone id format)\n\n&#9724; **INPUT FIELDS:**\n*\t\"serviceConfig.enablePhoneHygiene=\"yes\" \"\n*\t\"phone1 \"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"phoneHygieneOutput.cleansedPhone1.cleansedPhone \"\n*\t\"phoneHygieneOutput.cleansedPhone1.returnCode \" = 1"
													},
													"response": []
												},
												{
													"name": "terminate-phone-hygiene",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.variables.set(\"folder\", \"phone-hygiene\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "terminate-identity-hygiene-public-end-point",
											"item": [
												{
													"name": "terminate-identity-hygiene-public-end-point",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{server}}/usart/ping",
															"host": [
																"{{server}}"
															],
															"path": [
																"usart",
																"ping"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set('folder', 'identity-hygiene-public-end-point');"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "init-identity-trustedIndividualId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > identity > trustedIndividualId > (PID-8355) -Identity-request with  address detail + trustedIndividualId when no match found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8355\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"realtime > identity-trustedIndividualId\",\r",
													"                    tags: \"#USRealTime#TrustedId#greaterindividualId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=============================================================================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let trustedIndividualId =  _.random(0, 9999999999999).toString();\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"trustedIndividualId\":trustedIndividualId};\r",
													"    let randomData = utils.setRandomDataForRequest(testerInput);\r",
													"    };\r",
													"\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> fullName, addressLine1,postalCode,trustedIndividualId are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.trustedIndividualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  IndividualId comes same as trustedIndividualId given in input.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(inputData.trustedIndividualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \" \r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \" \r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"trustedIndividualId=\" + inputData.trustedIndividualId\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"fullName=\" + outputData.fullName + \", \" \r",
													"     + \"addressLine1=\" + outputData.addressLine1 +\", \" \r",
													"     + \"postalCode=\" + outputData.postalCode +\", \"\r",
													"     + \"individualId=\" + outputData.individualId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n    \"userCorrelationId\": \"\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8355](https://jira.cnvrmedia.net/browse/PID-8355)\n\n&#9724; **NAME:** Identity-request with address detail(fullName + addressLine1 + postalCode) and trustedIndividualId when no match found.\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's submitted with Identity-request with address detail(fullName + addressLine1 + postalCode) and trustedIndividualId\n\n&#9724; **EXPECTED RESULT:**\n*    Identity record gets generated with given detail.\n*    The individualId comes populated same as trustedIndividualId given in input.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"addressLine1\"\n*    \"postalCode\"\n*    \"trustedIndividualId\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > trustedIndividualId > (PID-8356) -Identity-search with   address detail + trustedIndividualId  when multiple match found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8356\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"realtime > identity-trustedIndividualId\",\r",
													"                    tags: \"#USRealTime#TrustedId#greaterindividualId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=============================================================================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\",\"trustedIdMatchRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"postalCode\":\"\",\"phone1\":\"\"}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for trustedId match record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\"}; \r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address match record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\"};\r",
													"    let randomData = utils.setRandomDataForRequest(testerInput);\r",
													"    };\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"            \"fullName\": preRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"\r",
													"    };\r",
													"    existingRecords.trustedIdMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"trustedIndividualId\",existingRecords.trustedIdMatchRecord.individualId);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"addressLine1\": preRequest2Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": preRequest2Data.inputRecord.postalCode,\r",
													"            \"fullName\": preRequest2Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"addressLine1\",existingRecords.addressMatchRecord.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",existingRecords.addressMatchRecord.postalCode);\r",
													"    pm.variables.set(\"fullName\",existingRecords.addressMatchRecord.fullName);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputRecord = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputRecord = JSON.parse(responseBody);\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, addressLine1,postalCode,trustedIndividualId) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputRecord.fullName)\r",
													"         utils.validateIfNonEmpty(inputRecord.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputRecord.postalCode);\r",
													"         utils.validateIfNonEmpty(inputRecord.trustedIndividualId);\r",
													"         \r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {    \r",
													"    pm.test(\"Validate existing ->  Record exists with address-match.\",() =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.addressLine1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.postalCode);\r",
													"        });\r",
													"        pm.test(\"Validate existing ->  Record exists with trustedId-match\",() =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.trustedIdMatchRecord.fullName)\r",
													"        utils.validateIfNonEmpty(existingRecords.trustedIdMatchRecord.emailAddress1)\r",
													"        pm.expect(inputRecord.trustedIndividualId).to.equal(existingRecords.trustedIdMatchRecord.individualId)\r",
													"        });   \r",
													"\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> Smaller individual id cames populated in the response.\",()=>{\r",
													"     if(existingRecords.addressMatchRecord.individualId>existingRecords.trustedIdMatchRecord.individualId){\r",
													"         pm.expect(outputData.individualId).to.equal(existingRecords.trustedIdMatchRecord.individualId)\r",
													"     }\r",
													"     else{\r",
													"          pm.expect(outputData.individualId).to.equal(existingRecords.addressMatchRecord.individualId)\r",
													"     }\r",
													"    });\r",
													"    pm.test(\"Validate output ->  ConsolidatedId comes populated with remaining individual ids.\",()=>{\r",
													"        if(existingRecords.addressMatchRecord.individualId>existingRecords.trustedIdMatchRecord.individualId){\r",
													"         pm.expect(outputRecord.identityOutput.consolidations.consolidatedIds[0]).to.equal(existingRecords.addressMatchRecord.individualId)\r",
													"     }\r",
													"     else{\r",
													"          pm.expect(outputRecord.identityOutput.consolidations.consolidatedIds[0]).to.equal(existingRecords.trustedIdMatchRecord.individualId)\r",
													"     }\r",
													"    }); \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputRecord.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputRecord.emailAddress1 +\", \"\r",
													"    + \"postalCode=\" + inputRecord.postalCode +\", \"\r",
													"    + \"trustedIndividualId=\" + inputRecord.trustedIndividualId\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\" + outputData.addressLine1 +\", \"\r",
													"            +\"postalCode=\" + outputData.postalCode +\", \"\r",
													"            +\"consolidatedIds=\" + outputRecord.identityOutput.consolidations.consolidatedIds[0]\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let trustedIdMatchDataRecord = existingRecords.trustedIdMatchRecord;\r",
													"    let existingDataToDisplay = \"address-match identity exists: [\"\r",
													"            +\"individualId=\" + addressMatchDataRecord.individualId + \", \" \r",
													"            +\"fullName=\" + addressMatchDataRecord.fullName + \", \" \r",
													"            +\"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \" \r",
													"            + \"postalCode=\" + addressMatchDataRecord.postalCode\r",
													"            +\"]\"+ \" ||| trustedId-match identity exists: [\"\r",
													"            +\"individualId=\" + trustedIdMatchDataRecord.individualId + \", \" \r",
													"            +\"fullName=\" + trustedIdMatchDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + trustedIdMatchDataRecord.emailAddress1 +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n    \"userCorrelationId\": \"\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8356](https://jira.cnvrmedia.net/browse/PID-8356)\n\n&#9724; **NAME:** Identity-search with   address detail + trustedIndividualId  when multiple match found. \n\n&#9724; **DESCRIPTION:** \n*    Identity-request's submitted with  address detail(i.e fullName, addressLine1, postalCode) + trustedIndividualId\n&#9724; \n\n**PRECONDITION:**\n*    Matching identity-record exists with \ngiven address i.e (fullName + addressLine1 +postalCode) \n*    Matching identity-record exists with individualId same as given trustedIndividualId \n\n&#9724; **EXPECTED RESULT:**\n*    shortest matching individualId gets returned in the output.\n*    Other individualId(s) comes populated with consolidatedIds in the output.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"addressLine1\"\n*    \"postalCode\"\n*    \"trustedIndividualId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"consolidatedIds\""
									},
									"response": []
								},
								{
									"name": "terminate-identity-trustedIndividualId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"identity-trustedIndividualId\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "identity-digitalkeys",
							"item": [
								{
									"name": "init-identity-digitalkeys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > identity > digitalkeys > (PID-7419) - Identity-request with (fullName + address + postalCode) and digitalKey1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_DIGITALKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> fullName, addressLine1,postalCode,digitalKeys1 are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  IndividualId comes non empty in response.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.not.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \" \r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \" \r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"digitalKeys1=\" + inputData.digitalKeys1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"fullName=\" + outputData.fullName + \", \" \r",
													"     + \"addressLine1=\" + outputData.addressLine1 +\", \" \r",
													"     + \"postalCode=\" + outputData.postalCode +\", \"\r",
													"     + \"individualId=\" + outputData.individualId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7419\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > identity > digitalKeys\",\r",
													"                    tags: \"#RealTime#NameHygiene#digitalKeyValidation\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//==============================================================================================================================\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let digitalKeys1 = utils.getRandomNumberBetween(10, 999999999);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"    pm.variables.set(\"digitalKeys1\",digitalKeys1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_DIGITALKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_DIGITALKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n     \"digitalKeys1\":\"{{digitalKeys1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7419](https://jira.cnvrmedia.net/browse/PID-7419)\n\n&#9724; **NAME:** Identity-request with (fullName + address + postalCode) and digitalKey1\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with (fullName + address + postalCode) and digitalKey1\n\n&#9724; **EXPECTED RESULT:**\n*    New identity record gets generated with given detail.\n*    The individualId of the newly generated record gets returned in the output\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"addressLine1\"\n*    \"postalCode\"\n*    \"digitalKeys1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > digitalkeys > (PID-7420) - Identity-request with (fullName + address + postalCode) and all digital keys (digitalKey1 ..10)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_DIGITALKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> fullName, addressLine1,postalCode,digitalKeys1 to digitalKeys10 are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys1);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys2);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys3);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys4);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys5);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys6);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys7);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys8);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys9);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKeys10);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  newly generated individual id comes populated in response.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.not.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.fullName + \", \" \r",
													"    + \"emailAddress1=\" + inputData.addressLine1 +\", \" \r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"digitalKeys1=\" + inputData.digitalKeys1 +\", \"\r",
													"    + \"digitalKeys2=\" + inputData.digitalKeys2 +\", \"\r",
													"    + \"digitalKeys3=\" + inputData.digitalKeys3 +\", \"\r",
													"    + \"digitalKeys4=\" + inputData.digitalKeys4 +\", \"\r",
													"    + \"digitalKeys5=\" + inputData.digitalKeys5 +\", \"\r",
													"    + \"digitalKeys6=\" + inputData.digitalKeys6 +\", \"\r",
													"    + \"digitalKeys7=\" + inputData.digitalKeys7 +\", \"\r",
													"    + \"digitalKeys8=\" + inputData.digitalKeys8 +\", \"\r",
													"    + \"digitalKeys9=\" + inputData.digitalKeys9 +\", \"\r",
													"    + \"digitalKeys10=\" + inputData.digitalKeys10 \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"countryCode=\" + outputData.fullName + \", \" \r",
													"     + \"addressLine1=\" + outputData.addressLine1 +\", \" \r",
													"     + \"postalCode=\" + outputData.postalCode +\", \"\r",
													"     + \"individualId=\" + outputData.individualId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7420\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > identity > digitalKeys\",\r",
													"                    tags: \"#RealTime#NameHygiene#withAllDigitalKey\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let digitalKeys1 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys2 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys3 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys4 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys5 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys6 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys7 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys8 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys9 = utils.getRandomNumberBetween(10, 999999999);\r",
													"let digitalKeys10 = utils.getRandomNumberBetween(10, 999999999);\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"    pm.variables.set(\"digitalKeys1\",digitalKeys1);\r",
													"    pm.variables.set(\"digitalKeys2\",digitalKeys2);\r",
													"    pm.variables.set(\"digitalKeys3\",digitalKeys3);\r",
													"    pm.variables.set(\"digitalKeys4\",digitalKeys4);\r",
													"    pm.variables.set(\"digitalKeys5\",digitalKeys5);\r",
													"    pm.variables.set(\"digitalKeys6\",digitalKeys6);\r",
													"    pm.variables.set(\"digitalKeys7\",digitalKeys7);\r",
													"    pm.variables.set(\"digitalKeys8\",digitalKeys8);\r",
													"    pm.variables.set(\"digitalKeys9\",digitalKeys9);\r",
													"    pm.variables.set(\"digitalKeys10\",digitalKeys10);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_DIGITALKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_DIGITALKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"digitalKeys1\":\"{{digitalKeys1}}\",\r\n    \"digitalKeys2\":\"{{digitalKeys2}}\",\r\n    \"digitalKeys3\":\"{{digitalKeys3}}\",\r\n    \"digitalKeys4\":\"{{digitalKeys4}}\",\r\n    \"digitalKeys5\":\"{{digitalKeys5}}\",\r\n    \"digitalKeys6\":\"{{digitalKeys6}}\",\r\n    \"digitalKeys7\":\"{{digitalKeys7}}\",\r\n    \"digitalKeys8\":\"{{digitalKeys8}}\",\r\n    \"digitalKeys9\":\"{{digitalKeys9}}\",\r\n    \"digitalKeys10\":\"{{digitalKeys10}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7420](https://jira.cnvrmedia.net/browse/PID-7420)\n\n&#9724; **NAME:** Identity-request with (fullName + address + postalCode) and all digital keys (digitalKey1 ..10)\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with (fullName + address + postalCode) and all digital keys (digitalKey1 ..10)\n\n&#9724; **EXPECTED RESULT:**\n*    An identity record gets generated with given detail.\n*    The individualId of the newly generated record gets returned in the output.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"addressLine1\"\n*    \"postalCode\"\n*    \"digitalKey1\"\n*    \"digitalKey2\"\n*    \"digitalKey3\"\n*    \"digitalKey4\"\n*    \"digitalKey5\"\n*    \"digitalKey6\"\n*    \"digitalKey7\"\n*    \"digitalKey8\"\n*    \"digitalKey9\"\n*    \"digitalKey10\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > digitalkeys > (PID-7422) - Identity-search with (fullName + email + phone +digitalKey) when multiple (fullName+email) and (fullName+phone) match found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputRecord = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputRecord = JSON.parse(responseBody);\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"if(existingRecords.phoneMatchRecord.individualId == undefined || existingRecords.phoneMatchRecord.individualId == ''){\r",
													"        pm.test(\"Input phone no(\"+ existingRecords.phoneMatchRecord.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(existingRecords.phoneMatchRecord.individualId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"    }\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_DIGITALKEYS_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, digitalKeys1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputRecord.fullName)\r",
													"         utils.validateIfNonEmpty(inputRecord.digitalKeys1);\r",
													"         \r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {       \r",
													"\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> Smaller individual id cames populated in the response.\",()=>{\r",
													"     if(existingRecords.emailMatchRecord.individualId>existingRecords.phoneMatchRecord.individualId){\r",
													"         pm.expect(outputData.individualId).to.equal(existingRecords.phoneMatchRecord.individualId)\r",
													"     }\r",
													"     else{\r",
													"          pm.expect(outputData.individualId).to.equal(existingRecords.emailMatchRecord.individualId)\r",
													"     }\r",
													"    });\r",
													"    pm.test(\"Validate output ->  ConsolidatedId comes populated with remaining individual ids.\",()=>{\r",
													"        if(existingRecords.emailMatchRecord.individualId>existingRecords.phoneMatchRecord.individualId){\r",
													"         pm.expect(outputData.consolidatedIds[0]).to.equal(existingRecords.emailMatchRecord.individualId)\r",
													"     }\r",
													"     else{\r",
													"          pm.expect(outputData.consolidatedIds[0]).to.equal(existingRecords.phoneMatchRecord.individualId)\r",
													"     }\r",
													"     \r",
													"    }); \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputRecord.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputRecord.emailAddress1 +\", \"\r",
													"    + \"digitalKeys1=\" + inputRecord.digitalKeys1 +\", \"\r",
													"    + \"phone1=\" + inputRecord.phone1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"emailAddress1=\" + outputData.emailAddress1 +\", \"\r",
													"            +\"consolidatedIds=\" + outputData.consolidatedIds[0] + \",\"\r",
													"            +\"phone1\" + outputData.phone1 \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let emailMatchDataRecord = existingRecords.emailMatchRecord;\r",
													"    let phoneMatchDataRecord = existingRecords.phoneMatchRecord;\r",
													"    let existingDataToDisplay = \"email-match identity exists: [\"\r",
													"            +\"emailMatchedindividualId=\" + emailMatchDataRecord.individualId + \", \" \r",
													"            +\"fullName=\" + emailMatchDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + emailMatchDataRecord.emailAddress1\r",
													"            +\"]\"+ \" ||| phone-match identity exists: [\"\r",
													"            +\"phoneMatchedindividualId=\" + phoneMatchDataRecord.individualId + \", \" \r",
													"            +\"fullName=\" + emailMatchDataRecord.fullName + \", \" \r",
													"            + \"phone1=\" + phoneMatchDataRecord.phone1 +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7422\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > identity > digitalKeys\",\r",
													"                    tags: \"#RealTime#Identity#priorityCheckForDigitalKey\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=============================================================================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"phoneMatchRecord\":\"\",\"emailMatchRecord\":\"\"};\r",
													"let fullName = utils.getFullName();\r",
													"let emailAddress1 = utils.getEmail();\r",
													"let phone1 = utils.getValidPhone1();\r",
													"let digitalKeys1 = utils.getRandomNumberBetween(10, 999999999);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"emailAddress1\":emailAddress1,\"phone1\":\"\",\"postalCode\":\"\",\"fullName\":fullName,\"filterKeys1\":\"\",\"filterKeys2\":\"\"}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_DIGITALKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_DIGITALKEYS_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email match record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullName,\"addressLine1\":\"\",\"emailAddress1\":emailAddress1,\"phone1\":phone1,\"postalCode\":\"\",\"filterKeys1\":\"\",\"filterKeys2\":\"\"};\r",
													"    let randomData = utils.setRandomDataForRequest(testerInput);\r",
													"    pm.variables.set(\"digitalKeys1\",digitalKeys1);\r",
													"    }\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1\r",
													"    };\r",
													"    existingRecords.emailMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    // pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    // pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"emailAddress1\":\"\",\"phone1\":phone1,\"postalCode\":\"\",\"fullName\":fullName,\"filterKeys1\":\"\",\"filterKeys2\":\"\"}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_DIGITALKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_DIGITALKEYS_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for phone match record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"phone1\": outputData.phone1\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"        //pm.variables.set(\"phone1\", outputData.phone1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_DIGITALKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_DIGITALKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"\",\r\n    \"digitalKeys1\":\"{{digitalKeys1}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7422](https://jira.cnvrmedia.net/browse/PID-7422)\n\n&#9724; **NAME:** Identity-search with (fullName + email + phone + digitalKey) when multiple (fullName+email) and (fullName+phone) match found\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with (fullName + email + phone + digitalKey)\n\n&#9724; **PRECONDITION:**\n*    Multiple identity-records exists with (fullName+phone) and (fullName+email)\n\n&#9724; **EXPECTED RESULT:**\n*    \"consolidationIds\" fields comes populated with all the individualId in the output.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"addressLine1\"\n*    \"postalCode\"\n*    \"digitalKey1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"consolidationIds\""
									},
									"response": []
								},
								{
									"name": "terminate-identity-digitalkeys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"identity-digitalkeys\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "identity-rules-template",
							"item": [
								{
									"name": "init-identity-rules-template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7952) -  Identity-request with EML-rule-template enabled when (fullName + email) provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes(fullName, emailAddress1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of the new record comes populated with identity-output.\", ()=>{\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"emailAddress1=\" + outputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7952\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#RulesTemplate#EMLRulesTemplate#FullNameEmailProvided\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"inputRecord\": {\n    \"addressLine1\": \"\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"familyName\": \"\",\n    \"fullName\": \"{{fullName}}\",\n    \"gender\": \"\",\n    \"phone1\": \"\",\n    \"postalCode\": \"\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n  },\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableIdentity\": \"Yes\",\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableGlobalSuppression\": \"no\",\n    \"enableOccupancyScore\": \"no\",\n    \"enableTspAppend\": \"no\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7952](https://jira.cnvrmedia.net/browse/PID-7952)\n\n&#9724; **NAME:** Identity-request with EML-rule-template enabled when (fullName + email) provided.\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's submitted with EML-rule-template set for the client profile \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the EML_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t EML_RULE_TEMPLATE in rules.csv. By default the EML_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    individualId gets populated in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"emailAddress\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7953) -  Identity-request with EML-rule-template enabled when cross-match identity found for (givenName + familyName)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7953\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#RulesTemplate#EMLRulesTemplate#FirstNameLastNameCrossMatched\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"matchRecord\" : \"\"};\r",
													"let crossMatchName = utils.getFirstNameLastNameCrosssMatchedNames();\r",
													"let preRequest1Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\": crossMatchName.name, \"addressLine1\":\"\",\"postalCode\":\"\", \"phone1\":\"\", \"gender\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for cross name match record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\": crossMatchName.crossMatchName};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let fullName = preRequest1Data.inputRecord.fullName.split(\" \");\r",
													"    let givenName = fullName[0];\r",
													"    let familyName = fullName[2];\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"givenName\": givenName,\r",
													"            \"familyName\": familyName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1\r",
													"    };\r",
													"    existingRecords.matchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"    pm.variables.set(\"userCorrelationId\", outputData.userCorrelationId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Identity-match exist containing fullName that cross-match with input fullName\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord.individualId);\r",
													"\r",
													"        let fullName = inputData.fullName.split(\" \");\r",
													"        let givenName = fullName[0];\r",
													"        let familyName = fullName[2];\r",
													"        pm.expect(givenName).to.equal(existingRecords.matchRecord.familyName);\r",
													"        pm.expect(familyName).to.equal(existingRecords.matchRecord.givenName);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  existing individualId comes populated in the output.\", () => {\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.matchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.matchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + existingDataRecord.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"inputRecord\": {\n    \"addressLine1\": \"\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"familyName\": \"\",\n    \"fullName\": \"{{fullName}}\",\n    \"gender\": \"\",\n    \"phone1\": \"\",\n    \"postalCode\": \"\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n  },\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableIdentity\": \"Yes\",\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableGlobalSuppression\": \"no\",\n    \"enableOccupancyScore\": \"no\",\n    \"enableTspAppend\": \"no\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7953](https://jira.cnvrmedia.net/browse/PID-7953)\n\n&#9724; **NAME:** Identity-request with EML-rule-template enabled when cross-match identity found for (givenName + familyName)\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with\n     EML rule template set for the client profile (i.e table- aim_client_name_rules) as below\n        ATTRIBUTE_TYPE = EML\n        NAME_RULE_TEMPLATE = FIRST_NAME\n*\t fullName provided in the input that contains  (givenName + middleName + familyName) \n\n&#9724; **PRECONDITION**\n*    Identity-record exists that is cross-match with the input givenName and familyName.\n*\t Example  - \n\t input fullName (i.e givenName + middleName + familyName) = John kr Smith\n\n\t existing givenName = Smith\n\n\t existing familyName = John\n\n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the EML_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t EML_RULE_TEMPLATE in rules.csv. By default the EML_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The match is considered successful and individualId and householdId of the existing identity gets populated in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"emailAddress\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7954) - Identity-request with EML-rule-template enabled when identity found with a different 'lastName'",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Identity-match exist - having only different last name - from input data\", () => {\r",
													"        let lastName = inputData.fullName.split(\" \")[1];\r",
													"        pm.expect(outputData.fullName).to.not.include(lastName);\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  existing individualId comes populated in the output.\", () => {\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.matchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.matchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + existingDataRecord.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7954\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#RulesTemplate#EMLRulesTemplate#onlyLastNameChanged\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"matchRecord\" : \"\"};\r",
													"let firstName = utils.getRandomString();\r",
													"let fullName = firstName +  \" \" + utils.getRandomString();\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\": fullName, \"addressLine1\":\"\",\"postalCode\":\"\",\"phone1\":\"\"};\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for firstName-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1\r",
													"    };\r",
													"    existingRecords.matchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.givenName + \" \" + utils.getRandomString());\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"    pm.variables.set(\"countryCode\", outputData.countryCode);\r",
													"    pm.variables.set(\"userCorrelationId\", outputData.userCorrelationId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"\",\n        \"phone1\": \"\",\n        \"postalCode\": \"\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7954](https://jira.cnvrmedia.net/browse/PID-7954)\n\n&#9724; **NAME:** Identity-request with EML-rule-template enabled when identity found with a different 'lastName'\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with\n     EML-rule-template set for the client profile i.e in table aim_client_name_rules ,ATTRIBUTE_TYPE = EML & NAME_RULE_TEMPLATE = FIRST_NAME\n*\t fullName provided in the input that contains  (givenName + familyName) with the same givenName as input but with a different familyName from existing identity.\n\n&#9724; **PRECONDITION**\n*    Record exists with given input emailAddress1 and fullName but with different lastName (i.e. familyName) in the fullName.\n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the EML_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t EML_RULE_TEMPLATE in rules.csv. By default the EML_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The match is considered successful ignoring the difference in lastName (i.e familyName).\n*    individualId of the matching identity gets populated in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"emailAddress\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7956) -  Identity-request with EML-rule-template enabled when normalized match found for the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate input -> required attributes (fullName,emailAddress1) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Identity-match exists for same (fullName + emailAddress1 ).\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord.emailAddress1);\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  existing individualId comes populated in the output.\", () => {\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.matchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.matchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + existingDataRecord.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7956\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#RulesTemplate#EMLRulesTemplate#normalizedMatchForName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = { \"matchRecord\": \"\" };\r",
													"let normalizedNames = utils.getRandomNormalizedNames();\r",
													"let lastName = utils.getRandomString();\r",
													"let fullName = normalizedNames.name + \" \" + lastName;\r",
													"let fullNameWithNormalizedName = normalizedNames.normalizedName + \" \" + lastName;\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullName,\"addressLine1\":\"\",\"postalCode\":\"\",\"phone1\":\"\"};\r",
													"    let requestDetail = {\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for normalized name match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithNormalizedName};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"        \"fullName\": outputData.fullName,\r",
													"        \"individualId\": outputData.individualId,\r",
													"        \"emailAddress1\": outputData.emailAddress1,\r",
													"    };\r",
													"    existingRecords.matchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"    pm.variables.set(\"userCorrelationId\", outputData.userCorrelationId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"\",\n        \"phone1\": \"\",\n        \"postalCode\": \"\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7956](https://jira.cnvrmedia.net/browse/PID-7956)\n\n&#9724; **NAME:** Identity-request with EML-rule-template enabled when normalized match found for the name.\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with\n     EML-rule-template set for the client profile i.e in table aim_client_name_rules ,ATTRIBUTE_TYPE = EML & NAME_RULE_TEMPLATE = FIRST_NAME\n*\t fullName and emailAddress1 given in input.\n\n&#9724; **PRECONDITION**\n*\tNormalized-match-identity record exists with given fullName .\n*\tExample: for input fullName CHRISTOPHER PAUL normalized name is : CHRIS PAUL\n*\tIdentity exists with input emailAddress1 and different fullName. \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the EML_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t EML_RULE_TEMPLATE in rules.csv. By default the EML_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n\n&#9724; **EXPECTED RESULT:**\n*    The normalized match is considered successful. The existing identity detail gets returned in the output with existing individualId\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"emailAddress\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7957) -  Identity-request with PHONE-rule-template enabled when identity-match found for given fullName + phone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"if(outputData.individualId == undefined || outputData.individualId == ''){\r",
													"        pm.test(\"Input phone no(\"+ outputData.phone1 +\") is not in threshold & new individualId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(outputData.individualId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"    }\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate input -> required attributes (fullName, phone1) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.phone1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Identity-record exists with given (fullName, phone1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  existing individualId comes populated in the output.\", () => {\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.phoneMatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"phone1=\" + inputData.phone1 \r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"phone1=\" + outputData.phone1\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.phoneMatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"        + \"phone1=\" + existingDataRecord.phone1 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7957\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#RulesTemplate#PHNRulesTemplate#fullNameAndPhone\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"phoneMatchRecord\" : \"\"};\r",
													"let phone1 = utils.getValidPhone1();\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"addressLine1\": \"\",\"postalCode\":\"\",\"emailAddress1\":\"\",\"phone1\":utils.getValidPhone1()};\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email match record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"phone1\": outputData.phone1\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"phone1\", outputData.phone1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7957](https://jira.cnvrmedia.net/browse/PID-7957)\n\n&#9724; **NAME:** Identity-request with PHONE-rule-template enabled when identity-match found for given  fullName  +  phone \n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with\n     PHN-rule-template set for the client profile i.e in table aim_client_name_rules ,ATTRIBUTE_TYPE = PHN & NAME_RULE_TEMPLATE = FIRST_NAME\n*\t fullName and phone1 given in input.\n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the PHN_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t PHN_RULE_TEMPLATE in rules.csv. By default the PHN_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules \n\n&#9724; **EXPECTED RESULT:**\n*    The existing identity detail gets returned in the output with existing  individualId .\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"phone1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7958) - Identity-request with PHONE-rule-template enabled when identity found with a different 'lastName'",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate input -> required attributes (fullName, phone1) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.phone1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  identity-record exists for (different fullName, same phone1)\", () => {\r",
													"        pm.expect(existingRecords.phoneMatchRecord.fullName).to.not.equal(inputData.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  existing individualId, householdId comes populated in the output.\", () => {\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.phoneMatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"phone1=\" + inputData.phone1 \r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"phone1=\" + outputData.phone1\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.phoneMatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"        + \"phone1=\" + existingDataRecord.phone1 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7958\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#RulesTemplate#PHNRulesTemplate#newNameAndSamePhone\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = { \"phoneMatchRecord\": \"\" };\r",
													"let firstName = utils.getRandomString();\r",
													"let fullName = firstName +  \" \" + utils.getRandomString();\r",
													"\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = { \"fullName\": fullName,\"addressLine1\": \"\", \"postalCode\": \"\", \"emailAddress1\": \"\", \"phone1\": utils.getValidPhoneNo() };\r",
													"    let requestDetail = {\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for first name match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"        \"fullName\": outputData.fullName,\r",
													"        \"individualId\": outputData.individualId,\r",
													"        \"householdId\": outputData.householdId,\r",
													"        \"phone1\": outputData.phone1\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.givenName + \" \" + utils.getRandomString());\r",
													"    pm.variables.set(\"phone1\", outputData.phone1);\r",
													"    pm.variables.set(\"countryCode\", outputData.countryCode);\r",
													"    pm.variables.set(\"userCorrelationId\", outputData.userCorrelationId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7958](https://jira.cnvrmedia.net/browse/PID-7958)\n\n&#9724; **NAME:** Identity-request with PHONE-rule-template enabled when phone-match identity found but with different  fullName  \n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with\n     PHN-rule-template set for the client profile i.e in table aim_client_name_rules ,ATTRIBUTE_TYPE = PHN & NAME_RULE_TEMPLATE = FIRST_NAME\n*\t fullName and phone1 given in input.\n\n&#9724; **PRECONDITION**\n*\tNormalized-match-identity record exists with given fullName .\n*\tExample: for input fullName CHRISTOPHER PAUL normalized name is : CHRIS PAUL\n*\tIdentity exists with input emailAddress1 and different fullName. \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the PHN_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t PHN_RULE_TEMPLATE in rules.csv. By default the PHN_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The existing identity detail gets returned in the output with existing  individualId .\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"phone1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7017) > Identity-request when rule 'ALLOW_MIDDLE_MATCH_BLANK' is enabled.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {   \r",
													"        pm.test(\"Validate Existing -> identity-match exist containing fullName with no middle name in it.\",()=>{\r",
													"         pm.expect(existingRecords.noMiddleNameMatchRecord.middleName).to.equal(\"\")});\r",
													"          \r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of the existing record(blank middle name) comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.noMiddleNameMatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let noMiddleNameMatchDataRecord = existingRecords.noMiddleNameMatchRecord;\r",
													"    let existingDataToDisplay = \"blank-middleName-match identity exists: [\"\r",
													"            +\"individualId=\" + noMiddleNameMatchDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + noMiddleNameMatchDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + noMiddleNameMatchDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7017\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#AllowMiddleNameMatchBlank\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let firstName = utils.getRandomString();\r",
													"let MiddleName = utils.getRandomString();\r",
													"let lastName = utils.getRandomString();\r",
													"let fullName = firstName+\" \"+MiddleName+\" \"+lastName;\r",
													"let fullNameWithoutMiddleName = firstName+\" \"+lastName;\r",
													"let preRequest1Data ={};\r",
													"let existingRecords = {\"noMiddleNameMatchRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithoutMiddleName,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for blank-middlename match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullName,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"middleName\": outputData.middleName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.noMiddleNameMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.noMiddleNameMatchRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7017](https://jira.cnvrmedia.net/browse/PID-7017)\n\n&#9724; **NAME:**  Identity-request when rule 'ALLOW_MIDDLE_MATCH_BLANK' is enabled.  \n\n&#9724; **DESCRIPTION:** \n*    Identity-request is made with fullName containing (giveName + middleName + familyName)lName and emailAddress1 given in input.\n\n&#9724; **PRECONDITION**\n*\tIdentity-match exists with givenName and familyName , but no middleName.\n*\tClient profile is enabled for ALLOW_MIDDLE_MATCH_BLANK. i.e  ALLOW_MIDDLE_MATCH_BLANK = \"Y\"\n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The matching is successful even if the existing-identity doesn't have the middleName and the matching-identity  gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName (first name + middle name + last name)\".\n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7019) > Identity-request when rule 'ALLOW_MIDDLE_CONFLICT' is enabled.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => { \r",
													"    pm.test(\"Identity-match exists with givenName, familyName , but with a different middleName.\",()=>{\r",
													"        let middleName = inputData.fullName.split(\" \")[1];\r",
													"        pm.expect(existingRecords.middleNameConflictMatchRecord.middleName).to.not.equal(middleName)});    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> individualId of the existing record(with different middleName) comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.middleNameConflictMatchRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let middleNamConflicteMatchDataRecord = existingRecords.middleNameConflictMatchRecord;\r",
													"    let existingDataToDisplay =  \"conflict-middleName-match identity exists:[\"\r",
													"            +\"individualId=\" + middleNamConflicteMatchDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + middleNamConflicteMatchDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + middleNamConflicteMatchDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7019\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#AllowMiddleNameMatchConflict\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"let conflictMiddleNames = utils.getConflictMiddleNames();\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = {\"middleNameConflictMatchRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":conflictMiddleNames.name,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"         \"msg\":\"Generating data for conflict-middlename match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":conflictMiddleNames.conflictMiddleName,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let fullName = preRequest1Data.inputRecord.fullName.split(\" \");\r",
													"    let middleName = fullName[1];\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"middleName\": middleName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.middleNameConflictMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.middleNameConflictMatchRecord.emailAddress1);\r",
													"   \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7019](https://jira.cnvrmedia.net/browse/PID-7019)\n\n&#9724; **NAME:**  Identity-request when 'ALLOW_MIDDLE_CONFLICT' is enabled  \n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with  fullName  i.e combination of  givenName ,  middleName ,  familyName \n\n&#9724; **PRECONDITION**\n*\tIdentity-match exists with  givenName ,  familyName  , but with a different  middleName .\n*\tThe rule  ALLOW_MIDDLE_CONFLICT  is enabled. i.e  ALLOW_MIDDLE_CONFLICT = \"true\" \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The matching is successful even if the existing-identity doesn't have the  middleName  and the matching-identity  gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName (first name + middle name + last name)\"\n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7024) > Identity-request when rule \"ALLOW_SUFF_MATCH_CONFLICT\" is enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {      \r",
													"    pm.test(\"Identity-match exists with givenName, familyName , but with a different suffix.\",()=>{\r",
													"         pm.expect(existingRecords.suffixConflictRecord.generationalSuffix).to.not.equal(outputData.generationalSuffix)}); \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"individualId of the existing record(with different suffix) comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.suffixConflictRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let suffixConflictRecordDataRecord = existingRecords.suffixConflictRecord;\r",
													"    let existingDataToDisplay =  \"suffix-conflict-match identity exists:[\"\r",
													"            +\"individualId=\" + suffixConflictRecordDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + suffixConflictRecordDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + suffixConflictRecordDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7024\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#AllowSuffixConflictRule\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let fullName = utils.getValidFullNames();\r",
													"let fullNameWithSuffix = fullName + \" \"+\"Sr.\";\r",
													"let fullNameWithDiffSuffix = fullName + \" \"+\"Jr.\";\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = {\"suffixConflictRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithSuffix,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for suffix-conflict match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithDiffSuffix,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName + \" \"+ outputData.generationalSuffix,\r",
													"            \"generationalSuffix\": outputData.generationalSuffix,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.suffixConflictRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.suffixConflictRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7024](https://jira.cnvrmedia.net/browse/PID-7024)\n\n&#9724; **NAME:**  Identity-request when rule \"ALLOW_SUFF_MATCH_CONFLICT\"  enabled \n\n&#9724; **DESCRIPTION:** \n*    fullName is given with a suffix along with  givenName ,  middleName  and  fullName .\n*\t **Example:** - Ben Joe Stokes Jr\n\n&#9724; **PRECONDITION**\n*\tfullName -match identity record exists but with a different suffix.\n*\tRule  ALLOW_SUFF_MATCH_CONFLICT  is enabled i.e  ALLOW_SUFF_MATCH_CONFLICT= true\"  \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    Match is considered successful ignoring the difference in suffix. The existing identity is returned in the response. i.e  individualId  of matching identity record is returned in the output.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName (first name + middle name + last name + suffix)\"\n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template >  (PID-7028) > Identity-request with fuzzy-match for fullName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {      \r",
													"     pm.test(\"Identity-match exists with same fullName but with one edit(fuzzy name).\",()=>{\r",
													"         pm.expect(inputData.fullName).to.equal(utils.getFuzzyName(existingRecords.fuzzyRecord.fullName))});\r",
													"    \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of the existing record(record with fuzzyname) comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.fuzzyRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let fuzzyRecordDataRecord = existingRecords.fuzzyRecord;\r",
													"    let existingDataToDisplay = \"fuzzy-match identity exists: [\"\r",
													"            +\"individualId=\" + fuzzyRecordDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + fuzzyRecordDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + fuzzyRecordDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7028\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#allowFuzzyMatch\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let fullName = utils.getFullName();\r",
													"let fullNameWithOneEdit = utils.getFuzzyName(fullName);\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = {\"fuzzyRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullName,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput); \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for fuzzy match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithOneEdit,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": preRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.fuzzyRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.fuzzyRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7028](https://jira.cnvrmedia.net/browse/PID-7028)\n\n&#9724; **NAME:**  Identity-request with fuzzy-match for fullName\n\n&#9724; **DESCRIPTION:** \n*    Identity-request is made with  fullName  in the input.\n\n&#9724; **PRECONDITION**\n*\tIdentity-match exists with fuzzy-match for  fullName .\n*\tThe rules  USE_GEN_FUZZY_FIR_NM= true  and  ALLOW_FUZZY_MATCH = true  are enabled.\n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    Fuzzy-match identity-record gets returned in the response, i.e  individualId  of existing record is returned in the output.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\" \n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7030) > Identity-request when synonym of first name found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => { \r",
													"    pm.test(\"Identity-match exists with synonym of given name.\",()=>{\r",
													"         pm.expect(existingRecords.synonymNameRecord.fullName).to.not.equal(outputData.fullName)});\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of the existing record(record with synonymname) comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.synonymNameRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let synonymNameDataRecord = existingRecords.synonymNameRecord;\r",
													"    let existingDataToDisplay = \"firstName-synonym-match identity exists: [\"\r",
													"            +\"individualId=\" + synonymNameDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + synonymNameDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + synonymNameDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7030\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#synonymName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let synonymName = utils.getRandomNormalizedNames();\r",
													"let fullName = synonymName.name;\r",
													"let synonymOfFullName = synonymName.normalizedName;\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = {\"synonymNameRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullName,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for firstName-synonym match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":synonymOfFullName,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.synonymNameRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.synonymNameRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7030](https://jira.cnvrmedia.net/browse/PID-7030)\n\n&#9724; **NAME:**  Identity-request when synonym of first name found\n\n&#9724; **DESCRIPTION:** \n*    Identity-request is made with  fullName  which is synonym of existing record's  fullName .\n\n&#9724; **PRECONDITION**\n*\tIdentity-record exists with a  givenName  i.e synonym of  firstName  given in the input  fullName .\n*\tThe rules  USE_NMZ_FIRST_NMS  is enabled  i.e  USE_NMZ_FIRST_NMS =true .\n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    Synonym-match identity-record gets returned in the response, i.e individualId of existing record is returned in the output.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\" \n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7032) > Identity-request when hyphenated-surname match found.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7032\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#hyphanetedSurnameMatch\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let surname = utils.getRandomString();\r",
													"let fullNames = utils.getHyphenatedFullName();\r",
													"let fullNameWithSurname = fullNames.name;\r",
													"let fullNameWithHyphenatedSurname = fullNames.hypenatedName;\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = {\"hyphenatedSurnameRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithHyphenatedSurname,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for hyphenated-surname match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithSurname,\"emailAddress1\":preRequest1Data.emailAddress1,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.hyphenatedSurnameRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.hyphenatedSurnameRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {       \r",
													"    pm.test(\"Validate Existing -> identity-match exist containing fullName that has hyphen in surname.\",()=>{\r",
													"        pm.expect(existingRecords.hyphenatedSurnameRecord.fullName).to.include(\"-\");\r",
													"        });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of the existing record(having hyphenatedSurname comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.hyphenatedSurnameRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let hyphenatedSurnameDataRecord = existingRecords.hyphenatedSurnameRecord;\r",
													"    let existingDataToDisplay = \"hyphenated-surname-match identity exists: [\"\r",
													"            +\"individualId=\" + hyphenatedSurnameDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + hyphenatedSurnameDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + hyphenatedSurnameDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7032](https://jira.cnvrmedia.net/browse/PID-7032)\n\n&#9724; **NAME:**  Identity-request when hyphenated-surname match found\n\n&#9724; **DESCRIPTION:** \n*    Identity-request is made with  fullName  containing a  firstName  and  surname .\n\n&#9724; **PRECONDITION**\n*\tIdentity-record exists with a  givenName  i.e synonym of  firstName  given in the input  fullName .\n\n\tExample -\n\tinput fullName - John Shai Campbell Holder.\n\texisting fullName - John Shai Campbell-Holder\n*\tThe rule  USE_HYPHENATED_SURNMS  is enabled i.e   USE_HYPHENATED_SURNMS = \"true\" \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    This is considered as a successful match of full name although the surName is with a hyphen. The matching identity-record gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\" \n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7034) - Identity-request when cross-match identity found for input givenName and surName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {     \r",
													"    pm.test(\"Validate Existing -> fullName-cross-match-identity record exists with givenName and surName that cross-match with input.\",\r",
													"    ()=>{\r",
													"        let fullName = inputData.fullName.split(\" \");\r",
													"        let givenName = fullName[0];\r",
													"        let familyName = fullName[2];\r",
													"        pm.expect(givenName).to.equal(existingRecords.crossMatchRecord.familyName);\r",
													"        pm.expect(familyName).to.equal(existingRecords.crossMatchRecord.givenName);\r",
													"\r",
													"    });  \r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of cross-match identity record comes populated identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.crossMatchRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let crossMatchRecordDataRecord = existingRecords.crossMatchRecord;\r",
													"    let existingDataToDisplay = \"cross-match identity exists: [\"\r",
													"            +\"individualId=\" + crossMatchRecordDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + crossMatchRecordDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + crossMatchRecordDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7034\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#crossMatchFirstNameSurname\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let crossMatchedNames = utils.getFirstNameLastNameCrosssMatchedNames();\r",
													"let fullName = crossMatchedNames.name;\r",
													"let fullNameWithCrossMatch = crossMatchedNames.crossMatchName;\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = { \"crossMatchRecord\": \"\" };\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = { \"fullName\": fullName, \"addressLine1\": \"\", \"phone1\": \"\", \"postalCode\": \"\" };\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail = {\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for cross-name identity match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = { \"fullName\": fullNameWithCrossMatch,  \"addressLine1\": \"\", \"phone1\": \"\", \"postalCode\": \"\" };\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let fullName = preRequest1Data.inputRecord.fullName.split(\" \");\r",
													"    let givenName = fullName[0];\r",
													"    let familyName = fullName[2];\r",
													"    let existingRecord = {\r",
													"        \"fullName\": outputData.fullName,\r",
													"        \"givenName\": givenName,\r",
													"        \"familyName\": familyName,\r",
													"        \"individualId\": outputData.individualId,\r",
													"        \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.crossMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.crossMatchRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7034](https://jira.cnvrmedia.net/browse/PID-7034)\n\n&#9724; **NAME:**  Identity-request when cross-match identity found for input first name and sur name\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with  fullName  i.e (first name + middle name + sur name).\n\n&#9724; **PRECONDITION**\n*\tIdentity-record exists with  givenName (i.e first name) and  familyName (i.e sur name) that cross-match with first name and sur name  in input 'fullName'.\n\t\n\tExample -\n\tinput  fullName  / (first + middle + last) name : John kr Smith         \n\texisting  givenName : Smith          \n\texisting  middleName : Kr    \n\texisting  familyName : John\n*\tThe rule  CROSS_MATCH_FIR_SURNM  is enabled i.e  CROSS_MATCH_FIR_SURNM = \"Y\"  \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The match is considered successful and the (first name + sur name)-corss-match identity record gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\" \n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*\t\"givenName\" \n*\t\"middleName\" \n*\t\"familyName\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7036) - Identity-request when cross-match identity found for input givenName and middleName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {   \r",
													"    pm.test(\"Validate Existing -> identity-match exist containing fullName that cross-match(of givenName and middleName) with input fullName\",()=>{\r",
													"        let fullName = inputData.fullName.split(\" \");\r",
													"        let givenName = fullName[0];\r",
													"        let middleName = fullName[1];\r",
													"        pm.expect(givenName).to.equal(existingRecords.crossMatchRecord.middleName);\r",
													"        pm.expect(middleName).to.equal(existingRecords.crossMatchRecord.givenName);\r",
													"\r",
													"        });      \r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of the existing record(cross matched record of givenName and middleName) comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.crossMatchRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let crossMatchRecordDataRecord = existingRecords.crossMatchRecord;\r",
													"    let existingDataToDisplay = \"cross-match identity exists: [\"\r",
													"            +\"individualId=\" + crossMatchRecordDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + crossMatchRecordDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + crossMatchRecordDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7036\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#crossMatchFirstNameMiddleName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let crossMatchNames = utils.getFirstNameMiddleNameCrosssMatchedNames();\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = { \"crossMatchRecord\": \"\" };\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = { \"fullName\": crossMatchNames.name, \"addressLine1\": \"\", \"phone1\": \"\", \"postalCode\": \"\" };\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail = {\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for cross-name identity match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = { \"fullName\": crossMatchNames.crossMatchName, \"emailAddress1\": preRequest1Data.emailAddress1, \"addressLine1\": \"\", \"phone1\": \"\", \"postalCode\": \"\" };\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let fullName = preRequest1Data.inputRecord.fullName.split(\" \");\r",
													"    let givenName = fullName[0];\r",
													"    let middleName = fullName[1];\r",
													"    let existingRecord = {\r",
													"        \"fullName\": outputData.fullName,\r",
													"        \"givenName\": givenName,\r",
													"        \"middleName\": middleName,\r",
													"        \"individualId\": outputData.individualId,\r",
													"        \"emailAddress1\": outputData.emailAddress1,\r",
													"    };\r",
													"    existingRecords.crossMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.crossMatchRecord.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7036](https://jira.cnvrmedia.net/browse/PID-7036)\n\n&#9724; **NAME:**  Identity-request when cross-match identity found for input first name and middle name\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with  fullName  i.e (first name + middle name + middle name).\n\n&#9724; **PRECONDITION**\n*\tIdentity-record exists with  givenName (i.e first name) and  familyName (i.e sur name) that cross-match with first name and sur name  in input 'fullName'.\n\t\n\tExample -\n\tinput  fullName  / (first + middle + last) name : John kr Smith      \n\texisting  givenName : Kr     \n\texisting  middleName : John    \n\texisting  familyName : Smith   \n*\tThe rule  CROSS_MATCH_FIR_MIDDLE_NM  is enabled i.e  CROSS_MATCH_FIR_MIDDLE_NM = \"Y\"   \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The match is considered successful and the (first name + middle name)-corss-match identity record gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*    \"fullName\" \n*    \"emailAddress1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*\t\"givenName\" \n*\t\"middleName\" \n*\t\"familyName\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7021) > Identity-request when rule \"ALLOW_SUFF_MATCH_BLANK\" is enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {      \r",
													"    pm.test(\"Identity-match exists with givenName, familyName , but with empty suffix.\",()=>{\r",
													"         utils.validateIfEmpty(existingRecords.suffixConflictRecord.generationalSuffix)}); \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"individualId of the existing record(with empty suffix) comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.suffixConflictRecord.individualId)});  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let suffixConflictRecordDataRecord = existingRecords.suffixConflictRecord;\r",
													"    let existingDataToDisplay =  \"empty-suffix-match identity exists:[\"\r",
													"            +\"individualId=\" + suffixConflictRecordDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + suffixConflictRecordDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + suffixConflictRecordDataRecord.emailAddress1 +\", \" \r",
													"            + \"generationalSuffix=\" + suffixConflictRecordDataRecord.generationalSuffix +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7021\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#AllowSuffixBlankRule\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let fullName = utils.getValidFullNames();\r",
													"let fullNameWithSuffix = fullName + \" \"+\"Sr.\";\r",
													"let fullNameWithEmptySuffix = fullName;\r",
													"let preRequest1Data = {};\r",
													"let existingRecords = {\"suffixConflictRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithEmptySuffix,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_RULESTEMPLATE_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_RULESTEMPLATE_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for empty-suffix match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithSuffix,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName + \" \"+ outputData.generationalSuffix,\r",
													"            \"generationalSuffix\": outputData.generationalSuffix,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.suffixConflictRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.suffixConflictRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_RULESTEMPLATE_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_RULESTEMPLATE_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7021](https://jira.cnvrmedia.net/browse/PID-7021)\n\n&#9724; **NAME:**  Identity-request when rule \"ALLOW_SUFF_MATCH_BLANK\"  enabled \n\n&#9724; **DESCRIPTION:** \n*    fullName is given with a suffix along with  givenName ,  middleName  and  fullName .\n*\t **Example:** - Ben Joe Stokes Jr\n\n&#9724; **PRECONDITION**\n*\tfullName -match identity record exists but with a empty suffix.\n*\tRule  ALLOW_SUFF_MATCH_BLANK  is enabled i.e  ALLOW_SUFF_MATCH_BLANK= true\"  \n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    Match is considered successful ignoring the difference in suffix. The existing identity is returned in the response. i.e  individualId  of matching identity record is returned in the output.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName (first name + middle name + last name + suffix)\"\n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > rules-template > (PID-7026) > Identity-request when rule 'ALLOW_MIDDLE_MATCH_INIT' is enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1 ) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {   \r",
													"        pm.test(\"Validate Existing -> identity-match exist containing fullName with middleName initial in it.\",()=>{\r",
													"         let middleName = (outputData.fullName).split(\" \")[2];\r",
													"         pm.expect(existingRecords.middleNameInitialMatchRecord.middleName).to.equal(middleName.charAt(0))});\r",
													"          \r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  individualId of the existing record comes populated with identity-output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.middleNameInitialMatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let noMiddleNameMatchDataRecord = existingRecords.middleNameInitialMatchRecord;\r",
													"    let existingDataToDisplay = \"middleName-Initial match identity exists: [\"\r",
													"            +\"individualId=\" + noMiddleNameMatchDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + noMiddleNameMatchDataRecord.fullName + \", \" \r",
													"            + \"emailAddress1=\" + noMiddleNameMatchDataRecord.emailAddress1 +\", \" \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7021\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > rules-template\",\r",
													"                    tags: \"#RealTime#Identity#AllowMiddleNameMatchBlank\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let fullName = utils.getMiddleNameInitialsNames();\r",
													"let fullNameWithFullMiddleName = fullName.name;\r",
													"let fullNameWithMiddleNameInitial = fullName.middleNameWithInitial;\r",
													"let preRequest1Data ={};\r",
													"let existingRecords = {\"middleNameInitialMatchRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithMiddleNameInitial,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for middleName-Initial match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullNameWithFullMiddleName,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"middleName\": outputData.middleName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"    };\r",
													"    existingRecords.middleNameInitialMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.middleNameInitialMatchRecord.emailAddress1);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7026](https://jira.cnvrmedia.net/browse/PID-7026)\n\n&#9724; **NAME:**  Identity-request when rule 'ALLOW_MIDDLE_MATCH_INIT' is enabled.  \n\n&#9724; **DESCRIPTION:** \n*    Identity-request is made with fullName containing (giveName + middleName + familyName)lName and emailAddress1 given in input.\n\n&#9724; **PRECONDITION**\n*\tIdentity-match exists with givenName and familyName , but only middleName initial.\n*\tClient profile is enabled for ALLOW_MIDDLE_MATCH_INIT. i.e  ALLOW_MIDDLE_MATCH_INIT = \"Y\"\n\n&#9724; **rules-configuration:** \n*   aim_client_name_rules -> provides the NAME_RULE_TEMPLATE w.r.t client code. Rules are configured wr.t NAME_RULE_TEMPLATE in rules.csv. By default the NAME_RULE_TEMPLATE for the client code is \"DEFAULT\" if no entry in aim_client_name_rules\n\n&#9724; **EXPECTED RESULT:**\n*    The matching is successful even if the existing-identity only have middleName initial and the matching-identity  gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName (first name + middle name + last name)\".\n*    \"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "terminate-identity-rules-template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"identity-rules-template\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "identity-request-validation",
							"item": [
								{
									"name": "init-identity-request-validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > identity > request-validation >(PID-7110) - Validate identity request when  emailHygiene disabled in service config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let inputRecord = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> serviceConfig.enableEmailHygiene is set to  'No' in input field.\",\r",
													"    ()=> pm.expect(inputData.serviceConfig.enableEmailHygiene.toUpperCase()).to.equal(\"NO\"));\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   //NOT APPLICABLE//\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  errorMessage comes popuated as '[EnableEmailHygiene] should be set to YES'\",()=>{\r",
													"    pm.expect(outputData.errorMessage).to.contain(\"[EnableEmailHygiene] should be set to YES\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputRecord.countryCode + \", \" \r",
													"    + \"emailAddress1=\" + inputRecord.emailAddress1 +\", \" \r",
													"    + \"postalCode=\" + inputRecord.postalCode +\", \"\r",
													"    + \"addressLine1=\" + inputRecord.addressLine1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"     let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay; \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7110\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > request-validation\",\r",
													"                    tags: \"#RealTime#identityValidation#emailHygnDisabled\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"no\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7110](https://jira.cnvrmedia.net/browse/PID-7110)\n\n&#9724; **NAME:** Validate identity request when tried with email hygiene disabled in sevice config\n\n&#9724; **DESCRIPTION:** \n*   Identity-request is made with \"serviceConfig.enableEmailHygiene\" = \"no\"\t\n\n&#9724; **EXPECTED RESULT:**\n*   This shows \"errorMessage\" as \"[EnableEmailHygiene] should be set to YES\".\n*   Response status comes as \"400 BAD REQUEST\" and the \"errorMessage\" comes populated in the output.\n\n&#9724; **INPUT FIELDS:**\n*   \"serviceConfig.enableEmailHygiene\" : \"no\"\n\n**OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > request-validation > (PID-7112) - Validate identity request when  phoneHygiene disabled in service config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let inputRecord = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> serviceConfig.enablePhoneHygiene is set to 'No' in input.\", pm.expect(inputData.serviceConfig.enablePhoneHygiene.toUpperCase()).to.equal(\"NO\"));\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> 'errorMessage' comes populated as  '[EnablePhoneHygiene] should be set to YES'\",()=>{\r",
													"    pm.expect(outputData.errorMessage).to.equal(\"[EnablePhoneHygiene] should be set to YES\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputRecord.countryCode + \", \" \r",
													"    + \"emailAddress1=\" + inputRecord.emailAddress1 +\", \" \r",
													"    + \"postalCode=\" + inputRecord.postalCode +\", \"\r",
													"    + \"addressLine1=\" + inputRecord.addressLine1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay; \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7112\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > request-validation\",\r",
													"                    tags: \"#RealTime#identityValidation#phoneHygnDisabled\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7112](https://jira.cnvrmedia.net/browse/PID-7112)\n\n&#9724; **NAME:** Validate identity request when tried with phone hygiene disabled in sevice config\n\n&#9724; **DESCRIPTION:** \n*   Identity-request is made with \"serviceConfig.enablePhoneHygiene\" = no\"\t\n\n&#9724; **EXPECTED RESULT:**\n*   This shows error message as \"[EnablePhoneHygiene] should be set to YES\".\n*   Response status comes as \"400 BAD REQUEST\" and the \"errorMessage\" comes populated in the output.\n\n&#9724; **INPUT FIELDS:**\n*   \"serviceConfig.enablePhoneHygiene\" = \"no\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > request-validation > (PID-7114) - Validate identity request when  addressHygiene disabled in service config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let inputRecord = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> enableAddressHygiene is given No in input field.\", pm.expect(inputData.serviceConfig.enableAddressHygiene.toUpperCase()).to.equal(\"NO\"));\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  response comes with exception message as '[EnableAddressHygiene] should be set to YES'\",()=>{\r",
													"    pm.expect(outputData.errorMessage).to.equal(\"[EnableAddressHygiene] should be set to YES\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputRecord.countryCode + \", \" \r",
													"    + \"emailAddress1=\" + inputRecord.emailAddress1 +\", \" \r",
													"    + \"postalCode=\" + inputRecord.postalCode +\", \"\r",
													"    + \"addressLine1=\" + inputRecord.addressLine1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay; \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//==============================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7114\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > request-validation\",\r",
													"                    tags: \"#RealTime#identityValidation#addressHygnDisabled\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"no\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7114](https://jira.cnvrmedia.net/browse/PID-7114)\n\n&#9724; **NAME:** Validate identity request when address hygiene disabled in service config\n\n&#9724; **DESCRIPTION:** \n*   Identity-request's made with 'serviceConfig.enableAddressHygiene = \"no\"'\n\n&#9724; **EXPECTED RESULT:**\n*   This shows error as \"[EnableAddressHygiene] should be set to YES\".\n*   Response status comes as \"OK\" and the \"errorMessage\" field comes populated with the message in the output.\n\n&#9724; **INPUT FIELDS:**\n*   \"serviceConfig.enableAddressHygiene\" = \"no\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > request-validation >(PID-7115) - Validate identity request when  name-hygiene disabled in service config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> enableNameHygiene is given No in input field.\", pm.expect(inputData.serviceConfig.enableNameHygiene.toUpperCase()).to.equal(\"NO\"));\r",
													"    pm.test(\"Additional Input -> countryCode, emailAddress1,postalCode,addressLine1,phone1 are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.countryCode)\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.phone1);\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.addressLine1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  exception '[EnableNameHygiene] should be set to YES'is thrown in response.\",()=>{\r",
													"    pm.expect(outputData.errorMessage).to.equal(\"[EnableNameHygiene] should be set to YES\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode + \", \" \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \" \r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay; \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//==============================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7115\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > request-validation\",\r",
													"                    tags: \"#RealTime#identityValidation#nameHygnDisabled\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7115](https://jira.cnvrmedia.net/browse/PID-7115)\n\n&#9724; **NAME:** \nValidate identity request when name-hygiene disabled in service config\n\n&#9724; **DESCRIPTION:** \n*   Identity-request's made with \"serviceConfig.enableNameHygiene = 'no'\"\n\n&#9724; **EXPECTED RESULT:**\n*   This shows error as \"[EnableNameHygiene] should be set to YES\".\n*   Response status comes as \"OK\" and the errorMessage comes populated with the message in the output.\n\n&#9724; **INPUT FIELDS:**\n*   \"serviceConfig.enableNameHygiene\" = \"no\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > request-validation > (PID-7402) - Validate identity request when  tried with invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate header-> accessToken is given invalid in headers.\",pm.expect(pm.request.headers.get(\"accessToken\")).to.not.equal(pm.environment.get(\"accessToken\")));\r",
													"    pm.test(\"Additional Input -> countryCode,fullName, emailAddress1,postalCode,addressLine1,phone1 are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.countryCode)\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  exception 'accessToken is expired' is thrown in response\",()=>{\r",
													"    pm.expect(outputData.errorMessage).to.equal(\"accessToken is invalid\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode + \", \" \r",
													"    + \"fullName=\" + inputData.fullName +\", \" \r",
													"    + \"phone1=\" + inputData.phone1 +\", \" \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \" \r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay; \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//==============================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7402\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > request-validation\",\r",
													"                    tags: \"#RealTime#identityValidation#invalidAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "asdasdasdeyJraWQiOiJZY5552VCZHVCX1ZSUUE0ZWlvN1VoZ0k3cFdNaTBSYm8tWjRvd3BSUGxtc3dBIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmNJYVJQTVNQWGEyUmNFdGt4RVRaU2lJV1ItZFBYLUNlbFB1V3doYWZVbDAiLCJpc3MiOiJodHRwczovL2RhdGFodWItcG9jLm9rdGEuY29tL29hdXRoMi9hdXNuZDJlMXZneTFQTmlPRTR4NiIsImF1ZCI6IkNvbm5lY3QiLCJpYXQiOjE2MDAzNTQ2NDcsImV4cCI6MTYwMDM1ODI0NywiY2lkIjoiMG9hb3RjemZtc1Y4dlhLUzg0eDYiLCJ1aWQiOiIwMHVvenFhZ3pPckJhQzRSMzR4NiIsInNjcCI6WyJvcGVuaWQiXSwic3ViIjoiY29uX3NlcnZpY2UuYWRtaW5AZG9tYWluLmNvbSIsIlgtRXBzaWxvbi1Vc2VybmFtZSI6ImNvbl9zZXJ2aWNlLmFkbWluQGRvbWFpbi5jb20ifQ.HF_dnZ3fQpuA_Mbn-uubmVNki2Dei09g6SqI9QU2_DpyTFQ2X8Rtflv27pP0-iP_y7ytf7Ybft9PX9h8wSn4rzbLHShVqpo7IyT0e4FdWTEAOxNFZ1tl8-PCa1zxmbizRuiHZFgz13y37LYySK9mlJvyOmT-57sczyJ4-LvshkE9ui1-f52lG1tOq4tczEJ5mum71jiJuZu1Da33F1HyENOhSgEZZz2doJKOfl9CuBSfLiN5fBPir19U4V_9f8-4TKJnHxZvfaso1Zs_jGHh3kg6DOzOmh2UiuPTe_HgwEOWGfa51qPUsBBL8QZPAX_5bGI8p7UtDc8UHeaaTBIZCQ"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7402](https://jira.cnvrmedia.net/browse/PID-7402)\n\n&#9724; **NAME:** Validate identity request when tried with invalid access token\n\n&#9724; **DESCRIPTION:** \n*   Identity-request's made with invalid access token in the header (example - accessToken : xyz)\n\n&#9724; **EXPECTED RESULT:**\n*   Response status comes as \"403-FORBIDDEN\".\n*   This shows error as \"errorMessage: accessToken is invalid\".\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > request-validation > (PID-7403) - Validate identity request when  tried with no access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequestWithNoAccessToken(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate header-> no accessToken is given in headers.\",pm.expect(pm.request.headers.get(\"accessToken\")).to.equal(\"\"));\r",
													"    pm.test(\"Additional Input -> countryCode,fullName, emailAddress1,postalCode,addressLine1,phone1 are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.countryCode)\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  exception 'accessToken must be provided' is thrown in response\",()=>{\r",
													"    pm.expect(outputData.errorMessage).to.equal(\"accessToken must be provided\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode + \", \" \r",
													"    + \"fullName=\" + inputData.fullName +\", \" \r",
													"    + \"phone1=\" + inputData.phone1 +\", \" \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \" \r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay; \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//==============================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7403\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > request-validation\",\r",
													"                    tags: \"#RealTime#identityValidation#emptyAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": ""
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"{{enablePhoneHygiene}}\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7403](https://jira.cnvrmedia.net/browse/PID-7403)\n\n&#9724; **NAME:** Validate identity request when tried with no access token\n\n&#9724; **DESCRIPTION:** \n*   Identity-request's made with no access token in the header i.e accessToken header as empty\n\n&#9724; **EXPECTED RESULT:**\n*   Response status comes as \"403-FORBIDDEN\".\n*   This shows error as \"errorMessage: accessToken must be provided\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > identity > request-validation > (PID-7404) - Validate identity request when access token gets expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate header-> expired accessToken is given in headers.\");\r",
													"    pm.test(\"Additional Input -> countryCode,fullName, emailAddress1,postalCode,addressLine1,phone1 are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.countryCode)\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  exception 'accessToken cannot be veriified ' is thrown in response\",()=>{\r",
													"    pm.expect(outputData.errorMessage).to.equal(\"accessToken cannot be veriified \");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode + \", \" \r",
													"    + \"fullName=\" + inputData.fullName +\", \" \r",
													"    + \"phone1=\" + inputData.phone1 +\", \" \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \" \r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay; \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//==============================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7404\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > identity > request-validation\",\r",
													"                    tags: \"#RealTime#identityValidation#expiredAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "eyJraWQiOiIwTVhBQWpCdkFrODk0TEExRGNtWWNTbmw1YXJSbldXeWRVYTFFRUVCX2NjIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULldxNkFOMjN2V2ZGTTJWQjRxN3VXbXJQQlV2a1FKX0VoUDZZNTQyX3lzQjgiLCJpc3MiOiJodHRwczovL2Vwc2lsb25jbGllbnQub2t0YXByZXZpZXcuY29tL29hdXRoMi9hdXN2MzI1bTJ2QXVUbkV5eDBoNyIsImF1ZCI6IkNvbm5lY3QiLCJpYXQiOjE2MjcyNzQzNjAsImV4cCI6MTYyNzI3Nzk2MCwiY2lkIjoiMG9heHZ2ODE1MkNvUDBubnQwaDciLCJzY3AiOlsiYXBpOmludm9rZSJdLCJzdWIiOiIwb2F4dnY4MTUyQ29QMG5udDBoNyJ9.glp0r7ziprXMeR3kakMm6gNVS5MLJbddNFW_cRhrxXXinOi_q6hn9TxtIqyWYZ3LF6OP5aE0iZB80gUdFsxQeqc5AHwvC3WANwflYrZoBl98xQm4qNrQF4lFqr3JseEoxCfOKyIGf5cLFQDyaue0rejEbOa1Ae-R7hru5wHDOUOAEQ5A4Kf-PAj3Ozy71zwMXun7k-YDEExbWeiokfwsUP-31uhfW6kqx1Sy6dz1Kp0t0cXx11BmVEAOaloOAoiUmO7HyhmazA0c5eW74-dhgIJHNPnN0GkhPC4IuAJoi7zfxbFnN-EQWu8pd0ML14xzYxBWqlzPFEON0H5yu7NsSQ"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"{{enablePhoneHygiene}}\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7404](https://jira.cnvrmedia.net/browse/PID-7404)\n\n&#9724; **NAME:** Validate identity request when access token gets expired\n\n&#9724; **DESCRIPTION:** \n*   Identity-request's made with an access token i.e expired. (header - accessToken)\n\n&#9724; **Precondition:**\n*   Access token used for accessToken header is an expired token that's generated earlier.\n\n&#9724; **EXPECTED RESULT:**\n*   Response status comes as \"403-FORBIDDEN\".\n*   This shows error as \"errorMessage: accessToken is expired\".\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "terminate-identity-request-validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"identity-request-validation\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "client-suppression",
							"item": [
								{
									"name": "init-client-suppression",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > client-suppression > (PID-7433) - Real time client suppression request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body)\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (address1, locality1, region1, postalCode, countryCode, emailAddress, emailDomain, phone, digitalKey) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.address1)\r",
													"         utils.validateIfNonEmpty(inputData.locality1);\r",
													"         utils.validateIfNonEmpty(inputData.region1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.countryCode);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress);\r",
													"         utils.validateIfNonEmpty(inputData.emailDomain);\r",
													"         utils.validateIfNonEmpty(inputData.phone);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKey);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  response body gets populated with client suppression detail.\", ()=>{\r",
													"        pm.expect(outputData.hasOwnProperty(\"userCorrelationId\")).to.be.true;\r",
													"        pm.expect(outputData.hasOwnProperty(\"addressId\")).to.be.true;\r",
													"        pm.expect(outputData.addressReturnCode).to.not.equal(\"\");\r",
													"        pm.expect(outputData.emailAddressReturnCode).to.not.equal(\"\");\r",
													"        pm.expect(outputData.emailDomainReturnCode).to.not.equal(\"\");\r",
													"        pm.expect(outputData.phoneReturnCode).to.not.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"address1=\" + inputData.address1 + \", \"\r",
													"    + \"locality1=\" + inputData.locality1 +\", \"\r",
													"    + \"region1=\" + inputData.region1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"countryCode=\" + inputData.countryCode +\", \"\r",
													"    + \"emailAddress=\" + inputData.emailAddress +\", \"\r",
													"    + \"emailDomain=\" + inputData.emailDomain +\", \"\r",
													"    + \"phone=\" + inputData.phone +\", \"\r",
													"    + \"digitalKey=\" + inputData.digitalKey \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"userCorrelationId=\" + outputData.userCorrelationId +\", \"\r",
													"            +\"addressId=\" + outputData.addressId +\", \"\r",
													"            +\"addressReturnCode=\"+ outputData.addressReturnCode +\", \"\r",
													"            +\"emailAddressReturnCode=\" + outputData.emailAddressReturnCode +\", \"\r",
													"            +\"phoneReturnCode\" + outputData.phoneReturnCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7433\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > client-suppression\",\r",
													"                    tags: \"#Suppression#ClientSuppression#defaultCase\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"\r",
													"console.log(\"----------------\" +pm.request.headers.get(\"clientCode\"));\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"phone1\":utils.getPhone()};\r",
													"    utils.setRandomDataForClientSuppressionRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address1\": \"{{address1}}\",\r\n    \"address2\": \"\",\r\n    \"address3\": \"\",\r\n    \"address4\": \"\",\r\n    \"locality1\": \"{{locality1}}\",\r\n    \"locality2\": \"\",\r\n    \"locality3\": \"\",\r\n    \"region1\": \"{{region1}}\",\r\n    \"region2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"emailDomain\": \"{{emailDomain}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"digitalKey\": \"{{digitalKey}}\",\r\n    \"unitNumber\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/custom/suppression",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"custom",
												"suppression"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7433](https://jira.cnvrmedia.net/browse/PID-7433)\n\n&#9724; **NAME:**  Real time client suppression request\n\n&#9724; **DESCRIPTION:** \n*\t Real time client suppression request's submitted with the the required payload.\n\n&#9724; **EXPECTED RESULT:**\n*\t The response body gets populated with client suppression detail.\n\n&#9724; **INPUT FIELDS:**\n*\t\"address1\"\n*\t\"emailAddress\"\n*\t\"phone\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"userCorrelationId\"\n*\t\"addressID\"\n*\t\"addressReturnCode\"\n*\t\"emailAddressReturnCode\"\n*\t\"emailDomainReturnCode\"\n*\t\"phoneReturnCode\""
									},
									"response": []
								},
								{
									"name": "Realtime > client-suppression > validation > (PID-7434) - Validate  client-suppression  request  when clientCode is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body)\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.variables.get(\"CCODE_INVALID\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (address1, locality1, region1, postalCode, countryCode, emailAddress, emailDomain, phone, digitalKey) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.address1)\r",
													"         utils.validateIfNonEmpty(inputData.locality1);\r",
													"         utils.validateIfNonEmpty(inputData.region1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.countryCode);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress);\r",
													"         utils.validateIfNonEmpty(inputData.emailDomain);\r",
													"         utils.validateIfNonEmpty(inputData.phone);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKey);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"address1=\" + inputData.address1 + \", \"\r",
													"    + \"locality1=\" + inputData.locality1 +\", \"\r",
													"    + \"region1=\" + inputData.region1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"countryCode=\" + inputData.countryCode +\", \"\r",
													"    + \"emailAddress=\" + inputData.emailAddress +\", \"\r",
													"    + \"emailDomain=\" + inputData.emailDomain +\", \"\r",
													"    + \"phone=\" + inputData.phone +\", \"\r",
													"    + \"digitalKey=\" + inputData.digitalKey \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7434\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > client-suppression > validation\",\r",
													"                    tags: \"#Suppression#ClientSuppression#invalidClientCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"pm.variables.set(\"CCODE_INVALID\", \"smoke_test123\");\r",
													"pm.variables.set(\"XAPIKEY_INVALID\", \"6c3d0df7dfc6b822dc8f9a486f1f3a11\");\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForClientSuppressionRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_INVALID}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_INVALID}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address1\": \"{{address1}}\",\r\n    \"address2\": \"\",\r\n    \"address3\": \"\",\r\n    \"address4\": \"\",\r\n    \"locality1\": \"{{locality1}}\",\r\n    \"locality2\": \"\",\r\n    \"locality3\": \"\",\r\n    \"region1\": \"{{region1}}\",\r\n    \"region2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"emailDomain\": \"{{emailDomain}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"digitalKey\": \"{{digitalKey}}\",\r\n    \"unitNumber\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/custom/suppression",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"custom",
												"suppression"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7434](https://jira.cnvrmedia.net/browse/PID-7434)\n\n&#9724; **NAME:**  Validate  client-suppression  request  when clientCode is invalid\n\n&#9724; **DESCRIPTION:** \n*\t client-suppression  request's made with an invalid value for clientCode header\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"400-BAD REQUEST\"\n\n&#9724; **REQUIRED HEADERS:**\n*\t\"clientCode\" = {{invalid client code}}\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > client-suppression > validation > (PID-7435) - Validate  client-suppression  request when  tried with invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body)\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (address1, locality1, region1, postalCode, countryCode, emailAddress, emailDomain, phone, digitalKey) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.address1)\r",
													"         utils.validateIfNonEmpty(inputData.locality1);\r",
													"         utils.validateIfNonEmpty(inputData.region1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.countryCode);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress);\r",
													"         utils.validateIfNonEmpty(inputData.emailDomain);\r",
													"         utils.validateIfNonEmpty(inputData.phone);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKey);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"address1=\" + inputData.address1 + \", \"\r",
													"    + \"locality1=\" + inputData.locality1 +\", \"\r",
													"    + \"region1=\" + inputData.region1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"countryCode=\" + inputData.countryCode +\", \"\r",
													"    + \"emailAddress=\" + inputData.emailAddress +\", \"\r",
													"    + \"emailDomain=\" + inputData.emailDomain +\", \"\r",
													"    + \"phone=\" + inputData.phone +\", \"\r",
													"    + \"digitalKey=\" + inputData.digitalKey \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7435\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > client-suppression > validation\",\r",
													"                    tags: \"#Suppression#ClientSuppression#invalidAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForClientSuppressionRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "eyJraWQiOiJZY2VCZHVCX1ZSUUE0ZWlvN1VoZ0k3cFdNaTBSYm8tWjRvd3BSUGxtc3dBIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsmp0aSI6IkFULk1KY2pGSEJxek5ISl"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address1\": \"{{address1}}\",\r\n    \"address2\": \"\",\r\n    \"address3\": \"\",\r\n    \"address4\": \"\",\r\n    \"locality1\": \"{{locality1}}\",\r\n    \"locality2\": \"\",\r\n    \"locality3\": \"\",\r\n    \"region1\": \"{{region1}}\",\r\n    \"region2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"emailDomain\": \"{{emailDomain}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"digitalKey\": \"{{digitalKey}}\",\r\n    \"unitNumber\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/custom/suppression",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"custom",
												"suppression"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7435](https://jira.cnvrmedia.net/browse/PID-7435)\n\n&#9724; **NAME:**  Validate  client-suppression  request when  tried with invalid access token\n\n&#9724; **DESCRIPTION:** \n*\t client-suppression  request's made with invalid access token in the header (example - accessToken : xyz)\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"403-FORBIDDEN\".\n\n&#9724; **REQUIRED HEADERS:**\n*\t\"accessToken\" = {{invalid access token}}\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > client-suppression > validation >(PID-7436) - Validate  client-suppression  request when  tried with no access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body)\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequestWithNoAccessToken(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (address1, locality1, region1, postalCode, countryCode, emailAddress, emailDomain, phone, digitalKey) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.address1)\r",
													"         utils.validateIfNonEmpty(inputData.locality1);\r",
													"         utils.validateIfNonEmpty(inputData.region1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.countryCode);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress);\r",
													"         utils.validateIfNonEmpty(inputData.emailDomain);\r",
													"         utils.validateIfNonEmpty(inputData.phone);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKey);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"address1=\" + inputData.address1 + \", \"\r",
													"    + \"locality1=\" + inputData.locality1 +\", \"\r",
													"    + \"region1=\" + inputData.region1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"countryCode=\" + inputData.countryCode +\", \"\r",
													"    + \"emailAddress=\" + inputData.emailAddress +\", \"\r",
													"    + \"emailDomain=\" + inputData.emailDomain +\", \"\r",
													"    + \"phone=\" + inputData.phone +\", \"\r",
													"    + \"digitalKey=\" + inputData.digitalKey \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7436\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > client-suppression > validation\",\r",
													"                    tags: \"#Suppression#ClientSuppression#blankAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForClientSuppressionRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": ""
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address1\": \"{{address1}}\",\r\n    \"address2\": \"\",\r\n    \"address3\": \"\",\r\n    \"address4\": \"\",\r\n    \"locality1\": \"{{locality1}}\",\r\n    \"locality2\": \"\",\r\n    \"locality3\": \"\",\r\n    \"region1\": \"{{region1}}\",\r\n    \"region2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"emailDomain\": \"{{emailDomain}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"digitalKey\": \"{{digitalKey}}\",\r\n    \"unitNumber\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/custom/suppression",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"custom",
												"suppression"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7436](https://jira.cnvrmedia.net/browse/PID-7436)\n\n&#9724; **NAME:**  Validate  client-suppression  request when  tried with no access token\n\n&#9724; **DESCRIPTION:** \n*\t client-suppression  request's made with no access token in the header i.e accessToken  header as empty\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"403-FORBIDDEN\".\n\n&#9724; **REQUIRED HEADERS:**\n*\t\"accessToken\" = \"\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > client-suppression > validation >(PID-7437) - Validate  client-suppression  request when access token gets expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body)\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (address1, locality1, region1, postalCode, countryCode, emailAddress, emailDomain, phone, digitalKey) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.address1)\r",
													"         utils.validateIfNonEmpty(inputData.locality1);\r",
													"         utils.validateIfNonEmpty(inputData.region1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.countryCode);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress);\r",
													"         utils.validateIfNonEmpty(inputData.emailDomain);\r",
													"         utils.validateIfNonEmpty(inputData.phone);\r",
													"         utils.validateIfNonEmpty(inputData.digitalKey);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"address1=\" + inputData.address1 + \", \"\r",
													"    + \"locality1=\" + inputData.locality1 +\", \"\r",
													"    + \"region1=\" + inputData.region1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"countryCode=\" + inputData.countryCode +\", \"\r",
													"    + \"emailAddress=\" + inputData.emailAddress +\", \"\r",
													"    + \"emailDomain=\" + inputData.emailDomain +\", \"\r",
													"    + \"phone=\" + inputData.phone +\", \"\r",
													"    + \"digitalKey=\" + inputData.digitalKey \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7437\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > client-suppression > validation\",\r",
													"                    tags: \"#Suppression#ClientSuppression#expiredAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForClientSuppressionRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "eyJraWQiOiJZY2VCZHVCX1ZSUUE0ZWlvN1VoZ0k3cFdNaTBSYm8tWjRvd3BSUGxtc3dBIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULm9BSGJLVklzODFnLXpvWkZ5XzNtaE5ieEFkenJYSER6OTROdExaQ3hLb2siLCJpc3MiOiJodHRwczovL2RhdGFodWItcG9jLm9rdGEuY29tL29hdXRoMi9hdXNuZDJlMXZneTFQTmlPRTR4NiIsImF1ZCI6IkNvbm5lY3QiLCJpYXQiOjE2MDExOTY4NjAsImV4cCI6MTYwMTIwMDQ2MCwiY2lkIjoiMG9hb3RjemZtc1Y4dlhLUzg0eDYiLCJ1aWQiOiIwMHVvenFhZ3pPckJhQzRSMzR4NiIsInNjcCI6WyJvcGVuaWQiXSwic3ViIjoiY29uX3NlcnZpY2UuYWRtaW5AZG9tYWluLmNvbSIsIlgtRXBzaWxvbi1Vc2VybmFtZSI6ImNvbl9zZXJ2aWNlLmFkbWluQGRvbWFpbi5jb20ifQ.QyYw-EfEwUxRXKSXF2S3snFJAsyTuot-a3UQGNhkNwzGp5Vb1KGtg3lfI4pYlLxkSPH-ote3-n_rpKtKXXJP9zmD0-qWSwgG2F-htsiSUJfItn19TQCluPuQvW9zwPrd0NzVPZsSfMjFfOUNuD9tVf4KglZvazefIdrLWkpuCoMkwSQwQf41mnBOu-Mck4b5ziRF-97vMkqvZ7y1yN8Qf9QB5Be-LWJJhNX6LjE4vy3i-QPZ9D28HjSSBf8xDxnHnPcLnpCLQFSnqGVJmwh3XsGIESb4RzXuFhShoDh26E0mzltmZJ2yELtWyllyiGk9DVoDOOKvgVCll1saymY3hw"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address1\": \"{{address1}}\",\r\n    \"address2\": \"\",\r\n    \"address3\": \"\",\r\n    \"address4\": \"\",\r\n    \"locality1\": \"{{locality1}}\",\r\n    \"locality2\": \"\",\r\n    \"locality3\": \"\",\r\n    \"region1\": \"{{region1}}\",\r\n    \"region2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"emailDomain\": \"{{emailDomain}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"digitalKey\": \"{{digitalKey}}\",\r\n    \"unitNumber\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/custom/suppression",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"custom",
												"suppression"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7437](https://jira.cnvrmedia.net/browse/PID-7437)\n\n&#9724; **NAME:**  Validate  client-suppression  request when access token gets expired\n\n&#9724; **DESCRIPTION:** \n*\t client-suppression  request's made with expired access token in the header\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"403-FORBIDDEN\".\n\n&#9724; **REQUIRED HEADERS:**\n*\t\"accessToken\" = {{expired access token}}\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"errorMessage\""
									},
									"response": []
								},
								{
									"name": "terminate-client-suppression",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"client-suppression\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "realtime-global",
							"item": [
								{
									"name": "init-realtime-global",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-7665) - Global realtime identity request for with only addressLine1 in the input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> only addressLine1 is provided in input.\", utils.validateIfNonEmpty(inputData.addressLine1));\r",
													"    pm.test(\"Validate Input -> fullName, emailAddress1,phone1 are not provided.\",()=>{\r",
													"         utils.validateIfEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfEmpty(inputData.fullName);\r",
													"         utils.validateIfEmpty(inputData.phone1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  IndividualId comes empty in response.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode + \", \" \r",
													"    + \"addressLine1=\" + inputData.addressLine1\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"countryCode=\" + outputData.countryCode + \", \" \r",
													"     + \"addressLine1=\" + outputData.addressLine1 +\", \" \r",
													"     + \"individualId=\" + outputData.individualId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7665\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#WhenOnlyAddressProvided\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":\"\",\"familyName\":\"\",\"emailAddress1\":\"\",\"phone1\":\"\",\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7665](https://jira.cnvrmedia.net/browse/PID-7665)\n\n&#9724; **NAME:**  Global realtime identity request for with only addressLine1 in the input\n\n&#9724; **DESCRIPTION:** \n\nIdentity request's submitted with \n\n*\tcountryCode as a country other then USA/Canada, for example AUS (Australia)\n*\taddressLine1 is provided\n*\tAny individual detail such as email, phone or name are not given in the input \n\n&#9724; **EXPECTED RESULT:**\n*\tNo individualid gets generated and individualId comes empty in the output.\n\n&#9724; **INPUT FIELDS:**\n*\t\"addressLine1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"individualId\" =\"\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-7659) -Global realtime identity request when (email+fullName)-match identity found.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1, addressLine1, postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Record exists with only email\", utils.validateIfNonEmpty(existingRecords.emailMatchRecord.emailAddress1));\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  existing individualId comes populated in the output.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.equal(existingRecords.emailMatchRecord.individualId)});\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"postalCode\" + outputData.postalCode+\", \"\r",
													"            +\"emailAddress1\" + outputData.emailAddress1\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.emailMatchRecord;\r",
													"    let existingDataToDisplay = \"email match identity exists: [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            + \"emailAddress1=\" + existingDataRecord.emailAddress1\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7659\",\r",
													"                    sprint: \"Q4-2020\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealTime#Identity#foundMatchingRecord\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"emailMatchRecord\" : \"\"};\r",
													"let getPreRequest1Data = {};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"phone1\":\"\",\"fullName\":\"\",\"postalCode\":\"\",\"addressLine1\":\"\",\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email match record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"phone1\":\"\",\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest1Data.inputRecord.emailAddress1,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.emailMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.emailMatchRecord.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7659](https://jira.cnvrmedia.net/browse/PID-7659)\n\n&#9724; **NAME:** Global realtime identity request when (fullName+email)-match identity found. \n\n&#9724; **DESCRIPTION:** \nIdentity request's submitted with \n\n*\t countryCode as any country other that USA/Canada, for example - AUS(Australia)\n*\t fullName, addressLine1,emailAddress1 provided in the input\n\n&#9724; **PRECONDITION:**\n*    Identity-record exists with given (emailAddress1+ fullName)\n\n&#9724; **EXPECTED RESULT:**\n*    Existing identity-detail gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"fullName\"\n*    \"emailAddress1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-7660) -Global realtime identity request with (phone, email, fullName)and (email)-match identity found.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1, phone1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Record exists with email and fullName\",() =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord.emailAddress1)\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord.fullName)\r",
													"        });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  new individualId gets generated and populated in the response.\",()=>{\r",
													"    pm.expect(outputData.individualId).to.not.equal(existingRecords.emailMatchRecord.individualId)});\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"postalCode\" + outputData.postalCode+\", \"\r",
													"            +\"emailAddress1\" + outputData.emailAddress1\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.emailMatchRecord;\r",
													"    let existingDataToDisplay = \"email-match identity exists: [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            + \"emailAddress1=\" + existingDataRecord.emailAddress1\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7660\",\r",
													"                    sprint: \"Q4-2020\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#matchedEmailIdAndNewFullName\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"emailMatchRecord\" : \"\"};\r",
													"let getPreRequest1Data = {};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"phone1\":\"\",\"postalCode\":\"\",\"addressLine1\":\"\",\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for email-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"postalCode\":\"\",\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest1Data.inputRecord.emailAddress1,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.emailMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.emailMatchRecord.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7660](https://jira.cnvrmedia.net/browse/PID-7660)\n\n&#9724; **NAME:**  Global realtime identity request with (phone, email, fullName)and (email)-match identity found.\n\n&#9724; **DESCRIPTION:** \n\nIdentity request's submitted with \n\n*\tcountryCode as a country other then USA/Canada, for example AUS (Australia)\n*\tfullName, addressLine1,emailAddress1 provided in the input\n\n&#9724; **PRECONDITION:**\n*\tIdentity-record exists with given (emailAddress1) but with a different fullName(i.e givenName + middleName + surName)\n\n&#9724; **EXPECTED RESULT:**\n*\tNew individual gets created with the input fullName and individualId of the newly created record gets returned in the output.\n\n&#9724; **INPUT FIELDS:**\n*\t\"fullName\"\n*\t\"emailAddress1\"\n*\t\"addressLine1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-7661) -Global realtime identity request with only email and multiple (email)-match identity found.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    \r",
													"        pm.test(\"Validate Input -> Required field(emailAddress1) is provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"     \r",
													"   /*\r",
													"     pm.test(\"Validate Input -> other fields than emailAddress1 are provided empty in response.\",()=>{\r",
													"         utils.validateIfEmpty(inputData.fullName);\r",
													"         utils.validateIfEmpty(inputData.postalCode);\r",
													"         utils.validateIfEmpty(inputData.addressLine1);\r",
													"         utils.validateIfEmpty(inputData.phone1);\r",
													"    });\r",
													"    */\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Record1 exists with email and fullName.\",() =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord1.emailAddress1);\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord1.fullName);\r",
													"        });\r",
													"        pm.test(\"Validate existing ->  Record2 exists with email and fullName.\",() =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord2.emailAddress1)\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord2.fullName)\r",
													"        });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  smallest individualId gets populated in the output.\",()=>{\r",
													"     if(existingRecords.emailMatchRecord1.individualId>existingRecords.emailMatchRecord2.individualId){\r",
													"         pm.expect(outputData.individualId).to.equal(existingRecords.emailMatchRecord2.individualId)\r",
													"     }\r",
													"     else{\r",
													"          pm.expect(outputData.individualId).to.equal(existingRecords.emailMatchRecord1.individualId)\r",
													"     }\r",
													"    });\r",
													"   /*\r",
													"    pm.test(\"Validate output ->  Consolidation will not happen for given input and pretests.\",()=>{\r",
													"         pm.expect(JSON.parse(responseBody).identityOutput.consolidations.consolidatedIds.length).to.equal(0);\r",
													"     \r",
													"    });\r",
													"    */\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"emailAddress1\" + outputData.emailAddress1\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord1 = existingRecords.emailMatchRecord1;\r",
													"    let existingDataRecord2 = existingRecords.emailMatchRecord2;\r",
													"    let existingDataToDisplay = \"email-match 1 exists: [\"\r",
													"            +\"individualIdOfMatchedRecord1=\" + existingDataRecord1.individualId + \", \"\r",
													"            + \"emailAddress1OfMatchedRecord1=\" + existingDataRecord1.emailAddress1+\", \"\r",
													"            +\"]\" + \" ||| email-match 2 exists: [\"\r",
													"            +\"individualIdOfMatchedRecord2=\" + existingDataRecord2.individualId + \", \"\r",
													"            + \"emailAddress1OfMatchedRecord2=\" + existingDataRecord2.emailAddress1\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7661\",\r",
													"                    sprint: \"Q4-2020\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#onlyEmailId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"emailMatchRecord1\" : \"\",\"emailMatchRecord2\" : \"\"};\r",
													"let getPreRequest1Data = {};\r",
													"let getPreRequest2Data = {};\r",
													"let emailAddress1 = utils.getEmail();\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"phone1\":\"\",\"postalCode\":\"\",\"addressLine1\":\"\",\"emailAddress1\":emailAddress1,\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for email-match1\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"postalCode\":\"\",\"fullName\":\"\",\"phone1\":\"\",\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest1Data.inputRecord.emailAddress1,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.emailMatchRecord1 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.emailMatchRecord1.emailAddress1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"phone1\":\"\",\"postalCode\":\"\",\"addressLine1\":\"\",\"emailAddress1\":emailAddress1,\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for email-match2\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest2Data.inputRecord.emailAddress1,\r",
													"            \"fullName\": getPreRequest2Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.emailMatchRecord2 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7661](https://jira.cnvrmedia.net/browse/PID-7661)\n\n&#9724; **NAME:**  Global realtime identity request with only email and multiple (email)-match identity found.\n\n&#9724; **DESCRIPTION:** \n\nIdentity request's submitted with \n\n*\tcountryCode as a country other then USA/Canada, for example AUS (Australia)\n*\temailAddress1 provided in the input\n\n&#9724; **PRECONDITION:**\n*\tMultiple identity-record exists with given (emailAddress1)\n\n&#9724; **EXPECTED RESULT:**\n*\tSmallest individual id gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*\t\"fullName\"\n*\t\"emailAddress1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-7662) -Global realtime identity request with (email, phone) multiple (phone)-match identity found.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> Required fields(phone1) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.phone1);\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"    pm.test(\"Validate Input -> other fields than emailAddress1 are provided empty in response.\", () => {\r",
													"        utils.validateIfEmpty(inputData.fullName);\r",
													"        utils.validateIfEmpty(inputData.postalCode);\r",
													"        utils.validateIfEmpty(inputData.addressLine1);\r",
													"        \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Record1 exists with email and fullName\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord1.phone1);\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord1.fullName);\r",
													"    });\r",
													"    pm.test(\"Validate existing ->  Record2 exists with email and fullName\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord2.phone1)\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord2.fullName)\r",
													"    });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  Shorter individualId from two emailMatched records comes in response.\", () => {\r",
													"        if (existingRecords.phoneMatchRecord1.individualId > existingRecords.phoneMatchRecord2.individualId) {\r",
													"            pm.expect(outputData.individualId).to.equal(existingRecords.phoneMatchRecord2.individualId)\r",
													"        }\r",
													"        else {\r",
													"            pm.expect(outputData.individualId).to.equal(existingRecords.phoneMatchRecord1.individualId)\r",
													"        }\r",
													"    });\r",
													"    pm.test(\"Validate output ->  Consolidation will not happen for given input and pretests.\", () => {\r",
													"        pm.expect(outputData.consolidatedIds.length).to.equal(0);\r",
													"\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"phone1=\" + inputData.phone1+ \",\"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"phone1=\" + outputData.phone1\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord1 = existingRecords.phoneMatchRecord1;\r",
													"    let existingDataRecord2 = existingRecords.phoneMatchRecord2;\r",
													"    let existingDataToDisplay = \"phone-match 1 exists: [\"\r",
													"        + \"individualIdOfMatchedRecord1=\" + existingDataRecord1.individualId + \", \"\r",
													"        + \"phoneOfMatchedRecord1=\" + existingDataRecord1.phone1 \r",
													"        + \"]\" + \" ||| phone-match 2 exists: [\"\r",
													"            +\"individualIdOfMatchedRecord2=\" + existingDataRecord2.individualId + \", \"\r",
													"            + \"emailAddress1OfMatchedRecord2=\" + existingDataRecord2.phone1\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7662\",\r",
													"                    sprint: \"Q4-2020\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#matchedPhoneNumber\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"phoneMatchRecord1\" : \"\",\"phoneMatchRecord2\" : \"\"};\r",
													"let getPreRequest1Data = {};\r",
													"let getPreRequest2Data = {};\r",
													"let phone1 = \"0\" + _.random(420000000, 420019999);// \"04 20019 459\";\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"postalCode\":\"\",\"addressLine1\":\"\",\"phone1\":phone1,\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for phone-match1\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"postalCode\":\"\",\"fullName\":\"\",\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"phone1\": getPreRequest1Data.inputRecord.phone1,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord1 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"phone1\",existingRecords.phoneMatchRecord1.phone1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"postalCode\":\"\",\"addressLine1\":\"\",\"phone1\":phone1,\"countryCode\":\"AUS\"};\r",
													"    getPreRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for phone-match2\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"phone1\": getPreRequest2Data.inputRecord.phone1,\r",
													"            \"fullName\": getPreRequest2Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord2 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7662](https://jira.cnvrmedia.net/browse/PID-7662)\n\n&#9724; **NAME:**  Global realtime identity request with (email, phone) multiple (phone)-match identity found.\n\n&#9724; **DESCRIPTION:** \n\nIdentity request's submitted with \n\n*\tcountryCode as a country other then USA/Canada, for example AUS (Australia)\n*\tphone1 provided in the input\n\n&#9724; **PRECONDITION:**\n*\tMultiple identity-record exists with given (phone1)\n\n&#9724; **EXPECTED RESULT:**\n*\tSmallest individual id gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*\t\"fullName\"\n*\t\"emailAddress1\"\n*\t\"phone1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-7663) -Global realtime identity request with (email, phone, address) and multiple match exists for the identity.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields emailAddress1,postalCode,phone1,fullName,addressLine1 are provided in the input.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"    });\r",
													"    pm.test(\"Validate Input ->fullName is given empty in input.\",()=>{\r",
													"         utils.validateIfEmpty(inputData.fullName);\r",
													"         \r",
													"    });\r",
													"    \r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Record1 exists with email,addressLine1,postalCode,phone1,fullName.\",() =>{\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.emailAddress1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.fullName);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.postalCode);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.addressLine1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.phone1);\r",
													"        });\r",
													"        pm.test(\"Validate existing ->  Record2 exists with email,addressLine1,postalCode,phone1,fullName.\",() =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord2.emailAddress1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.fullName);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.postalCode);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.addressLine1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.phone1);\r",
													"        });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  smallest individualId gets populated in the response.\",()=>{\r",
													"     if(existingRecords.matchRecord1.individualId>existingRecords.matchRecord2.individualId){\r",
													"         pm.expect(outputData.individualId).to.equal(existingRecords.matchRecord2.individualId)\r",
													"     }\r",
													"     else{\r",
													"          pm.expect(outputData.individualId).to.equal(existingRecords.matchRecord1.individualId)\r",
													"     }\r",
													"    });\r",
													"   /*\r",
													"    pm.test(\"Validate output ->  Consolidation will not happen for given input and pretests.\",()=>{\r",
													"         pm.expect(JSON.parse(responseBody).identityOutput.consolidations.consolidatedIds.length).to.equal(0);\r",
													"     \r",
													"    });\r",
													"    */\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\",\"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\",\"\r",
													"    + \"postalCode=\" + inputData.postalCode +\",\"\r",
													"    + \"phone1=\" + inputData.phone1 \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"    +\"individualId=\" + outputData.individualId +\", \"\r",
													"    +\"emailAddress1\" + outputData.emailAddress1+\",\"\r",
													"    + \"addressLine1=\" + outputData.addressLine1 +\",\"\r",
													"    + \"postalCode=\" + outputData.postalCode +\",\"\r",
													"    + \"phone1=\" + outputData.phone1 \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord1 = existingRecords.matchRecord1;\r",
													"    let existingDataRecord2 = existingRecords.matchRecord2;\r",
													"    let existingDataToDisplay = \"match record 1 exists: [\"\r",
													"            +\"individualIdOfMatchedRecord1=\" + existingDataRecord1.individualId + \", \"\r",
													"            + \"emailAddress1OfMatchedRecord1=\" + existingDataRecord1.emailAddress1+\", \"\r",
													"            + \"phone1OfMatchedRecord1=\" + existingDataRecord1.phone1+\", \"\r",
													"            + \"addressLine1OfMatchedRecord1=\" + existingDataRecord1.addressLine1+\", \"\r",
													"            + \"postalCodeOfMatchedRecord1=\" + existingDataRecord1.postalCode+\", \"\r",
													"\r",
													"            +\"]\"  + \" ||| match record 2 exists: [\"\r",
													"            +\"individualIdOfMatchedRecord2=\" + existingDataRecord2.individualId + \", \"\r",
													"            + \"emailAddress1OfMatchedRecord2=\" + existingDataRecord2.emailAddress1 + \", \"\r",
													"            + \"phone1OfMatchedRecord2=\" + existingDataRecord2.phone1 + \", \"\r",
													"            + \"addressLine1OfMatchedRecord2=\" + existingDataRecord2.addressLine1 + \", \"\r",
													"            + \"postalCodeOfMatchedRecord2=\" + existingDataRecord2.postalCode\r",
													"            +\"]\";\r",
													"\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7663\",\r",
													"                    sprint: \"Q4-2020\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#onlyEmailId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"matchRecord1\" : \"\",\"matchRecord2\" : \"\"};\r",
													"let getPreRequest1Data = {};\r",
													"let getPreRequest2Data = {};\r",
													"let emailAddress1 = utils.getEmail();\r",
													"let addressLine1 = utils.getAddressLine1();\r",
													"let phone1 = utils.getPhone();\r",
													"let postalCode = utils.getRandomNumberBetween(100000000, 999999999) + \"\";\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"phone1\":phone1,\"postalCode\":postalCode,\"addressLine1\":addressLine1,\"emailAddress1\":emailAddress1,\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for match-1\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":\"\",\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest1Data.inputRecord.emailAddress1,\r",
													"            \"phone1\": getPreRequest1Data.inputRecord.phone1,\r",
													"            \"addressLine1\": getPreRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest1Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.matchRecord1 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.matchRecord1.emailAddress1);\r",
													"    pm.variables.set(\"addressLine1\",existingRecords.matchRecord1.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",existingRecords.matchRecord1.postalCode);\r",
													"    pm.variables.set(\"phone1\",existingRecords.matchRecord1.phone1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"phone1\":phone1,\"postalCode\":postalCode,\"addressLine1\":addressLine1,\"emailAddress1\":emailAddress1,\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for match-2\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest2Data.inputRecord.emailAddress1,\r",
													"            \"phone1\": getPreRequest2Data.inputRecord.phone1,\r",
													"            \"addressLine1\": getPreRequest2Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest2Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest2Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.matchRecord2 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7663](https://jira.cnvrmedia.net/browse/PID-7663)\n\n&#9724; **NAME:**  Global realtime identity request with (email, phone, address) and multiple match exists for the identity.\n\n&#9724; **DESCRIPTION:** \n\nIdentity request's submitted with \n\n*\tcountryCode as a country other then USA/Canada, for example AUS (Australia)\n*\taddress1,emailAddress1,phone1 provided in the input\n\n&#9724; **PRECONDITION:**\n*\tMultiple identity-record exists with given input(address1,emailAddress1,phone1 )\n\n&#9724; **EXPECTED RESULT:**\n*\tSmallest individual id gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*\t\"fullName\"\n*\t\"addressLine1\"\n*\t\"emailAddress1\"\n*\t\"phone1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-7664) -Global realtime identity request when multiple (phone+email)-match identity found.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields emailAddress1,postalCode,phone1,fullName,addressLine1 are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"    });\r",
													"    pm.test(\"Validate Input ->fullName is given empty in input body.\",()=>{\r",
													"         utils.validateIfEmpty(inputData.fullName);\r",
													"         \r",
													"    });\r",
													"    \r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Record1 exists with email,addressLine1,postalCode,phone1,fullName\",() =>{\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.emailAddress1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.fullName);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.postalCode);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.addressLine1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord1.phone1);\r",
													"        });\r",
													"        pm.test(\"Validate existing ->  Record2 exists with email and fullName\",() =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.matchRecord2.emailAddress1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.fullName);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.postalCode);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.addressLine1);\r",
													"         utils.validateIfNonEmpty(existingRecords.matchRecord2.phone1);\r",
													"        });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  Shorter individualId from two Matched records comes in response.\",()=>{\r",
													"     if(existingRecords.matchRecord1.individualId>existingRecords.matchRecord2.individualId){\r",
													"         pm.expect(outputData.individualId).to.equal(existingRecords.matchRecord2.individualId)\r",
													"     }\r",
													"     else{\r",
													"          pm.expect(outputData.individualId).to.equal(existingRecords.matchRecord1.individualId)\r",
													"     }\r",
													"    });\r",
													"    pm.test(\"Validate output ->  Consolidation will not happen for given input and pretests.\",()=>{\r",
													"         pm.expect(JSON.parse(responseBody).identityOutput.consolidations.consolidatedIds.length).to.equal(0);\r",
													"     \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\",\"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\",\"\r",
													"    + \"postalCode=\" + inputData.postalCode +\",\"\r",
													"    + \"phone1=\" + inputData.phone1 \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"    +\"individualId=\" + outputData.individualId +\", \"\r",
													"    +\"emailAddress1\" + outputData.emailAddress1+\",\"\r",
													"    + \"addressLine1=\" + outputData.addressLine1 +\",\"\r",
													"    + \"postalCode=\" + outputData.postalCode +\",\"\r",
													"    + \"phone1=\" + outputData.phone1 \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord1 = existingRecords.matchRecord1;\r",
													"    let existingDataRecord2 = existingRecords.matchRecord2;\r",
													"    let existingDataToDisplay = \"match record 1 exists: [\"\r",
													"            +\"individualIdOfMatchedRecord1=\" + existingDataRecord1.individualId + \", \"\r",
													"            + \"emailAddress1OfMatchedRecord1=\" + existingDataRecord1.emailAddress1+\", \"\r",
													"            + \"phone1OfMatchedRecord1=\" + existingDataRecord1.phone1+\", \"\r",
													"            + \"addressLine1OfMatchedRecord1=\" + existingDataRecord1.addressLine1+\", \"\r",
													"            + \"postalCodeOfMatchedRecord1=\" + existingDataRecord1.postalCode+\", \"\r",
													"\r",
													"            +\"]\"  + \" ||| match record 2 exists: [\"\r",
													"            +\"individualIdOfMatchedRecord2=\" + existingDataRecord2.individualId + \", \"\r",
													"            + \"emailAddress1OfMatchedRecord2=\" + existingDataRecord2.emailAddress1 + \", \"\r",
													"            + \"phone1OfMatchedRecord2=\" + existingDataRecord2.phone1 + \", \"\r",
													"            + \"addressLine1OfMatchedRecord2=\" + existingDataRecord2.addressLine1 + \", \"\r",
													"            + \"postalCodeOfMatchedRecord2=\" + existingDataRecord2.postalCode\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7664\",\r",
													"                    sprint: \"Q4-2020\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#matchedPhoneNumberEmailAndNewAddress\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"matchRecord1\" : \"\",\"matchRecord2\" : \"\"};\r",
													"let getPreRequest1Data = {};\r",
													"let getPreRequest2Data = {};\r",
													"let emailAddress1 = utils.getEmail();\r",
													"let addressLine1 = utils.getAddressLine1();\r",
													"let phone1 = utils.getPhone();\r",
													"let postalCode = utils.getRandomNumberBetween(100000000, 999999999) + \"\";\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"phone1\":phone1,\"postalCode\":postalCode,\"addressLine1\":addressLine1,\"emailAddress1\":emailAddress1,\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for match-1\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":\"\",\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest1Data.inputRecord.emailAddress1,\r",
													"            \"phone1\": getPreRequest1Data.inputRecord.phone1,\r",
													"            \"addressLine1\": getPreRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest1Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.matchRecord1 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",existingRecords.matchRecord1.emailAddress1);\r",
													"    pm.variables.set(\"phone1\",existingRecords.matchRecord1.phone1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"phone1\":phone1,\"postalCode\":postalCode,\"addressLine1\":addressLine1,\"emailAddress1\":emailAddress1,\"countryCode\":\"AUS\"}; \r",
													"    getPreRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for match-2\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"emailAddress1\": getPreRequest2Data.inputRecord.emailAddress1,\r",
													"            \"phone1\": getPreRequest2Data.inputRecord.phone1,\r",
													"            \"addressLine1\": getPreRequest2Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest2Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest2Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.matchRecord2 = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7664](https://jira.cnvrmedia.net/browse/PID-7664)\n\n&#9724; **NAME:**  Global realtime identity request when multiple (phone+email)-match identity found.\n\n&#9724; **DESCRIPTION:** \n\nIdentity request's submitted with \n\n*\tcountryCode as a country other then USA/Canada, for example AUS (Australia)\n*\tphone1, emailAddress1, fullName provided in the input\n\n&#9724; **PRECONDITION:**\n*\tMultiple identity-record exists with given phone1, emailAddress1 but with different fullName (i.e givenName + middleName + familyName)\n\n&#9724; **EXPECTED RESULT:**\n*\tSmallest individual id gets returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*\t\"fullName\"\n*\t\"emailAddress1\"\n*\t\"phone1\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*\t\"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime-global >  (PID-7949)-Global realtime identity-request when short-id enabled for the client profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_SHORTID_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Required Input ->International country code is provided. not USA/Canada.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.countryCode)\r",
													"         pm.expect(inputData.countryCode).to.not.equal(\"USA\");\r",
													"         pm.expect(inputData.countryCode).to.not.equal(\"CAN\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> individualId comes populated as shorter i.e 13-digit.\",()=>{\r",
													"    pm.expect((outputData.individualId).length).to.equal(13);\r",
													"pm.expect((outputData.householdId).length).to.equal(13);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode + \", \" \r",
													"     \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"countryCode=\" + outputData.countryCode + \", \" \r",
													"     + \"individualId=\" + outputData.individualId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7949\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#RealTime#ClientProfiles#shortIdEnabledForGlobalRT\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"countryCode\":\"AUS\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"{{addressLine1}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"familyName\": \"{{familyName}}\",\n    \"fullName\": \"{{fullName}}\",\n    \"gender\": \"{{gender}}\",\n    \"phone1\": \"{{phone1}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n},\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7949](https://jira.cnvrmedia.net/browse/PID-7949)\n\n&#9724; **NAME:**  Global realtime identity-request when short-id enabled for the client profile\n\n&#9724; **DESCRIPTION:** \n\nIdentity request's submitted with\n\n*\t countryCode as a country other then USA/Canada, for example AUS (Australia)\n*    Identity request's submitted with SHORTID_ENBALED ='Y' in client profile.\n\n&#9724; **PRECONDITION**\n*\t SHORTID_ENBALED ='Y' in the aim_client_profile table with respect to the client code being used\n\n&#9724; **EXPECTED RESULT:**\n*\t householdId and individualId comes populated in 13 digits-form in the output. (example - 2000010267360)\n*\t AddressId in the output is in 32-bytes form (example - a3e4fffa2b7b966658851cdfd6a5a71e)\n\n&#9724; **INPUT FIELDS:**\n*    \"fullName\" \n*    \"emailAddress1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"householdId\"\n*   \"addressId\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-8750) - Global Realtime request to validate 3 char upper case country code field in output when full countryName is provided in input.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> countryCode is provided in input.\", utils.validateIfNonEmpty(inputData.countryCode));\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  3 char uppercase isoCode comes in response.\",()=>{\r",
													"    pm.expect((outputData.countryCode).length).to.equal(3);\r",
													"    pm.expect(outputData.countryCode).to.equal((outputData.countryCode).toUpperCase());\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode \r",
													"    + \"]\"\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"countryCode=\" + outputData.countryCode  \r",
													"    +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8750\",\r",
													"                    sprint: \"21.04.01\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#countryCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let countryCodes = [\"australia\",\"Australia\",\"newzealand\",\"Newzealand\",\"NewZealand\",\"india\",\"India\",\"inDiA\",\"iNdia\"];\r",
													"    let countryCode = countryCodes[_.random(0, countryCodes.length - 1)];\r",
													"    let testerInput = {\"fullName\":\"\",\"familyName\":\"\",\"emailAddress1\":\"\",\"phone1\":\"\",\"countryCode\":countryCode};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8750](https://jira.cnvrmedia.net/browse/PID-8750)\n\n◼ NAME:  Global Realtime request to validate 3 char upper case country code field in output.\n\n◼ DESCRIPTION:  \nRealtime request is submitted with full country name(and its different combinations like australia,AustraLia,ausTraLia) in input field to verify 3 char upper case iso code in output.\n\n◼ EXPECTED RESULT :\n1. 3 char upper case iso code comes populated in output.\n\n◼ INPUT FIELD:\n*  \"contryCode\"\n\n◼ OUTPUT FIELD:\n*  \"isoCode\""
									},
									"response": []
								},
								{
									"name": "Realtime-global > (PID-8751) - Global Realtime request to validate 3 char upper case country code field in output when 3 char isoCode of countryName is provided in input.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> countryCode is provided in input.\", utils.validateIfNonEmpty(inputData.countryCode));\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  3 char uppercase isoCode comes in response.\",()=>{\r",
													"    pm.expect((outputData.countryCode).length).to.equal(3);\r",
													"    pm.expect(outputData.countryCode).to.equal((outputData.countryCode).toUpperCase());\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"countryCode=\" + inputData.countryCode \r",
													"    + \"]\"\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"countryCode=\" + outputData.countryCode  \r",
													"    +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8751\",\r",
													"                    sprint: \"21.04.01\",\r",
													"                    subject: \"realtime-global\",\r",
													"                    tags: \"#GlobalRealtime#Identity#countryCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let countryCodes = [\"aus\",\"Aus\",\"nzl\",\"Nzl\",\"ind\",\"Ind\"];\r",
													"    let countryCode = countryCodes[_.random(0, countryCodes.length - 1)];\r",
													"    let testerInput = {\"fullName\":\"\",\"familyName\":\"\",\"emailAddress1\":\"\",\"phone1\":\"\",\"countryCode\":countryCode};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"{{familyName}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8751](https://jira.cnvrmedia.net/browse/PID-8751)\n\n◼ NAME:  Global Realtime request to validate 3 char upper case country code field in output when 3 char isoCode of countryName is provided in input.\n\n◼ DESCRIPTION:  \nRealtime request is submitted with  3 char isoCode of countryName(and its different combinations like AUS,aus,Aus) in input field to verify 3 char upper case iso code in output.\n\n◼ EXPECTED RESULT :\n1. 3 char upper case iso code comes populated in output.\n\n◼ INPUT FIELD:\n*  \"contryCode\"\n\n◼ OUTPUT FIELD:\n*  \"isoCode\""
									},
									"response": []
								},
								{
									"name": "terminate-realtime-global",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"realtime-global\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "realtime-usa",
							"item": [
								{
									"name": "init-realtime-usa",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "realtime-usa > identity > (PID-7887) - Identity-request with fullName containing professional-suffix",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Given fullName contains professionalSuffix. (Example-\" + pm.variables.get(\"professionalSuffix\") + \")\",()=>{\r",
													"        pm.expect(inputData.fullName).to.contains(pm.variables.get(\"professionalSuffix\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    //NOT APPLICABLE//\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  professionalSuffix comes pouplated in the output.(Example- M.B.A))\",()=>\r",
													"        pm.expect(outputData.professionalSuffix).to.equal(\"M.B.A.\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName     \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"            \r",
													"            +\"givenName=\" + outputData.givenName +\", \"\r",
													"            +\"middleName=\" + outputData.middleName +\", \"\r",
													"            +\"familyName=\" + outputData.familyName +\", \"\r",
													"            +\"professionalSuffix=\"+ outputData.professionalSuffix;            \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    return null;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7887\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa\",\r",
													"                    tags: \"#RealTime#Identity#foundMatchingRecord\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let professionalSuffix = \"MBA\";\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\": utils.getFullName()+\" \" +professionalSuffix};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"    pm.variables.set(\"professionalSuffix\", professionalSuffix);\r",
													"}\r",
													"\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"{{addressLine1}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"familyName\": \"\",\n    \"fullName\": \"{{fullName}}\",\n    \"gender\": \"{{gender}}\",\n    \"phone1\": \"\",\n    \"postalCode\": {{postalCode}},\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n},\n    \"serviceConfig\": {\n    \"configAddressHygiene\": {\n        \"enablePac\": \"no\",\n        \"enablePcoa\": \"no\"\n    },\n    \"enableIdentity\": \"Yes\",\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableGlobalSuppression\": \"no\",\n    \"enableOccupancyScore\": \"no\",\n    \"enableTspAppend\": \"no\"\n}\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7887](https://jira.cnvrmedia.net/browse/PID-7887)\n\n&#9724; **NAME:**  Identity-request with fullName containing professional-suffix.\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with a fullName that contains professional suffix.           \nExample -\n*\t fullName: Marjory Mastella MBA* \n\n*\t fullName: Marjory Mastella PHD*\n\n&#9724; **EXPECTED RESULT:**\n*\t professionalSuffix gets populated with the given suffix in the output.\n\n&#9724; **INPUT FIELDS:**\n*    \"fullName\"\n\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"professionalSuffix\""
									},
									"response": []
								},
								{
									"name": "realtime-usa > global-suppression > (PID-7016) - Connect realtime request when suppression record found for input address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required attributes(fullName, emailAddress1, addressLine1, postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.postalCode);\r",
													"    });\r",
													"    pm.test(\"Validate Input -> Required attributes - enableGlobalSuppression is given as 'Yes'.\",()=>{\r",
													"         pm.expect(inputData.serviceConfig.enableGlobalSuppression).to.equal(\"yes\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {       \r",
													"    \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> Suppression fields (deceasedDob, doNotMail, doNotCall, doNotFax, prison,, nursingHome) comes populated in the output. \",()=>{\r",
													"\r",
													"        let suppressionFieldsNonEmpty = false;\r",
													"        if(outputData.identityOutput.standardizedIdentity.deceased ||  outputData.identityOutput.standardizedIdentity.deceasedDob || outputData.identityOutput.standardizedIdentity.doNotMail || outputData.identityOutput.standardizedIdentity.doNotCall || outputData.identityOutput.standardizedIdentity.doNotFax || outputData.identityOutput.standardizedIdentity.prison || outputData.identityOutput.standardizedIdentity.nursingHome){\r",
													"            suppressionFieldsNonEmpty = true;\r",
													"        }\r",
													"        pm.expect(suppressionFieldsNonEmpty).to.be.true;\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.inputRecord.fullName + \", \"  \r",
													"    + \"addressLine1=\" + inputData.inputRecord.addressLine1 + \",\"\r",
													"    + \"postalCode=\" + inputData.inputRecord.postalCode + \",\"\r",
													"\t\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.identityOutput.individualId +\", \"\r",
													"            +\"deceasedFlag=\" + outputData.identityOutput.standardizedIdentity.deceased +\", \"\r",
													"            +\"deceasedDobFlag=\" + outputData.identityOutput.standardizedIdentity.deceasedDob+\", \"\r",
													"            +\"deceasedDodFlag=\" + outputData.identityOutput.standardizedIdentity.deceasedDod+\", \"\r",
													"            +\"doNotMailFlag=\" + outputData.identityOutput.standardizedIdentity.doNotMail+\", \"\r",
													"            +\"doNotCallFlag=\" + outputData.identityOutput.standardizedIdentity.doNotCall+\", \"\r",
													"            +\"doNotFaxFlag=\" + outputData.identityOutput.standardizedIdentity.doNotFax+\", \"\r",
													"            +\"prisonFlag=\" + outputData.identityOutput.standardizedIdentity.prison+\", \"\r",
													"            +\"nursingHomeFlag=\" + outputData.identityOutput.standardizedIdentity.nursingHome\r",
													"\t\t\t   \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"  \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7016\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > global-suppression\",\r",
													"                    tags: \"#USRealTime#GlobalSuppression#foundSuppressionRecord\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													" let testMetadata= {\r",
													"    \"sprint\": \"Q2-2020\",\r",
													"    \"module\": \"USRealTime\",\r",
													"    \"submodule\": \"GlobalSuppression\",\r",
													"    \"automation\": \"Yes\",\r",
													"    \"tags\": \"\"\r",
													" };\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let globalSuppressionData = utils.getGlobalSuppressionData();\r",
													"    let testerInput = {\"enableGlobalSuppression\": \"yes\",\"fullName\":globalSuppressionData.fullName,\"addressLine1\":globalSuppressionData.addressLine1,\"postalCode\":globalSuppressionData.postalCode};\r",
													"    let randomData = utils.setRandomDataForRequest(testerInput);\r",
													"    console.log(globalSuppressionData)\r",
													"    console.log(pm.environment.get(\"globalSuppressionDataList\"))\r",
													"};\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7016](https://jira.cnvrmedia.net/browse/PID-7016)\n\n&#9724; **NAME:**  Connect realtime request when suppression record found for input address\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime request's submitted with\n*\t countryCode as USA\n*\t global suppression enabled ( serviceConfig.enableGlobalSuppression = \"yes\")\n*\t addressLine1 provided in the input.\n\n&#9724; **PRECONDITION**\n*\t Suppression record exists for the input addressLine1.\n\n&#9724; **EXPECTED RESULT:**\n*\t Response gets populated with the global suppression-detail such as deceasedFlag, dnmFlag, dncFlag, dnfFlag, prisonFlag, nursingFlag, dateOfBirth, dateOfDeath\n\t\n&#9724; **INPUT FIELDS**\n*\t serviceConfig.enableGlobalSuppression = \"yes\"\n*\t addressLine1\n\n&#9724; **OUTPUT FIELDS:**\n*     deceasedFlag\n*     dnmFlag\n*     dncFlag\n*     dnfFlag\n*     prisonFlag\n*     nursingFlag\n*     dateOfBirth\n*     dateOfDeath"
									},
									"response": []
								},
								{
									"name": "realtime-usa > global-suppression > (PID-7040) - Connect realtime request when global suppression is disabled in the request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required attributes(fullName, emailAddress1, addressLine1, postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.inputRecord.postalCode);\r",
													"    });\r",
													"    pm.test(\"Validate Input -> enableGlobalSuppression is given as 'No' in input.\",()=>{\r",
													"         pm.expect(inputData.serviceConfig.enableGlobalSuppression.toUpperCase()).to.equal(\"NO\");\r",
													"    });\r",
													"    \r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {       \r",
													"    \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> As GlobalSuppression is disabled in the request, the suppression fields comes populated as empty in the response even if they exists.\",()=>{\r",
													"        let suppressionFieldsNonEmpty = false;\r",
													"        if(outputData.identityOutput.standardizedIdentity.deceased ||  outputData.identityOutput.standardizedIdentity.deceasedDob || outputData.identityOutput.standardizedIdentity.doNotMail || outputData.identityOutput.standardizedIdentity.doNotCall || outputData.identityOutput.standardizedIdentity.doNotFax || outputData.identityOutput.standardizedIdentity.prison || outputData.identityOutput.standardizedIdentity.nursingHome){\r",
													"            suppressionFieldsNonEmpty = true;\r",
													"        }\r",
													"        pm.expect(suppressionFieldsNonEmpty).to.be.false;\r",
													"\t});  \r",
													"\t\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.inputRecord.fullName + \", \"  \r",
													"    + \"addressLine1=\" + inputData.inputRecord.addressLine1 + \",\"\r",
													"    + \"postalCode=\" + inputData.inputRecord.postalCode + \",\"\r",
													"\t\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.identityOutput.individualId +\", \"\r",
													"            +\"deceasedFlag=\" + outputData.identityOutput.standardizedIdentity.deceased +\", \"\r",
													"            +\"deceasedDobFlag=\" + outputData.identityOutput.standardizedIdentity.deceasedDob+\", \"\r",
													"            +\"deceasedDodFlag=\" + outputData.identityOutput.standardizedIdentity.deceasedDod+\", \"\r",
													"            +\"doNotMailFlag=\" + outputData.identityOutput.standardizedIdentity.doNotMail+\", \"\r",
													"            +\"doNotCallFlag=\" + outputData.identityOutput.standardizedIdentity.doNotCall+\", \"\r",
													"            +\"doNotFaxFlag=\" + outputData.identityOutput.standardizedIdentity.doNotFax+\", \"\r",
													"            +\"prisonFlag=\" + outputData.identityOutput.standardizedIdentity.prison+\", \"\r",
													"            +\"nursingHomeFlag=\" + outputData.identityOutput.standardizedIdentity.nursingHome\r",
													"\t\t\t   \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    \r",
													"      \r",
													"};\r",
													"\r",
													"let existingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.addressMatchRecord;\r",
													"    let existingDataToDisplay = \"GlobalSuppression record exists : [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 + \", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode + \", \"\r",
													"            + \"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"            + \"deceasedFlag=\"  + existingDataRecord.deceasedFlag + \", \"\r",
													"            + \"deceasedDobFlag=\"  + existingDataRecord.deceasedDobFlag+ \", \"\r",
													"            + \"deceasedDodFlag=\"  + existingDataRecord.deceasedDodFlag+ \", \"\r",
													"            + \"doNotMailFlag=\"  + existingDataRecord.doNotMailFlag+ \", \"\r",
													"            + \"doNotCallFlag=\"  + existingDataRecord.doNotCallFlag+ \", \"\r",
													"            + \"doNotFaxFlag=\"  + existingDataRecord.doNotFaxFlag+ \", \"\r",
													"            + \"prisonFlag=\"  + existingDataRecord.prisonFlag+ \", \"\r",
													"            + \"nursingHomeFlag=\"  + existingDataRecord.nursingHomeFlag\r",
													"            +\"]\";\r",
													"    \r",
													"    pm.test(\"Check existing data=>\" + existingDataToDisplay, ()=>{\r",
													"        let existingDataRecord = existingRecords.addressMatchRecord\r",
													"        let suppressionFieldsNonEmpty = false;\r",
													"        if(existingDataRecord.deceasedFlag ||  existingDataRecord.deceasedDobFlag || existingDataRecord.deceasedDodFlag || existingDataRecord.doNotCallFlag || existingDataRecord.doNotFaxFlag || existingDataRecord.prisonFlag || existingDataRecord.nursingHomeFlag){\r",
													"            suppressionFieldsNonEmpty = true;\r",
													"        }\r",
													"        pm.expect(suppressionFieldsNonEmpty).to.be.true;\r",
													"    });\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"existingDataToDisplay();\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7040\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > global-suppression\",\r",
													"                    tags: \"#USRealTime#GlobalSuppression#disableGlobalSuppression\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"let globalSuppressionData = utils.getGlobalSuppressionData();\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"enableGlobalSuppression\": \"yes\",\"fullName\":globalSuppressionData.fullName,\"addressLine1\":globalSuppressionData.addressLine1,\"postalCode\":globalSuppressionData.postalCode,\"phone1\":\"\",\"emailAddress1\":\"\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for GlobalSuppression record match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableGlobalSuppression\": \"no\",\"phone1\":\"\",\"emailAddress1\":\"\"};\r",
													"    let randomData = utils.setRandomDataForRequest(testerInput);\r",
													"    };\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"addressLine1\": getPreRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest1Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"deceasedFlag\"  : outputData.deceased ,\r",
													"            \"deceasedDobFlag\"  : outputData.deceasedDob,\r",
													"            \"deceasedDodFlag\"  : outputData.deceasedDod,\r",
													"            \"doNotMailFlag\"  : outputData.doNotMail,\r",
													"            \"doNotCallFlag\"  : outputData.doNotCall,\r",
													"            \"doNotFaxFlag\"  : outputData.doNotFax,\r",
													"            \"prisonFlag\"  : outputData.prison,\r",
													"            \"nursingHomeFlag\"  : outputData.nursingHome\r",
													"\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"addressLine1\",existingRecords.addressMatchRecord.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",existingRecords.addressMatchRecord.postalCode);\r",
													"    pm.variables.set(\"fullName\",existingRecords.addressMatchRecord.fullName);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7040](https://jira.cnvrmedia.net/browse/PID-7040)\n\n&#9724; **NAME:**  Connect realtime request when global suppression is disabled in the request\n\n&#9724; **DESCRIPTION:** \n\nConnect-realtime request's submitted with\n*\t countryCode as USA\n*\t global suppression disabled ( serviceConfig.enableGlobalSuppression = \"no\")\n*\t addressLine1 provided in the input.\n\n&#9724; **PRECONDITION**\n*\t Suppression record exists for the input addressLine1.\n\n&#9724; **EXPECTED RESULT:**\n*\t Global suppression is not performed and global suppression attributes comes populated empty in the output.\n\t\n&#9724; **INPUT FIELDS**\n*\t serviceConfig.enableGlobalSuppression = \"no\"\n*\t addressLine1\n\n&#9724; **OUTPUT FIELDS:**\n*     deceasedFlag = \" \"\n*     dnmFlag = \" \"\n*     dncFlag = \" \"\n*     dnfFlag = \" \"\n*     prisonFlag = \" \"\n*     nursingFlag = \" \"\n*     dateOfBirth = \" \"\n*     dateOfDeath = \" \""
									},
									"response": []
								},
								{
									"name": "realtime-usa > occupancy-score > (PID-7041) - Connect realtime -request with occupancy score disabled.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName) are provided.\", () =>{\r",
													"        utils.validateIfNonEmpty(inputData.fullName);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  occupancyScore score exist w.r.t the input.\", ()=>{ \r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.occupancyScore);\r",
													"        });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  identityOutput.standardizedIdentity.occupancyScore comes empty in the response.\", ()=>{ utils.validateIfEmpty(outputData.occupancyScore);});\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"fullName=\" + inputData.fullName +\", \"\r",
													"      + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"      + \"postalCode=\" + inputData.postalCode +\", \"\r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"  }\r",
													"\r",
													"  this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"givenName=\"+ outputData.givenName +\", \"\r",
													"            +\"middleName=\"+ outputData.middleName +\", \"\r",
													"            +\"familyName=\"+ outputData.familyName\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.addressMatchRecord;\r",
													"    let existingDataToDisplay = \"occupancyScore record exists with valid data : [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 + \", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode + \", \"\r",
													"            + \"occupancyScore=\" + existingDataRecord.occupancyScore + \", \"\r",
													"            + \"fullName=\" + existingDataRecord.fullName\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"    \r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7041\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > occupancy-score\",\r",
													"                    tags: \"#USRealTime#OccupancyScore#disableOccupancyScore\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"let occupancyScoreData = utils.getOccupancyScoreData();\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"enableOccupancyScore\": \"yes\",\"fullName\":occupancyScoreData.fullName,\"addressLine1\":occupancyScoreData.addressLine1,\"postalCode\":occupancyScoreData.postalCode,\"phone1\":\"\",\"emailAddress1\":\"\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for OccupancyScore record match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableOccupancyScore\": \"no\",\"phone1\":\"\",\"emailAddress1\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"addressLine1\": getPreRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest1Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"occupancyScore\": outputData.occupancyScore,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"addressLine1\",existingRecords.addressMatchRecord.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",existingRecords.addressMatchRecord.postalCode);\r",
													"    pm.variables.set(\"fullName\",existingRecords.addressMatchRecord.fullName);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": {{postalCode}},\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"no\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7041](https://jira.cnvrmedia.net/browse/PID-7041)\n\n&#9724; **NAME:**  Connect realtime request with occupancy score disabled\n\n&#9724; **DESCRIPTION:** \n*\t Real time request's submitted with countryCode = USA enableOccupancyScore = \"no\".\n\n&#9724; **PRECONDITION**\n*\t Record exists with occupancyScore for the input.\n\n&#9724; **EXPECTED RESULT:**\n*\t occupancyScore doesn't get populated in the response.\n\t\n&#9724; **INPUT FIELDS**\n*\t inputRecord.enableOccupancyScore = \"no\"\n\n&#9724; **OUTPUT FIELDS:**\n*     outputRecord.occupancyScore = \" \""
									},
									"response": []
								},
								{
									"name": "realtime-usa > identity >  (PID-8502) > identity - request with address hygiene - when countryCode is given empty or invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8502\",\r",
													"                    sprint: \"21.03.01\",\r",
													"                    subject: \"realtime-usa > identity\",\r",
													"                    tags: \"#realtime#invalidCountryCode#emptyCountryCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = '';\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"INVALID_COUNTRY_CODE\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"INVALID_COUNTRY_CODE\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"countryCode\", 'ZZZ');\r",
													"    pm.variables.set(\"addressLine1\", utils.getRandomDataForField('addressLine1'));\r",
													"    pm.variables.set(\"postalCode\", utils.getRandomDataForField('postalCode'));\r",
													"    pm.variables.set(\"requestType\", 'INVALID_COUNTRY_CODE');\r",
													"}\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"EMPTY_COUNTRY_CODE\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"countryCode\", \"\");\r",
													"    pm.variables.set(\"addressLine1\", utils.getRandomDataForField('addressLine1'));\r",
													"    pm.variables.set(\"postalCode\", utils.getRandomDataForField('postalCode'));   \r",
													"    pm.variables.set(\"requestType\", 'EMPTY_COUNTRY_CODE');     \r",
													"}\r",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"INVALID_COUNTRY_CODE\") {\r",
													"    (function verifyAll_invalidCountryCode() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity with invalid countryCode.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['countryCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['countryCode','isoCode'] });\r",
													"        pm.test(\"(5)- Validate Output > standardizedAddress.isoCode and bestAddress.isoCode comes populated as 'USA' in response\", ()=>{\r",
													"            pm.expect(outputData.countryCode).to.equal(\"USA\");\r",
													"            pm.expect(outputData.isoCode).to.equal(\"USA\");\r",
													"        });\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"EMPTY_COUNTRY_CODE\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"EMPTY_COUNTRY_CODE\") {\r",
													"    (function verifyAll_emptyCountryCode() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity with empty countryCode.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['countryCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['countryCode', 'isoCode'] });\r",
													"        pm.test(\"(5)- Validate Output > standardizedAddress.isoCode and bestAddress.isoCode comes populated as 'USA' in response\", ()=>{\r",
													"            pm.expect(outputData.countryCode).to.equal(\"USA\");\r",
													"            pm.expect(outputData.isoCode).to.equal(\"USA\");\r",
													"        });\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear(); \r",
													"    })();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8502](https://jira.cnvrmedia.net/browse/PID-8502)\n\n&#9724; NAME: identity - request with address hygiene - when countryCode is given empty or invalid\n\n&#9724; DESCRIPTION: Identity-request with address hygiene countryCode is given empty or invalid(example:\"ZZ\",\"ZZZ\")\n\n&#9724; EXPECTED RESULT:\n*  coutryCode is taken as \"USA\" by default.\n*  standardizedAddress -> isoCode comes populated as \"USA\".\n*  bestAddress -> isoCode comes populated as \"USA\".\n\n&#9724; INPUT FIELDS:\n* \"countryCode\" = \"ZZZ\"\nor \n* \"countryCode\" = \" \"\n\n&#9724; OUTPUT FIELDS:\n\n* \"addressHygieneOutput.standardizedAddress.isoCode\" =\"USA\"\n\n* \"addressHygieneOutput.bestAddress.isoCode\" =\"USA\""
									},
									"response": []
								},
								{
									"name": "realtime-usa > name-hygiene > (PID-8382) >Realtime USA request with name hygiene for diacritic names.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName) are provided.\", () =>{\r",
													"        utils.validateIfNonEmpty(inputData.fullName);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  fullName is parsed and givenName, middleName and familyName are coming without diacritic character \", \r",
													"    pm.expect(outputData.givenName +\" \"+ outputData.familyName).to.equal(inputData.fullName.toUpperCase()));\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"fullName=\" + inputData.fullName\r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"  }\r",
													"\r",
													"  this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"givenName=\"+ outputData.givenName +\", \"\r",
													"            +\"middleName=\"+ outputData.middleName +\", \"\r",
													"            +\"familyName=\"+ outputData.familyName\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    //Not applicable\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let testMetadata = {\r",
													"    \"pid\": \"8382\",\r",
													"    \"sprint\": \"21.02.06\",\r",
													"    \"subject\": \"realtime > name-hygiene\",\r",
													"    \"tags\": \"#RealTimeUSA#NameHygiene#DiacriticNames\"\r",
													"};\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":\"Garcia Lopez\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"utils.setMetaData(pm.request, JSON.stringify(testMetadata));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8382](https://jira.cnvrmedia.net/browse/PID-8382)\n\n&#9724; **NAME:** Realtime USA request with name hygiene for diacritic names.\n\n&#9724; **DESCRIPTION:** Realtime-NameHygiene request for USA when fullName that contains diacritical characters(such as spanish or french names)\n\n* Ex:Garcia Lopez\n\n&#9724; **EXPECTED RESULT:**\n\n* fullName gets parsed and givenName,middleName,familyName come populated  with the parsed value in nameHygiene Output.givenName, middleName, familyName come without diacritics character in them.\n\n* Ex: givenName=GARCIA , familyName=LOPEZ.\n\n**INPUT FIELDS:**\n* \"fullName\"\n* \"emailAddress1\"\n\n**OUTPUT FIELDS:**\n* \"individualId\"\n* \"givenName\"\n* \"familyName\""
									},
									"response": []
								},
								{
									"name": "Realtime-usa > name-hygiene > PID-8734 >USRealtime request to validate no name variation in profile when trustedId is provided.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8734\",\r",
													"                    sprint: \"21.03.06\",\r",
													"                    subject: \"realtime\",\r",
													"                    tags: \"#RealTime#Identity#nameVariation#trustedId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"CONSOLIDATION_SCENARIO\";\r",
													"        }\r",
													"})();\r",
													"\r",
													"let requestDetail1 ={\r",
													"    \"url\" : \"10.226.244.229:8080/v2/connect/realtime/service\",\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\": {}\r",
													"};\r",
													"\r",
													"let requestDetail2 ={\r",
													"    \"url\" : \"10.226.244.229:8080/v2/connect/realtime/service\",\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\": {}\r",
													"};\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"CONSOLIDATION_SCENARIO\") {\r",
													"    (function createMatchingRecords() {  \r",
													"        requestDetail1.testerInput = {\r",
													"            \"fullName\": utils.getRandomDataForField(\"fullName\"),\r",
													"            \"emailAddress2\": utils.getRandomDataForField(\"emailAddress1\")\r",
													"        }\r",
													"        requestDetail2.testerInput = {\r",
													"            \"fullName\":\"\",\r",
													"            \"emailAddress1\": utils.getRandomDataForField(\"emailAddress1\")\r",
													"        }\r",
													"        pm.sendRequest(utils.constructIdentityRequest(requestDetail1), (error, response) => {            \r",
													"            let matchRecord1 = utils.getOutputData(response.json());\r",
													"            pm.variables.set(\"matchRecord1\",matchRecord1)\r",
													"            pm.sendRequest(utils.constructIdentityRequest(requestDetail2), (error, response) => {  \r",
													"                let matchRecord2 = utils.getOutputData(response.json());\r",
													"                pm.variables.set(\"matchRecord2\",matchRecord2);\r",
													"                testerInput = {\r",
													"                    \"fullName\":\"\",\r",
													"                    \"emailAddress2\": matchRecord1.emailAddress2,\r",
													"                    \"emailAddress1\": matchRecord2.emailAddress1,\r",
													"                    \"trustedIndividualID\":matchRecord1.individualId\r",
													"                }\r",
													"                utils.setRandomDataForRequest(testerInput);\r",
													"                pm.variables.set(\"trustedIndividualID\", _.max([matchRecord1.individualId,matchRecord2.individualId]));\r",
													"                \r",
													"                \r",
													"            });\r",
													"                \r",
													"        });\r",
													"    })();     \r",
													"    pm.variables.set(\"requestType\", 'CONSOLIDATION_SCENARIO');       \r",
													"}\r",
													"\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"DIFFERENT_ID_SCNEARIO\") { \r",
													"    let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
													"    let testerInput = {\"emailAddress1\": matchRecord1.emailAddress2,\"emailAddress1\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"    pm.variables.set(\"trustedIndividualID\",\"\");\r",
													"    pm.variables.set(\"requestType\", 'DIFFERENT_ID_SCNEARIO');\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//===============================================================================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//===============================================================================================================\r",
													"if(requestType == \"CONSOLIDATION_SCENARIO\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        \r",
													"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
													"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
													"\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Consolidation Scenario for given input.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1','emailAddress2','trustedIndividualID'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'fullName', 'emailAddress1','emailAddress2','consolidatedIds'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName', 'emailAddress1','emailAddress2'],\r",
													"            existingRecords : { \"first prerequest\" : matchRecord1,\"second prerequest\" : matchRecord2} \r",
													"        });\r",
													"        if(matchRecord1.individualId < matchRecord2.individualId){\r",
													"            utils.doTestLogging({msg : \"(6)- Validate Output > Consolidation happens for given input and preRequests.\",\r",
													"         type : \"VALIDATE_CONSOLIDATION\", existingRecords :[matchRecord1, matchRecord2]});\r",
													"        }\r",
													"        else{\r",
													"            pm.test( \"(6)- Validate Output > Consolidation will not happen if first request has higher individualId then second ,[first request individualId = \"+matchRecord1.individualId +\", second request individualId = \" + matchRecord2.individualId+\"]\", () => {\r",
													"                pm.expect((outputData.consolidatedIds).length).to.equal(0);\r",
													"            });\r",
													"        }\r",
													"        \r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
													"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"matchRecord1\",matchRecord1);\r",
													"        pm.variables.set(\"matchRecord2\",matchRecord2);\r",
													"        pm.variables.set(\"requestType\", \"DIFFERENT_ID_SCNEARIO\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//===============================================================================================================\r",
													"if(requestType == \"DIFFERENT_ID_SCNEARIO\") {\r",
													"    (function verifyAll_noMatchFoundRequest() {\r",
													"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
													"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
													"\r",
													"        utils.doTestLogging({msg: \"CASE-2 : \", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['addressLine1', 'postalCode', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'fullName'] });\r",
													"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName', 'emailAddress1'],\r",
													"            existingRecords : { \"first prerequest\" : matchRecord1,\"second prerequest\" : matchRecord2} \r",
													"        });\r",
													"        utils.doTestLogging({msg : \"(5)- Validate Output > New individualId returns in the output.\", type : \"VALIDATE_EXISTING_DIFFINDVID\", existingRecord :matchRecord1});\r",
													"        \r",
													"    })();\r",
													"    \r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"    })();\r",
													"}\r",
													"\r",
													"//=================================================================================================================="
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"\",\r\n        \"addressLine1\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"emailAddress2\": \"{{emailAddress2}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"{{trustedIndividualID}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8734](https://jira.cnvrmedia.net/browse/PID-8734)\n\n◼ NAME:  USRealtime request to validate no name variation in profile when trustedId is provided.\n\n◼ DESCRIPTION:  validate empty name variation when\n- input provided with empty fullName, emailAddress1 and emailAddress2(same as given in pre requests) and trustedId(i.e higher individualId from 2 prerequests).\n\n◼ PRECONDITIONS:\n- Identity-email-match exists for fullName, emailAddress2(which has lower individualId)\n- Identity-email-match exists for empty name, emailAddress1(which has higher individualId)\n\n◼ EXPECTED RESULT :\n1. Smaller individualId comes populated in response.\n2. Remaining individualIds comes populated in the \"consolidatedIds\" list.\n3. profile will not contain empty name variation record, so if other record is sent with same email address as of empty name record new record will be created and new individualId will be returned.\n\n◼ INPUT FIELD:\n\"emailAddress1\"\n\"emailAddress2\"\n◼ OUTPUT FIELD:\n\"individualId\"\n\"consolidations.consolidatedIds\""
									},
									"response": []
								},
								{
									"name": "terminate-realtime-usa",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"realtime-usa\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "realtime-canada",
							"item": [
								{
									"name": "init-realtime-canada",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime-canada > (PID-7948) - Cananda realtime identity-request when short-id enabled for the client profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_SHORTID_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, addressLine1, postalCode) are provided.\", () =>{\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"          utils.validateIfNonEmpty(inputData.fullName);\r",
													"          utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  identityOutput.individualId and identityOutput.householdId should be 13 digit.\", ()=>{ \r",
													"        pm.expect((outputData.individualId).length).to.equal(13);\r",
													"         pm.expect((outputData.householdId).length).to.equal(13);\r",
													"         pm.expect((outputData.addressId).length).to.equal(32);\r",
													"         \r",
													"    //Add the validation for 32 byte\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"fullName=\" + inputData.fullName +\", \"\r",
													"      + \"countryCode=\" + inputData.countryCode\r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"  }\r",
													"\r",
													"  this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"givenName=\"+ outputData.givenName +\", \"\r",
													"            +\"middleName=\"+ outputData.middleName +\", \"\r",
													"            +\"familyName=\"+ outputData.familyName\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    //Not applicable\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7948\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime-canada\",\r",
													"                    tags: \"#RealTime#ClientProfiles#shortIdEnabledForCanadaRT\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"73 State Road 434 E\",\n    \"countryCode\": \"CAN\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"emailAddress2\": \"\",\n    \"familyName\": \"\",\n    \"fullName\": \"Mattie Poquette\",\n    \"gender\": \"{{gender}}\",\n    \"phone1\": \"\",\n    \"phone2\": \"\",\n    \"postalCode\": \"85013\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n},\n    \"serviceConfig\": {\n    \"configAddressHygiene\": {\n        \"enablePac\": \"no\",\n        \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n}}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7948](https://jira.cnvrmedia.net/browse/PID-7948)\n\n&#9724; **NAME:**  Canada Realtime identity-request when short-id enabled for the client profile\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with SHORTID_ENBALED ='Y' in client profile and countryCode as \"CAN\" i.e Canada \n\n&#9724; **PRECONDITION**\n*\t SHORTID_ENBALED ='Y' in the aim_client_profile table with respect to the client code being used\n\n&#9724; **EXPECTED RESULT:**\n*\t householdId and individualId comes populated in 13 digits-form in the output. (example - 2000010267360)\n*\t AddressId in the output is in 32-bytes form (example - a3e4fffa2b7b966658851cdfd6a5a71e)\n\t\n&#9724; **INPUT FIELDS:**\n*    \"fullName\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"householdId\"\n*   \"addressId\""
									},
									"response": []
								},
								{
									"name": "Realtime-canada > identity > (PID-7944) - Identity-request-CAN with fullName containing professional-suffix",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> fullName containing professional-suffix\", () =>{\r",
													"        utils.validateIfNonEmpty(inputData.fullName);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    console.log(outputData)\r",
													"    pm.test(\"Validate output ->  fullname gets populated with the given suffix in the output \", ()=>{\r",
													"        pm.expect(outputData.professionalSuffix).to.equal(\"M.B.A.\")}); \r",
													"    \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"fullName=\" + inputData.fullName+\", \"\r",
													"      + \"countryCode=\" + inputData.countryCode\r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"  }\r",
													"\r",
													"  this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"             +\"givenName=\"+ outputData.givenName +\", \"\r",
													"            +\"middleName=\"+ outputData.middleName +\", \"\r",
													"            +\"familyName=\"+ outputData.familyName +\", \"\r",
													"            +\"professionalSuffix=\"+ outputData.professionalSuffix\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    //Not applicable\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7944\",\r",
													"                    sprint: \"21.01.03\",\r",
													"                    subject: \"realtime-canada\",\r",
													"                    tags: \"#RealTime#NameHygiene#proffessionalSuffixCheck\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":\"Marjory Mastella MBA\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"{{addressLine1}}\",\n    \"countryCode\": \"CAN\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"emailAddress2\": \"\",\n    \"familyName\": \"\",\n    \"fullName\": \"Marjory Mastella MBA\",\n    \"gender\": \"{{gender}}\",\n    \"phone1\": \"{{phone1}}\",\n    \"phone2\": \"\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n},\n    \"serviceConfig\": {\n    \"configAddressHygiene\": {\n        \"enablePac\": \"no\",\n        \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n}}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7944](https://jira.cnvrmedia.net/browse/PID-7944)\n\n&#9724; **NAME:**  Identity-request-CAN with fullName containing professional-suffix\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with a fullName that contains professional suffix.\nExample\n*\t fullName: Marjory Mastella MBA* \n*\t fullName: Marjory Mastella PHD*\t \n\n&#9724; **EXPECTED RESULT:**\n*\t \"professionalSuffix\" gets populated with the given suffix in the output.\n\t\n&#9724; **INPUT FIELDS:**\n*    \"fullName\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"professionalSuffix\""
									},
									"response": []
								},
								{
									"name": "realtime-cananda > name-hygiene > (PID-8383) > Canada Realtime request with name hygiene for diacritic names",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(\"smoke_test\");\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, addressLine1, countryCode, postalCode) are provided.\", () =>{\r",
													"        utils.validateIfNonEmpty(inputData.fullName);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.countryCode);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  fullName is parsed and givenName, middleName and familyName are coming with diacritic character \", ()=>{\r",
													"    pm.expect(outputData.givenName +\" \"+ outputData.familyName).to.not.equal(inputData.fullName.toUpperCase());\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"fullName=\" + inputData.fullName\r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"  }\r",
													"\r",
													"  this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"givenName=\"+ outputData.givenName +\", \"\r",
													"            +\"middleName=\"+ outputData.middleName +\", \"\r",
													"            +\"familyName=\"+ outputData.familyName\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    //Not applicable\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "smoke_test"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "6c3d0df7dfc6b822dc8f9a486f1f3a11"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"9939 N 14th St\",\r\n        \"countryCode\": \"CAN\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"GARCIA LOPEZ\",\r\n        \"gender\": \"M\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"L2J2E2\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"111\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8383](https://jira.cnvrmedia.net/browse/PID-8383)\n\n&#9724; **NAME:** Canada Realtime request with name hygiene for diacritic names.\n\n&#9724; **DESCRIPTION:** Realtime-NameHygiene request for Canada when fullName that contains diacritical characters(such as spanish or french names)\n* Ex:Garcia Lopez\n\n&#9724; **EXPECTED RESULT:**\n\n* fullName gets parsed and givenName,middleName,familyName come populated  with the parsed value in nameHygiene Output .\n\n* givenName,middleName,familyName come without diacritics character in them.\n\n* Ex: givenName=GARCIA , familyName=LOPEZ.\n\n**INPUT FIELDS:**\n* \"fullName\"\n* \"emailAddress1\"\n\n**OUTPUT FIELDS:**\n* \"individualId\"\n* \"givenName\"\n* \"familyName\""
									},
									"response": []
								},
								{
									"name": "terminate-realtime-canada",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"realtime-canada\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "privacy",
							"item": [
								{
									"name": "init-privacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > privacy >  (PID-7281) - real-time-privacy-get request to get by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"let individualId = pm.variables.get(\"individualId\");\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    let inputParams = [\"individualId\"];\r",
													"    utils.validateGETRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"), inputParams);\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attribute individualId is provided.\", () =>{\r",
													"         utils.validateIfNonEmpty(individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  (individualId) of the existing record comes populated.\", ()=>{\r",
													"        pm.expect(outputData.individualId).to.be.not.equal(\"\");\r",
													"    });\r",
													"    pm.test(\"Validate output -> (storedAttributes) of the existing record comes populated.\", () =>{\r",
													"        pm.expect(_.size(outputData.storedAttributes) >= 1).to.be.true;\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"individualId=\" + individualId \r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId + \", \"\r",
													"            +\"names = \" + JSON.stringify(outputData.names) + \", \"\r",
													"            +\"storedAttributes=\" + JSON.stringify(outputData.storedAttributes)\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7281\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > privacy\",\r",
													"                    tags: \"#Privacy#PrivacyAccess#defaultCase\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for individualId match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => { \r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"individualId\", outputData.individualId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "userRequestTransactionId",
												"value": "111",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/byId?individualId={{individualId}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"byId"
											],
											"query": [
												{
													"key": "individualId",
													"value": "{{individualId}}"
												}
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7281](https://jira.cnvrmedia.net/browse/PID-7281)\n\n&#9724; **NAME:**  Real-time-privacy-get request to get by id\n\n&#9724; **DESCRIPTION:** \n*    Real time privacy request is submitted to search by id with individualId as query parameter. \n\n&#9724; **PRECONDITION**\n*\t Identity-record exists for given individualId.\n\n&#9724; **EXPECTED RESULT:**\n*\t Name{givenName, familyName, middleName, generationalSuffix} gets populated in the output\n*\t storedAttributes gets populated in the output.\n\t\n&#9724; **INPUT PARAMETER:**\n*    \"individualId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*   \"names\"\n*   \"storedAttributes\""
									},
									"response": []
								},
								{
									"name": "Realtime > privacy >  (PID-7438) - Validate realtime-privacy-request  when individualId doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"let individualId = pm.variables.get(\"individualId\");\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    let inputParams = [\"individualId\"];\r",
													"    utils.validateGETRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"), inputParams);\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attribute individualId is provided.\", () =>{\r",
													"         utils.validateIfNonEmpty(individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  (individualId) comes populated as empty.\", ()=>{\r",
													"        pm.expect(outputData.individualId).to.be.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"     let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"individualId=\" + individualId \r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId + \", \"\r",
													"            +\"names = \" + JSON.stringify(outputData.names) + \", \"\r",
													"            +\"storedAttributes=\" + JSON.stringify(outputData.storedAttributes)\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7438\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > privacy\",\r",
													"                    tags: \"#Privacy#PrivacyAccess#invalidIndivid\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    pm.variables.set(\"individualId\", _.random(1000000000,9999999999) + \"\");\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "userRequestTransactionId",
												"value": "111",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/byId?individualId=1234564585",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"byId"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "individualId",
													"value": "1234564585"
												}
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7438](https://jira.cnvrmedia.net/browse/PID-7438)\n\n&#9724; **NAME:**  Validate realtime-privacy-request when individualId doesn't exist\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with an individualId that doesn't exists \n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as  200-OK.\n*\t individualId,storedAttributes,names fileds comes populated as empty in the response.\n\t\n&#9724; **INPUT PARAMETER:**\n*    \"individualId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\" = \" \"\n*   \"names\" =[]\n*   \"storedAttributes\" = []"
									},
									"response": []
								},
								{
									"name": "Realtime > privacy > search >  (PID-7353) - real time privacy search request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes(fullName, addressLine1, postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  Identity exists with given fullName, addressLine1,postalCode\", ()=>{\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.addressLine1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.postalCode);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  existing individualId comes populated in the output.\", ()=>{\r",
													"        pm.expect(outputData.individualIds[0].individualId).to.equal(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualIds=\" + JSON.stringify(outputData.individualIds)\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.addressMatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            +\"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 +\", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7353\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > privacy > search\",\r",
													"                    tags: \"#Privacy#PrivacySearch#defaultCase\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generating data for privacy search match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    pm.variables.set(\"userCorrelationId\", outputData.userCorrelationId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"prefixName\": \"\",\r\n    \"givenName\": \"\",\r\n    \"middleName\": \"\",\r\n    \"familyName\": \"\",\r\n    \"generationalSuffix\": \"\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"companyName\": \"\",\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"addressLine2\": \"\",\r\n    \"addressLine3\": \"\",\r\n    \"addressLine4\": \"\",\r\n    \"locality1\": \"\",\r\n    \"locality2\": \"\",\r\n    \"locality3\": \"\",\r\n    \"region1\": \"\",\r\n    \"region2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddresses1\": \"\",\r\n    \"emailAddresses2\": \"\",\r\n    \"emailAddresses3\": \"\",\r\n    \"phone1\": \"\",\r\n    \"phone2\": \"\",\r\n    \"phone3\": \"\",\r\n    \"digitalKeys1\": \"\",\r\n    \"digitalKeys2\": \"\",\r\n    \"digitalKeys3\": \"\",\r\n    \"digitalKeys4\": \"\",\r\n    \"digitalKeys5\": \"\",\r\n    \"digitalKeys6\": \"\",\r\n    \"digitalKeys7\": \"\",\r\n    \"digitalKeys8\": \"\",\r\n    \"digitalKeys9\": \"\",\r\n    \"digitalKeys10\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"trustedBusinessID\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/search",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"search"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7353](https://jira.cnvrmedia.net/browse/PID-7353)\n\n&#9724; **NAME:**  Real time privacy search request\n\n&#9724; **DESCRIPTION:** \n*    Real time privacy search request is submitted with payload.\n\n&#9724; **PRECONDITION**\n*\t Matching identity-record exist w.r.t input  in given payload.\n\n&#9724; **EXPECTED RESULT:**\n*\t individualIds comes populated with list of individualId(s) for the matching identities.\n\t\n&#9724; **INPUT PARAMETER:**\n*    \"fullName\"\n*    \"addressLine1\"\n*    \"postalCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualIds\""
									},
									"response": []
								},
								{
									"name": "Realtime > privacy >  delete >(PID-7283) - real-time-privacy-delete request to delete by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"let individualId = pm.variables.get(\"individualId\");\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    let inputParams = [\"individualId\"];\r",
													"    utils.validateDELETERequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"), inputParams);\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attribute individualId is provided.\", () =>{\r",
													"         utils.validateIfNonEmpty(individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  The record with given individualId gets deleted.\", ()=>{\r",
													"        pm.expect(outputData.deleteDateTime).to.be.not.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay = \r",
													"     \"[\"\r",
													"      + \"individualId=\" + individualId \r",
													"      +\"]\";\r",
													"      return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"deleteDateTime=\" + outputData.deleteDateTime \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7283\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime > privacy > delete\",\r",
													"                    tags: \"#Privacy#PrivacyDelete#defaultCase\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for privacy individualId match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => { \r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"individualId\", outputData.individualId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "userRequestTransactionId",
												"value": "111",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/byId?individualId={{individualId}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"byId"
											],
											"query": [
												{
													"key": "individualId",
													"value": "{{individualId}}"
												}
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7283](https://jira.cnvrmedia.net/browse/PID-7283)\n\n&#9724; **NAME:**  Real time privacy request to delete by id\n\n&#9724; **DESCRIPTION:** \n*    Real time privacy request is submitted to delete by id with individualId as query parameter. \n\n&#9724; **PRECONDITION**\n*\t Identity-record exists for given individualId.\n\n&#9724; **EXPECTED RESULT:**\n*\t deleteDateTime field gets populated in the output\n\t\n&#9724; **INPUT PARAMETER:**\n*    \"individualId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"deleteDateTime\""
									},
									"response": []
								},
								{
									"name": "Realtime > privacy > validation > (PID-7440) - Validate realtime-privacy-request when  tried with invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    let inputParams = [\"individualId\"];\r",
													"    utils.validateGETRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"), inputParams);\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate input -> required (individualId) is provided as parameter\", ()=>{\r",
													"        utils.validateIfNonEmpty(pm.variables.get(\"individualId\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> errorMessage comes populated as (accessToken is invalid).\", ()=>{\r",
													"        pm.expect(outputData.errorMessage).to.contains(\"accessToken is invalid\")\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + JSON.stringify(outputData.errorMessage) +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7440\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > privacy > validation\",\r",
													"                    tags: \"#Privacy#PrivacyAccess#invalidAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for privacy individualId match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"individualId\", outputData.individualId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "123456"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/byId?individualId={{individualId}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"byId"
											],
											"query": [
												{
													"key": "individualId",
													"value": "{{individualId}}"
												}
											]
										},
										"description": "&#9724;**JIRA -**  https://jira.cnvrmedia.net/browse/PID-7440\n\n&#9724;**NAME:** Validate realtime-privacy-request when  tried with invalid access token\n\n&#9724;**DESCRIPTION:** Realtime-privacy-request's made with invalid access token in the header (example - accessToken : xyz)\n\n&#9724;**EXPECTED RESULT:**\n*  Response status comes as \"403-FORBIDDEN\".\n* This shows error as \"ErrorMessage: accessToken is invalid.\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > privacy > validation > (PID-7441) - Validate realtime-privacy-request when  tried with no access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    let inputParams = [\"individualId\"];\r",
													"    utils.validateGETRequestWithNoAccessToken(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"), inputParams);\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate input -> required (individualId) is provided as parameter\", ()=>{\r",
													"       utils.validateIfNonEmpty(pm.variables.get(\"individualId\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> errorMessage comes populated as (accessToken must be provided).\", ()=>{\r",
													"        pm.expect(outputData.errorMessage).to.contains(\"accessToken must be provided\")\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + JSON.stringify(outputData.errorMessage) +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7441\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > privacy > validation\",\r",
													"                    tags: \"#Privacy#PrivacyAccess#blankAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for privacy individualId match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"individualId\", outputData.individualId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": ""
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/byId?individualId={{individualId}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"byId"
											],
											"query": [
												{
													"key": "individualId",
													"value": "{{individualId}}"
												}
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7441](https://jira.cnvrmedia.net/browse/PID-7441)\n\n&#9724; **NAME:**  Validate realtime-privacy-request request when tried with no access token\n\n&#9724; **DESCRIPTION:** \n*    Realtime-privacy-request made with no access token in the header i.e accessToken header as empty.\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"403-FORBIDDEN\".\n*\t This shows error as ErrorMessage: AccessToken must be provided.\n\t\n&#9724; **HEADER FIELDS**\n*    \"accessToken\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > privacy > validation > (PID-7282) - Validate realtime-privacy-request when access token gets expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateForbiddenResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    let inputParams = [\"individualId\"];\r",
													"    utils.validateGETRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"), inputParams);\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate input -> required (individualId) is provided as parameter\", ()=>{\r",
													"        utils.validateIfNonEmpty(pm.variables.get(\"individualId\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    // pm.test(\"Validate output -> errorMessage comes populated as (accessToken is expired).\", ()=>{\r",
													"    //     pm.expect(outputData.errorMessage).to.contains(\"accessToken is expired\")\r",
													"    // });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + JSON.stringify(outputData.errorMessage) +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7282\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > privacy > validation\",\r",
													"                    tags: \"#Privacy#PrivacyAccess#expiredAccessToken\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for privacy individualId match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"individualId\", outputData.individualId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "eyJraWQiOiIwTVhBQWpCdkFrODk0TEExRGNtWWNTbmw1YXJSbldXeWRVYTFFRUVCX2NjIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjEyOTBYVzB5cGpQU2xfMmV0NjBXa2NVWE5zWmpkWVZYZXd4OFcxSXJ0SkkiLCJpc3MiOiJodHRwczovL2Vwc2lsb25jbGllbnQub2t0YXByZXZpZXcuY29tL29hdXRoMi9hdXN2MzI1bTJ2QXVUbkV5eDBoNyIsImF1ZCI6IkNvbm5lY3QiLCJpYXQiOjE2MjY4NjMwMzksImV4cCI6MTYyNjg2NjYzOSwiY2lkIjoiMG9hdmlyd2d5bTlnMDFzaXgwaDciLCJzY3AiOlsiYXBpOmludm9rZSJdLCJzdWIiOiIwb2F2aXJ3Z3ltOWcwMXNpeDBoNyJ9.M6rsryrbg8eKcK5VknNT1Gyl1qSoDPe73rVyjK_j7SY4t6HpLhRUu-cYJxTZvLytIxUuNpsi0Z189AJP2ZXP9KAiAkQZPsOtr79OUO91tXrMR4CaOGsSmm_8sOXevR2lLtz5tHvG-jbc466R6UG6TI4lBSxCtioPcsreGPAI2Utzbt8QBL-RV0b7frct2theMI4a37n2qtrxCLrKZg-VYAuvXPzrc0EuhPTCVQ8O3aVxkLk02Jf93Wc6mdpi2yoVsbdmKLei2tJWky7Tdhc-I3e9LPX9TMn5C-Txi3HRB030VQXPGN0HcYddqUzrjug0jfDV3mwAYitF-95w_va1uw"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/byId?individualId={{individualId}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"byId"
											],
											"query": [
												{
													"key": "individualId",
													"value": "{{individualId}}"
												}
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7282](https://jira.cnvrmedia.net/browse/PID-7282)\n\n&#9724; **NAME:**  Validate realtime-privacy-request when access token gets expired\n\n&#9724; **DESCRIPTION:** \n*    Identity-request's made with an access token  i.e expired. (header - accessToken)\n\n&#9724; **PRECONDITION**\n*\t Access token used for accessToken header is an expired token that's generated earlier.\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"403-FORBIDDEN\".\n*\t This shows error as ErrorMessage: AccessToken is expired.\n\t\n&#9724; **HEADER FIELDS**\n*    \"accessToken\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > privacy > validation > (PID-7439) - Validate realtime-privacy-request  when clientCode is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    let inputParams = [\"individualId\"];\r",
													"    utils.validateGETRequest(pm.variables.get(\"CCODE_INVALID\"), inputParams);\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate input -> required (individualId) is provided as parameter\", ()=>{\r",
													"        utils.validateIfNonEmpty(pm.variables.get(\"individualId\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> errorMessage comes populated as (Client code invalid).\", ()=>{\r",
													"        pm.expect(outputData.errorMessage).to.contains(\"Client code invalid\")\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + JSON.stringify(outputData.errorMessage) +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7282\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > privacy > validation\",\r",
													"                    tags: \"#Privacy#PrivacyAccess#invalidClientCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"pm.variables.set(\"CCODE_INVALID\", \"smoke_test123\");\r",
													"pm.variables.set(\"XAPIKEY_INVALID\", \"6c3d0df7dfc6b822dc8f9a486f1f3a11\");\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for privacy individualId match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"individualId\", outputData.individualId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_INVALID}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_INVALID}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/byId?individualId={{individualId}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"byId"
											],
											"query": [
												{
													"key": "individualId",
													"value": "{{individualId}}"
												}
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7439](https://jira.cnvrmedia.net/browse/PID-7439)\n\n&#9724; **NAME:**  Validate realtime-privacy-request  when clientCode is invalid\n\n&#9724; **DESCRIPTION:** \n*    Realtime privacy/byId request's made with an invalid value for clientCode header\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"400-BAD REQUEST\"\n*\t This shows error as ErrorMessage: Client code invalid\n\t\n&#9724; **HEADER FIELDS**\n*    \"clientCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > privacy > validation > (PID-7447) - Validate realtime-privacy-search-request  when clientCode is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let outputData = JSON.parse(responseBody); // changed\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.variables.get(\"CCODE_INVALID\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes(fullName, addressLine1, postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> errorMessage comes populated as (Client code invalid).\", ()=>{\r",
													"        pm.expect(outputData.errorMessage).to.contains(\"Client code invalid\")\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + JSON.stringify(outputData.errorMessage) +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7447\",\r",
													"                    sprint: \"Q3-2020\",\r",
													"                    subject: \"realtime > privacy > validation\",\r",
													"                    tags: \"#Privacy#PrivacyAccess#invalidClientCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"pm.variables.set(\"CCODE_INVALID\", \"smoke_test123\");\r",
													"pm.variables.set(\"XAPIKEY_INVALID\", \"6c3d0df7dfc6b822dc8f9a486f1f3a11\");\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for privacy individualId match\"\r",
													"        \r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    pm.variables.set(\"userCorrelationId\", outputData.userCorrelationId);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_INVALID}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_INVALID}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"prefixName\": \"\",\r\n    \"givenName\": \"\",\r\n    \"middleName\": \"\",\r\n    \"familyName\": \"\",\r\n    \"generationalSuffix\": \"\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"companyName\": \"\",\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"addressLine2\": \"\",\r\n    \"addressLine3\": \"\",\r\n    \"addressLine4\": \"\",\r\n    \"locality1\": \"\",\r\n    \"locality2\": \"\",\r\n    \"locality3\": \"\",\r\n    \"region1\": \"\",\r\n    \"region2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddresses1\": \"\",\r\n    \"emailAddresses2\": \"\",\r\n    \"emailAddresses3\": \"\",\r\n    \"phone1\": \"\",\r\n    \"phone2\": \"\",\r\n    \"phone3\": \"\",\r\n    \"digitalKeys1\": \"\",\r\n    \"digitalKeys2\": \"\",\r\n    \"digitalKeys3\": \"\",\r\n    \"digitalKeys4\": \"\",\r\n    \"digitalKeys5\": \"\",\r\n    \"digitalKeys6\": \"\",\r\n    \"digitalKeys7\": \"\",\r\n    \"digitalKeys8\": \"\",\r\n    \"digitalKeys9\": \"\",\r\n    \"digitalKeys10\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"trustedBusinessID\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/privacy/search",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"privacy",
												"search"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7447](https://jira.cnvrmedia.net/browse/PID-7447)\n\n&#9724; **NAME:**  Validate realtime-privacy-search-request  when clientCode is invalid\n\n&#9724; **DESCRIPTION:** \n*    Realtime privacy/search request's made with an invalid value for clientCode header\n\n&#9724; **EXPECTED RESULT:**\n*\t Response status comes as \"400-BAD REQUEST\"\n*\t This shows error as ErrorMessage: Client code invalid\n\t\n&#9724; **HEADER FIELDS**\n*    \"clientCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "terminate-privacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"privacy\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "client-profile",
							"item": [
								{
									"name": "init-client-profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > client-profile > (PID-7840) - Realtime request when the client POD is inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_DISABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    // Not Applicable.\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> response comes with error message as - 'Client profile is not active.'\", ()=>{\r",
													"        pm.expect(outputData.errorMessage).to.equal(\"Client code invalid\");\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    // Not Applicable\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not applicable\r",
													"};\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7840\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > client-profile\",\r",
													"                    tags: \"#RealTime#ClientProfiles#clientPodIsInactive\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													" \r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_INACTIVE}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_INACTIVE}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n  },\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"no\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7840](https://jira.cnvrmedia.net/browse/PID-7840)\n\n&#9724; **NAME:**  Realtime request when the client POD is inactive\n\n&#9724; **DESCRIPTION:** \n*    Realtime request's submitted with clientCode header for which the client profile is in \"inactive\" state(Status=I)\n\n&#9724; **PRECONDITION**\n*\t \"STATUS\" = \"I\" in aim_client_profile table for the client code.\n\n&#9724; **EXPECTED RESULT:**\n*\t Returns response with status 400 -BAD REQUEST\n*\t It displays error message as \"Client code invalid\"\n\t\n&#9724; **HEADER FIELDS**\n*    \"clientCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > client-profile > (PID-7842) - Realtime request when the client POD is disabled for \"identity\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputRecord = JSON.parse(pm.request.body).inputRecord;\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateBadRequestResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_DISABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  identity record exists w.r.t input\", ()=>{ \r",
													"            utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> response comes with error message as - 'Client pod is not active.'\", ()=>{\r",
													"        pm.expect(outputData.errorMessage).to.equal(\"Client pod is not active.\");\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"    let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"serviceConfig.enableIdentity=\" + inputData.serviceConfig.enableIdentity + \", \"\r",
													"    + \"addressLine1=\" + inputRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputRecord.postalCode + \", \"\r",
													"        + \"fullName=\" + inputRecord.fullName  \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"errorMessage=\" + outputData.errorMessage\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.addressMatchRecord;\r",
													"    let existingDataToDisplay = \"identity record exists : [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 + \", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode + \", \"\r",
													"            + \"fullName=\" + existingDataRecord.fullName\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7842\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > client-profile\",\r",
													"                    tags: \"#RealTime#ClientProfiles#disabledEnableIdentity\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"enableIdentity\": \"yes\",\"phone1\":\"\",\"emailAddress1\":\"\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for identity record match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableIdentity\": \"yes\",\"phone1\":\"\",\"emailAddress1\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"addressLine1\": getPreRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest1Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"addressLine1\",existingRecords.addressMatchRecord.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",existingRecords.addressMatchRecord.postalCode);\r",
													"    pm.variables.set(\"fullName\",existingRecords.addressMatchRecord.fullName);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_DISABLED}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_DISABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7842](https://jira.cnvrmedia.net/browse/PID-7842)\n\n&#9724; **NAME:**  Realtime request when the client POD is disabled for \"identity\"\n\n&#9724; **DESCRIPTION:** \n*    Realtime request's is made with a clientCode in header w.r.t which the enableIdentity is disabled in  client profile i.e EnableIdentity = \"N\"\n\n&#9724; **PRECONDITION**\n*\t EnableIdentity = \"N\" for the the client profile in aim_cleint_profiles table w.r.t the clientCode(header) being used.\n\n&#9724; **EXPECTED RESULT:**\n*\t Returns response with status 400 -BAD REQUEST\n*\t It displays error message as \"Client Pod is not active.\"\n\t\n&#9724; **INPUT FIELDS**\n*    inputRecord.EnableIdentity =\"N\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\""
									},
									"response": []
								},
								{
									"name": "Realtime > client-profile > (PID-7889) -Identity request when identity is disabled in the request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" //INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputRecord = JSON.parse(pm.request.body).inputRecord;\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate input -> required attribute serviceConfig.enableIdentity given with value 'Yes'\", ()=>{\r",
													"        pm.expect(inputData.serviceConfig.enableIdentity.toUpperCase()).to.equal(\"NO\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  identity record exists w.r.t input\", ()=>{ \r",
													"            utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> response comes with empty identity details such as individualId\", ()=>{\r",
													"        utils.validateIfEmpty(outputData.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"serviceConfig.enableIdentity=\" + inputData.serviceConfig.enableIdentity + \", \"\r",
													"    + \"addressLine1=\" + inputRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputRecord.postalCode + \", \"\r",
													"        + \"fullName=\" + inputRecord.fullName  \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\" +\r",
													"        \"addressLine1=\" + outputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + outputData.postalCode + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"individualId=\" + outputData.individualId\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.addressMatchRecord;\r",
													"    let existingDataToDisplay = \"identity record exists : [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 + \", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode + \", \"\r",
													"            + \"fullName=\" + existingDataRecord.fullName\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7889\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > client-profile\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enabledIdentityValidation\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"enableIdentity\": \"yes\",\"phone1\":\"\",\"emailAddress1\":\"\"}; \r",
													"    getPreRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"        \"data\": getPreRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for identity record match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableIdentity\": \"no\",\"phone1\":\"\",\"emailAddress1\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"addressLine1\": getPreRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": getPreRequest1Data.inputRecord.postalCode,\r",
													"            \"fullName\": getPreRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"addressLine1\",existingRecords.addressMatchRecord.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",existingRecords.addressMatchRecord.postalCode);\r",
													"    pm.variables.set(\"fullName\",existingRecords.addressMatchRecord.fullName);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"inputRecord\": {\n    \"addressLine1\": \"{{addressLine1}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"familyName\": \"\",\n    \"fullName\": \"{{fullName}}\",\n    \"gender\": \"{{gender}}\",\n    \"phone1\": \"{{phone1}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n  },\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableIdentity\": \"{{enableIdentity}}\",\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableGlobalSuppression\": \"no\",\n    \"enableOccupancyScore\": \"no\",\n    \"enableTspAppend\": \"no\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7889](https://jira.cnvrmedia.net/browse/PID-7889)\n\n&#9724; **NAME:**  Identity request when identity is disabled in the request \n\n&#9724; **DESCRIPTION:** \n*    Identity request's made with required payload and identity disabled in the request i.e serviceConfiguration -> enableIdentity = \"no\"\n\n&#9724; **PRECONDITION**\n*   Identity-match exists for the given input fullName, addressLine1, postalCode\n*    enableIdentity = \"Y\" for the the client profile in \"aim_cleint_profiles\" table w.r.t the clientCode(header) being used.\n\n&#9724; **EXPECTED RESULT:**\n*   Response comes with status 200-OK\n*   No identity-detail gets populated in the response\n\t\n&#9724; **INPUT FIELDS**\n*    inputRecord.enableIdentity =\"N\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"=\"\""
									},
									"response": []
								},
								{
									"name": "terminate-client-profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"client-profile\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "shortid",
							"item": [
								{
									"name": "init-shortid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > short-id > (PID-7844) - Identity-request when short-id enabled for the client profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_SHORTID_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> attributes(fullName, addressLine1, emailAddress1, postalCode, phone1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> 13 digit ids for individualId and householdId comes populated in the identity-output\", () =>{\r",
													"        pm.expect((outputData.individualId).length).to.equal(13);\r",
													"        pm.expect((outputData.householdId).length).to.equal(13);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    + \"phone1=\" + inputData.phone1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"identityOutput.individualId=\" + outputData.individualId +\", \"\r",
													"            +\"identityOutput.bestIdentity.householdId=\" + outputData.householdId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7844\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > short-id\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enabledShortId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"{{gender}}\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7844](https://jira.cnvrmedia.net/browse/PID-7844)\n\n&#9724; **NAME:**  Identity-request when short-id enabled for the client profile\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with SHORTID_ENBALED ='Y' in client profile\n\n&#9724; **PRECONDITION**\n*\t SHORTID_ENBALED ='Y' in the aim_client_profile table with respect to the client code being used\n\n&#9724; **EXPECTED RESULT:**\n*\t householdId and individualId comes populated in 13 digits-form in the output. (example - 2000010267360)\n*\t addressId in the output is in 32-bytes form (example - a3e4fffa2b7b966658851cdfd6a5a71e).\n\t\n&#9724; **INPUT FIELDS**\n*    inputRecord.SHORTID_ENBALED =\"Y\"\n\n&#9724; **OUTPUT FIELDS:**\n*   identityOutput.individualId in the response is of 13 digits"
									},
									"response": []
								},
								{
									"name": "Realtime > short-id > (PID-7845) - Identity-request when short-id's disabled for the client profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_SHORTID_DISABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> attributes(fullName, addressLine1, emailAddress1, postalCode, phone1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> individualId and householdId comes populated in the identity-output - with both Id's having long ids\", () =>{\r",
													"        pm.expect((outputData.individualId).length).to.greaterThan(13);\r",
													"        pm.expect((outputData.householdId).length).to.greaterThan(13);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    + \"phone1=\" + inputData.phone1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"identityOutput.individualId=\" + outputData.individualId +\", \"\r",
													"            +\"identityOutput.bestIdentity.householdId=\" + outputData.householdId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    // Not Applicable\r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7845\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > short-id\",\r",
													"                    tags: \"#RealTime#ClientProfiles#disabledShortId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_DISABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_DISABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"{{gender}}\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7845](https://jira.cnvrmedia.net/browse/PID-7845)\n\n&#9724; **NAME:**  Identity-request when short-id disabled for the client profile\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with SHORTID_ENBALED ='N' in client profile\n\n&#9724; **PRECONDITION**\n*\t SHORTID_ENBALED ='N' in the aim_client_profile table with respect to the client code being used\n\n&#9724; **EXPECTED RESULT:**\n*\t householdId and individualId comes populated in long-form in the output. (example - 16134573690659611306799)\n\t\n&#9724; **INPUT FIELDS**\n*    inputRecord.SHORTID_ENBALED =\"Y\"\n\n&#9724; **OUTPUT FIELDS:**\n*   identityOutput.individualId in response is more than 13 digit"
									},
									"response": []
								},
								{
									"name": "Realtime > short-id > (PID-7881) - Identity-request with shortid enabled for client profile - enhancing profile with email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"           \r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_SHORTID_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName,addressLine1, emailAddress1, postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> (fullName, addressLine1, postalCode,phone1) exists \", ()=>{\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.addressLine1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.postalCode);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.phone1);\r",
													"    });\r",
													"    pm.test(\"Validate existing -> individualId(13-digit-id) exists\", () =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect((existingRecords.addressMatchRecord.individualId).length).to.equal(13);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  existing 13-digit individualId and household comes populated in the output.\", ()=>{\r",
													"        pm.expect((outputData.individualId).length).to.equal(13);\r",
													"        pm.expect((outputData.householdId).length).to.equal(13);\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(outputData.householdId).to.equal(existingRecords.addressMatchRecord.householdId);    \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    + \"phone1=\" + inputData.phone1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"householdId=\" + outputData.householdId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"emailAddress1=\" + outputData.emailAddress1 +\", \"\r",
													"            +\"phone1=\" + outputData.phone1 +\", \"\r",
													"            +\"postalCode=\" + outputData.postalCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.addressMatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            +\"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 +\", \"\r",
													"            + \"phone1=\" + existingDataRecord.phone1 +\", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7881\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > short-id\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enableShortIdCheckProfileEnhancement\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\"}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_SHORTID_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_SHORTID_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"householdId\": outputData.householdId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"phone1\": outputData.phone1,\r",
													"            \"postalCode\": outputData.postalCode\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    pm.variables.set(\"phone1\", outputData.phone1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"{{gender}}\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7881](https://jira.cnvrmedia.net/browse/PID-7881)\n\n&#9724; **NAME:**  Identity-request with shortid enabled for client profile - enhancing profile with email\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with  emailAddress1, addressLine1,fullName, phone1 input\n\n&#9724; **PRECONDITION**\n*\t SHORTID_ENBALED ='Y' in the aim_client_profile table with respect to the client code being used\n*\t Identity match exists for input (fullName + phone1 + addressLine1)\n\n&#9724; **EXPECTED RESULT:**\n*\t Existing identity-record gets updated with additional attribute emailAddress1\n*\t Existing identity detail gets returned in the output.\n*\t individualId comes populated in 13-digit-form in the output. (example - 1000009918110)\n\t\n&#9724; **INPUT FIELDS**\n*    inputRecord.SHORTID_ENBALED =\"Y\"\n\n&#9724; **OUTPUT FIELDS:**\n*   identityOutput.individualId comes in \"13 digit\" in response"
									},
									"response": []
								},
								{
									"name": "Realtime > short-id > (PID-7882) - Identity-request with shortid enabled for client profile - enhancing profile with phone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"           \r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_SHORTID_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName,addressLine1, phone1, emailAddress1,postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> (fullName, addressLine1, postalCode,emailAddress1) exists \", ()=>{\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.addressLine1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.postalCode);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.emailAddress1);\r",
													"    });\r",
													"    pm.test(\"Validate existing -> individualId(13-digit-id) exists\", () =>{\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect((existingRecords.addressMatchRecord.individualId).length).to.equal(13);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  existing 13-digit individualId and household comes populated in the output.\", ()=>{\r",
													"        pm.expect((outputData.individualId).length).to.equal(13);\r",
													"        pm.expect((outputData.householdId).length).to.equal(13);\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(outputData.householdId).to.equal(existingRecords.addressMatchRecord.householdId);    \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    + \"phone1=\" + inputData.phone1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"householdId=\" + outputData.householdId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"emailAddress1=\" + outputData.emailAddress1 +\", \"\r",
													"            +\"phone1=\" + outputData.phone1 +\", \"\r",
													"            +\"postalCode=\" + outputData.postalCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.addressMatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            +\"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 +\", \"\r",
													"            + \"emailAddress1=\" + existingDataRecord.emailAddress1 +\", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7882\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > short-id\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enableShortIdCheckProfileEnhancement\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\" : \"\"};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"phone1\":\"\"}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_SHORTID_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_SHORTID_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"householdId\": outputData.householdId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"postalCode\": outputData.postalCode\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"{{gender}}\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7882](https://jira.cnvrmedia.net/browse/PID-7882)\n\n&#9724; **NAME:**  Identity-request with shortid enabled for client profile - enhancing profile with phone\n\n&#9724; **DESCRIPTION:** \n*    Identity request's submitted with  emailAddress1, fullName, phone1 input\n\n&#9724; **PRECONDITION**\n*\t SHORTID_ENBALED ='Y' in the aim_client_profile table with respect to the client code being used\n*\t Identity match exists for input (fullName + emailAddress1)\n\n&#9724; **EXPECTED RESULT:**\n*\t Existing identity-record gets updated with additional attribute phone1\n*\t Existing identity detail gets returned in the output.\n*\t householdId and individualId comes populated in 13-digit-form in the output. (example - 1000009918110)\n\t\n&#9724; **INPUT FIELDS**\n*    inputRecord.SHORTID_ENBALED =\"Y\"\n\n&#9724; **OUTPUT FIELDS:**\n*   identityOutput.individualId comes in \"13 digit\" in response"
									},
									"response": []
								},
								{
									"name": "Realtime > short-id > (PID-7883) - Identity-request with shortid enabled for client profile - getting consolidated ids when multiple match-identity found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_SHORTID_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName,addressLine1, emailAddress1,phone1, postalCode) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(inputData.phone1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> (fullName, addressLine1, postalCode) exists with 13-digit individualId and householdId\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.addressLine1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.postalCode);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"\r",
													"        pm.expect((existingRecords.addressMatchRecord.individualId).length).to.equal(13);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.householdId);\r",
													"        pm.expect((existingRecords.addressMatchRecord.householdId).length).to.equal(13);\r",
													"    });\r",
													"    pm.test(\"Validate existing -> (fullName, emailAddress1, phone1), exists with 13-digit individualId\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.emailPhoneMatchRecord.fullName);\r",
													"        utils.validateIfNonEmpty(existingRecords.emailPhoneMatchRecord.emailAddress1);\r",
													"        utils.validateIfNonEmpty(existingRecords.emailPhoneMatchRecord.phone1);\r",
													"\r",
													"        utils.validateIfNonEmpty(existingRecords.emailPhoneMatchRecord.individualId);\r",
													"        pm.expect((existingRecords.emailPhoneMatchRecord.individualId).length).to.equal(13);\r",
													"    });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output -> existing 13-digit individualId and householdId comes populated in the output.\", () => {\r",
													"        pm.expect((outputData.individualId).length).to.equal(13);\r",
													"        pm.expect((outputData.householdId).length).to.equal(13);\r",
													"        pm.expect(outputData.householdId).to.equal(existingRecords.addressMatchRecord.householdId);\r",
													"    });\r",
													"    pm.test(\"Validate output -> existing 13-digit individualId comes populated is minimum of the 2 existing individualIds\", ()=>{\r",
													"        pm.expect(outputData.individualId).to.equal(_.min([existingRecords.addressMatchRecord.individualId,\r",
													"            existingRecords.emailPhoneMatchRecord.individualId]));\r",
													"    })\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"phone1=\" + inputData.phone1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"householdId=\" + outputData.householdId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"addressLine1=\" + outputData.addressLine1 + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"phone1=\" + outputData.phone1 + \", \"\r",
													"        + \"postalCode\" + outputData.postalCode\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"fullName=\" + existingDataRecord.addressMatchRecord.fullName + \", \"\r",
													"        + \"individualId=\" + existingDataRecord.addressMatchRecord.individualId + \", \"\r",
													"        + \"householdId=\" + existingDataRecord.addressMatchRecord.householdId + \", ||\"\r",
													"        + \"fullName=\" + existingDataRecord.emailPhoneMatchRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + existingDataRecord.emailPhoneMatchRecord.emailAddress1 + \", \"\r",
													"        + \"phone1=\" + existingDataRecord.emailPhoneMatchRecord.phone1 + \", \"\r",
													"        + \"individualId=\" + existingDataRecord.emailPhoneMatchRecord.individualId + \", \"\r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7883\",\r",
													"                    sprint: \"21.01.01\",\r",
													"                    subject: \"realtime > short-id\",\r",
													"                    tags: \"#RealTime#ClientProfiles#enableShortIdCheckConsolidationIds\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = { \"addressMatchRecord\": \"\", \"emailPhoneMatchRecord\": \"\"};\r",
													"let commonFullName = utils.getFullName();\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = { \"fullName\": commonFullName, \"phone1\": \"\", \"emailAddress1\": \"\" };\r",
													"    let requestDetail = {\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_SHORTID_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_SHORTID_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = { \"fullName\": commonFullName, \"addressLine1\": \"\", \"postalCode\": \"\" };\r",
													"    let requestDetail = {\r",
													"        \"clientCode\":pm.environment.get(\"CCODE_SHORTID_ENABLED\"),\r",
													"        \"apiKey\":  pm.environment.get(\"XAPIKEY_SHORTID_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"        \"fullName\": outputData.fullName,\r",
													"        \"addressLine1\": outputData.addressLine1,\r",
													"        \"postalCode\": outputData.postalCode,\r",
													"        \"individualId\": outputData.individualId,\r",
													"        \"householdId\": outputData.householdId\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"        \"fullName\": outputData.fullName,\r",
													"        \"emailAddress1\": outputData.emailAddress1,\r",
													"        \"phone1\": outputData.phone1,\r",
													"        \"individualId\": outputData.individualId\r",
													"    };\r",
													"    existingRecords.emailPhoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"}\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"phone1\", outputData.phone1);\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"utils.submitPostRequest(this, getPreRequest1(), \"preRequest1\");\r",
													"utils.submitPostRequest(this, getPreRequest2(), \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_SHORTID_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_SHORTID_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"{{gender}}\",\n        \"phone1\": \"{{phone1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessID\": \"\",\n        \"trustedIndividualID\": \"\",\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"enableIdentity\": \"Yes\",\n        \"enableAddressHygiene\": \"Yes\",\n        \"enableEmailHygiene\": \"Yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableOccupancyScore\": \"no\",\n        \"enableTspAppend\": \"no\"\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7883](https://jira.cnvrmedia.net/browse/PID-7883)\n\n&#9724; **NAME:**   Identity-request with shortid enabled for client profile - getting consolidated ids when multiple match-identity found\n\n&#9724; **DESCRIPTION:** \n*    Verify Match back and Enhancement of the profile with additional attributes.\n\n&#9724; **PRECONDITION**\n*\t Use the same payload that has been used for creating the short ID's.\n*\t Use same name, same address, same email and same phone\n\n&#9724; **EXPECTED RESULT:**\n*\t The response is 200 and gives match back record for householdId\n*\t Lowest ID should be assigned to individualId.\n*\t In the response consolidatedIds displays all associated ID's in the section\n\t\n&#9724; **INPUT FIELDS**\n*    inputRecord.SHORTID_ENBALED =\"Y\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"householdId\""
									},
									"response": []
								},
								{
									"name": "terminate-shortid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"shortid\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "filterkeys",
							"item": [
								{
									"name": "init-filterkeys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8244) - Identity-request with 'filterKeys1' when identity-match found without given filterKeys1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\")); \r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attribute (fullName, emailAddress1, filterKeys1) are given in input.\", ()=>{\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => { \r",
													"    pm.test(\"Validate Existing -> identity-record exists with empty (filterKeys1) and same (fullName, emailAddress1).\",()=>{\r",
													"        utils.validateIfNonEmpty(existingRecords.emptyFkey1MatchRecord.individualId);\r",
													"        pm.expect(existingRecords.emptyFkey1MatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.emptyFkey1MatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        pm.expect(existingRecords.emptyFkey1MatchRecord.filterKeys1).to.equal(\"\");\r",
													"    }); \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  The newly generated individualId comes populated in the response.\",()=>{\r",
													"        pm.expect(outputData.individualId).to.not.equal(existingRecords.emptyFkey1MatchRecord.individualId);\r",
													"    });  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    + \"filterKeys1=\" + inputData.filterKeys1 \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + outputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let emptyFkey1MatchRecordDataRecord = existingRecords.emptyFkey1MatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + emptyFkey1MatchRecordDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + emptyFkey1MatchRecordDataRecord.fullName + \", \" \r",
													"            +\"emailAddress1=\" + emptyFkey1MatchRecordDataRecord.emailAddress1 + \", \"\r",
													"            +\"filterKeys1=\" + emptyFkey1MatchRecordDataRecord.filterKeys1  \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8244\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#Identity#NoMatchWithNonEmptyFKey1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"emptyFkey1MatchRecord\" : \"\"};\r",
													"let preRequest1Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for empty filterKeys1 record\"\r",
													"    };\r",
													"    console.log(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"filterKeys1\": utils.getFilterKey()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys1\" : preRequest1Data.inputRecord.filterKeys1\r",
													"    };\r",
													"    existingRecords.emptyFkey1MatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", existingRecords.emptyFkey1MatchRecord.fullName);\r",
													"    pm.variables.set(\"emailAddress1\", existingRecords.emptyFkey1MatchRecord.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"filterKeys1\": \"{{filterKeys1}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8244](https://jira.cnvrmedia.net/browse/PID-8244)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys1' when identity-match found without given filterKeys1\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-1.(aim_client_profiles -> FK1_ENABLED = 'Y')\n*\t filterKeys1 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK1_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n        Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t identity-match exists with the given input.\n\n\n&#9724; **EXPECTED RESULT:**\n*\t new individualId gets created and populated in the output.\n\t\n&#9724; **INPUT FIELDS**\n*    \"inputRecord.filterkeys1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8245) -   Identity-request with 'filterKeys1' when identity-match found with different filterKeys1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1,filterKeys1 ) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate Existing -> Identity-record exists for same (fullName + emailAddress1) and different (filterKeys1).\", () => {\r",
													"        pm.expect(existingRecords.diffFkey1MatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.diffFkey1MatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(existingRecords.diffFkey1MatchRecord.individualId);\r",
													"        pm.expect(existingRecords.diffFkey1MatchRecord.filterKeys1).to.not.equal(inputData.filterKeys1);\r",
													"    });\r",
													"\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  The newly generated individualId comes populated in response.\", () => {\r",
													"        pm.expect(outputData.individualId).to.not.equal(existingRecords.diffFkey1MatchRecord.individualId)\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"filterKeys1=\" + inputData.filterKeys1\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let diffFkey1MatchDataRecord = existingRecords.diffFkey1MatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + diffFkey1MatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + diffFkey1MatchDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + diffFkey1MatchDataRecord.emailAddress1 + \", \"\r",
													"        + \"filterKeys1=\" + diffFkey1MatchDataRecord.filterKeys1\r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8245\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#Identity#NoMatchWithDiffEmptyFKey1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"diffFkey1MatchRecord\" : \"\"};\r",
													"let preRequest1Data = {};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"filterKeys1\": utils.getFilterKey(), \"addressLine1\":\"\", \"postalCode\":\"\", \"phone1\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for different filterKeys1 record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"filterKeys1\" : utils.getFilterKey()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys1\" : preRequest1Data.inputRecord.filterKeys1\r",
													"    };\r",
													"    existingRecords.diffFkey1MatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", existingRecords.diffFkey1MatchRecord.fullName);\r",
													"    pm.variables.set(\"emailAddress1\", existingRecords.diffFkey1MatchRecord.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"filterKeys1\": \"{{filterKeys1}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"no\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8245](https://jira.cnvrmedia.net/browse/PID-8245)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys1' when identity-match found with different filterKeys1\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-1.(aim_client_profiles -> FK1_ENABLED = 'Y')\n*\t filterKeys1 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK1_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n*\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t identity-match exists with the given input but with a different filterKeys1.\n\n\n&#9724; **EXPECTED RESULT:**\n*\t new individualId gets created and populated in the output.\n\t\n&#9724; **INPUT FIELDS**\n*    \"inputRecord.filterkeys1\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8246) - Identity-request with 'filterKeys1' when multiple filterKeys1-match identity found with given emailAddress and address.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1, addressLine1, postalCode, filterKeys1) are given in input.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys1);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + addressLine1 + postalCode + filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.addressMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.addressMatchRecord.addressLine1).to.equal(inputData.addressLine1);\r",
													"        pm.expect(existingRecords.addressMatchRecord.postalCode).to.equal(inputData.postalCode);\r",
													"        pm.expect(existingRecords.addressMatchRecord.filterKeys1).to.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + emailAddress1 + filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.emailMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.emailMatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        pm.expect(existingRecords.emailMatchRecord.filterKeys1).to.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"  };\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  The smallest individualId among the matching record comes populated in the output.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"        pm.expect(outputData.individualId).to.equal(\r",
													"            _.min([existingRecords.addressMatchRecord.individualId, existingRecords.emailMatchRecord.individualId]));\r",
													"    });\r",
													"    pm.test(\"Validate output ->  Other matching individual ids comes populated as consolidatedIds.\", \r",
													"        () => {pm.expect(outputData.consolidatedIds.length).to.not.equal(0);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
													"        + \"filterKeys1=\" + inputData.filterKeys1\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1\" + outputData.addressLine1 + \", \"\r",
													"        + \"postlaCode\" + outputData.postlaCode + \", \"\r",
													"        + \"consolidatedIds \" + outputData.consolidatedIds\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let emailMatchDataRecord = existingRecords.emailMatchRecord;\r",
													"    let existingDataToDisplay = \"addressMatchRecord = [\"\r",
													"        + \"individualId=\" + addressMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + addressMatchDataRecord.fullName + \", \"\r",
													"        + \"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + addressMatchDataRecord.postalCode + \", \"\r",
													"        + \"filterKeys1=\" + addressMatchDataRecord.filterKeys1 + \" ] || emailMatchRecord = [\"\r",
													"        + \"individualId=\" + emailMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + emailMatchDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + emailMatchDataRecord.emailAddress1 + \", \"\r",
													"        + \"filterKeys1=\" + emailMatchDataRecord.filterKeys1 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8246\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#Identity#NoMatchWithDiffEmptyFKey1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=================================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"emailMatchRecord\":\"\"};\r",
													"let preRequest1Data = {};\r",
													"let preRequest2Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"filterKeys1\": utils.getFilterKey()}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"\r",
													"            \"filterKeys1\": preRequest1Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    \r",
													"    pm.variables.set(\"filterKeys1\", existingRecords.addressMatchRecord.filterKeys1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"fullName\":preRequest1Data.inputRecord.fullName, \"filterKeys1\" : preRequest1Data.inputRecord.filterKeys1, \r",
													"    \"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys1\": preRequest2Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.emailMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"filterKeys1\": \"{{filterKeys1}}\",\r\n    \"filterKeys2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"no\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8246](https://jira.cnvrmedia.net/browse/PID-8246)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys1' when multiple filterKeys1-match identity found with given emailAddress and address.\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-1.(aim_client_profiles -> FK1_ENABLED = 'Y')\n*\t filterKeys1 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK1_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys1. i.e (fullName, addressLine1, postalCode, filterKeys1).\n*\t email-match identity record exists with the given filterKeys1. i.e (fullName, emailAddress1, filterKeys1)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t identity-match record with lowest individualId gets returned in the response.\n*\t Consolidation of individualIds takes place and  individualId of other matched-record comes populated in identityOutput.consolidations.consolidatedIds.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys1\n*\t addressLine1\n*\t postalCode\n*\t emailAddress1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*\t\"identityOutput.consolidations.consolidatedIds\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8247)  -  Identity-request with 'filterKeys1' when address-match and email-match identity exists with/without the given filterKeys1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1, addressLine1, postalCode, filterKeys1) are given in input.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys1);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> Identity-record exists for given (fullName + addressLine1 + postalCode + filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.addressMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.addressMatchRecord.addressLine1).to.equal(inputData.addressLine1);\r",
													"        pm.expect(existingRecords.addressMatchRecord.postalCode).to.equal(inputData.postalCode);\r",
													"        pm.expect(existingRecords.addressMatchRecord.filterKeys1).to.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Validate existing -> Identity-record exists for given name (fullName + emailAddress1) and different (filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.emailMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.emailMatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        pm.expect(existingRecords.emailMatchRecord.filterKeys1).to.not.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output -> filterKeys1-matching identity gets returned in the output.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
													"        + \"filterKeys1=\" + inputData.filterKeys1\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1\" + outputData.addressLine1 + \", \"\r",
													"        + \"postlaCode\" + outputData.postlaCode \r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let emailMatchDataRecord = existingRecords.emailMatchRecord;\r",
													"    let existingDataToDisplay = \"addressMatchRecord = [\"\r",
													"        + \"individualId=\" + addressMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + addressMatchDataRecord.fullName + \", \"\r",
													"        + \"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + addressMatchDataRecord.postalCode + \", \"\r",
													"        + \"emailAddress1=\" + addressMatchDataRecord.emailAddress1 + \", \"        \r",
													"        + \"filterKeys1=\" + addressMatchDataRecord.filterKeys1 + \" ] || emailMatchRecord = [\"\r",
													"        + \"individualId=\" + emailMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + emailMatchDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + emailMatchDataRecord.emailAddress1 + \", \"\r",
													"        + \"filterKeys1=\" + emailMatchDataRecord.filterKeys1 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8247\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithDiffFilterKey1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=================================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"emailMatchRecord\":\"\"};\r",
													"let preRequest1Data = {};\r",
													"let preRequest2Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"filterKeys1\": utils.getFilterKey()}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys1\": preRequest1Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    \r",
													"    pm.variables.set(\"filterKeys1\", existingRecords.addressMatchRecord.filterKeys1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"fullName\":preRequest1Data.inputRecord.fullName, \"filterKeys1\" : utils.getFilterKey(), \r",
													"    \"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys1\": preRequest2Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.emailMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"phone1\": \"\",\r\n    \"filterKeys1\": \"{{filterKeys1}}\",\r\n    \"filterKeys2\": \"{{filterKeys2}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8247](https://jira.cnvrmedia.net/browse/PID-8247)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys1' when address-match and email-match identity exists with/without the given filterKeys1\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-1.(aim_client_profiles -> FK1_ENABLED = 'Y')\n*\t filterKeys1 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK1_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys1. i.e (fullName, addressLine1, postalCode, filterKeys1).\n*\t email-match identity record exists with the given filterKeys1. i.e (fullName, emailAddress1, filterKeys1)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t filterKeys1-matching identity gets returned in the output.\n*\t filterKeys1-matching identity gets upsert-ed with the given 'emailAddress1'.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys1\n*\t addressLine1\n*\t postalCode\n*\t emailAddress1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8248) - Identity-request with 'filterKeys1' when multiple filterKeys1-match identity found with given phone and address.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, phone1, addressLine1, postalCode, filterKeys1) are given in input.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.phone1);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys1);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + addressLine1 + postalCode + filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.addressMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.addressMatchRecord.addressLine1).to.equal(inputData.addressLine1);\r",
													"        pm.expect(existingRecords.addressMatchRecord.postalCode).to.equal(inputData.postalCode);\r",
													"        pm.expect(existingRecords.addressMatchRecord.filterKeys1).to.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + phone1 + filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.phone1).to.equal(inputData.phone1);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.filterKeys1).to.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  The smallest individualId among the matching record comes populated in the output.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"        pm.expect(outputData.individualId).to.equal(\r",
													"            _.min([existingRecords.addressMatchRecord.individualId, existingRecords.phoneMatchRecord.individualId]));\r",
													"    });\r",
													"    pm.test(\"Validate output ->  Other matching individual ids comes populated as consolidatedIds.\", () => {\r",
													"        pm.expect(outputData.consolidatedIds.length).to.not.equal(0);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"phone1=\" + inputData.phone1 + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
													"        + \"filterKeys1=\" + inputData.filterKeys1\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"phone1=\" + outputData.phone1 + \", \"\r",
													"        + \"addressLine1\" + outputData.addressLine1 + \", \"\r",
													"        + \"postlaCode\" + outputData.postlaCode + \", \"\r",
													"        + \"consolidatedIds \" + outputData.consolidatedIds\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let phoneMatchDataRecord = existingRecords.phoneMatchRecord;\r",
													"    let existingDataToDisplay = \"addressMatchRecord = [\"\r",
													"        + \"individualId=\" + addressMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + addressMatchDataRecord.fullName + \", \"\r",
													"        + \"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + addressMatchDataRecord.postalCode + \", \"\r",
													"        + \"filterKeys1=\" + addressMatchDataRecord.filterKeys1 + \" ] || phoneMatchRecord = [\"\r",
													"        + \"individualId=\" + phoneMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + phoneMatchDataRecord.fullName + \", \"\r",
													"        + \"phone1=\" + phoneMatchDataRecord.phone1 + \", \"\r",
													"        + \"filterKeys1=\" + phoneMatchDataRecord.filterKeys1 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8248\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithSameFilterKey1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=================================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"phoneMatchRecord\":\"\"};\r",
													"let preRequest1Data = {};\r",
													"let preRequest2Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"filterKeys1\": utils.getFilterKey()}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"            \"filterKeys1\": preRequest1Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    \r",
													"    pm.variables.set(\"filterKeys1\", existingRecords.addressMatchRecord.filterKeys1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"fullName\":preRequest1Data.inputRecord.fullName, \"filterKeys1\" : preRequest1Data.inputRecord.filterKeys1, \r",
													"    \"addressLine1\":\"\",\"emailAddress1\":\"\",\"postalCode\":\"\", \"phone1\":utils.getValidPhoneNo()};\r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for phone-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"phone1\": outputData.phone1,\r",
													"            \"filterKeys1\": preRequest2Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"phone1\", outputData.phone1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"filterKeys1\": \"{{filterKeys1}}\",\r\n    \"filterKeys2\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"no\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8248](https://jira.cnvrmedia.net/browse/PID-8248)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys1' when multiple filterKeys1-match identity found with given phone and address.\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-1.(aim_client_profiles -> FK1_ENABLED = 'Y')\n*\t filterKeys1 is provided in the input.\n*\t fullName,addressLine1, phone1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK1_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys1. i.e (fullName, addressLine1, postalCode, filterKeys1).\n*\t phone-match identity record exists with the given filterKeys1. i.e (fullName, phone1, filterKeys1)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t identity-match record with lowest individualId gets returned in the response.\n*\t Consolidation of individualIds takes place and  individualId of other matched-record comes populated in identityOutput.consolidations.consolidatedIds.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys1\n*\t addressLine1\n*\t postalCode\n*\t phone1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*\t\"identityOutput.consolidations.consolidatedIds\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8249) - Identity-request with 'filterKeys1' when address-match and phone-match identity exists with/without the given filterKeys1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, phone1, addressLine1, postalCode, filterKeys1) are given in input.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.phone1);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys1);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + addressLine1 + postalCode + filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.addressMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.addressMatchRecord.addressLine1).to.equal(inputData.addressLine1);\r",
													"        pm.expect(existingRecords.addressMatchRecord.postalCode).to.equal(inputData.postalCode);\r",
													"        pm.expect(existingRecords.addressMatchRecord.filterKeys1).to.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + phone1) and different (filterKeys1)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.phone1).to.equal(inputData.phone1);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.filterKeys1).to.not.equal(inputData.filterKeys1);\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  filterKeys1-matching identity gets returned in the output.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"phone1=\" + inputData.phone1 + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
													"        + \"filterKeys1=\" + inputData.filterKeys1\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"phone1=\" + outputData.phone1 + \", \"\r",
													"        + \"addressLine1\" + outputData.addressLine1 + \", \"\r",
													"        + \"postalCode\" + outputData.postalCode \r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let phoneMatchDataRecord = existingRecords.phoneMatchRecord;\r",
													"    let existingDataToDisplay = \"addressMatchRecord = [\"\r",
													"        + \"individualId=\" + addressMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + addressMatchDataRecord.fullName + \", \"\r",
													"        + \"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + addressMatchDataRecord.postalCode + \", \"\r",
													"        + \"filterKeys1=\" + addressMatchDataRecord.filterKeys1 + \" ] || phoneMatchRecord = [\"\r",
													"        + \"individualId=\" + phoneMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + phoneMatchDataRecord.fullName + \", \"\r",
													"        + \"phone1=\" + phoneMatchDataRecord.phone1 + \", \"\r",
													"        + \"filterKeys1=\" + phoneMatchDataRecord.filterKeys1 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8249\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithDiffFilterKey1\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=================================================================================================================================================//\r",
													"\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"phoneMatchRecord\":\"\"};\r",
													"let preRequest1Data = {};\r",
													"let preRequest2Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"filterKeys1\": utils.getFilterKey()}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"\r",
													"            \"filterKeys1\": preRequest1Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    \r",
													"    pm.variables.set(\"filterKeys1\", existingRecords.addressMatchRecord.filterKeys1);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"fullName\":preRequest1Data.inputRecord.fullName, \"filterKeys1\" : utils.getFilterKey(), \r",
													"    \"addressLine1\":\"\",\"emailAddress1\":\"\",\"postalCode\":\"\", \"phone1\": utils.getValidPhoneNo()};\r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for phone-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"phone1\": outputData.phone1,\r",
													"            \"filterKeys1\": preRequest2Data.inputRecord.filterKeys1,\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"phone1\", outputData.phone1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"filterKeys1\": \"{{filterKeys1}}\",\r\n        \"filterKeys2\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8249](https://jira.cnvrmedia.net/browse/PID-8249)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys1' when address-match and phone-match identity exists with/without the given filterKeys1\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-1.(aim_client_profiles -> FK1_ENABLED = 'Y')\n*\t filterKeys1 is provided in the input.\n*\t fullName,addressLine1, phone1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK1_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys1. i.e (fullName, addressLine1, postalCode, filterKeys1).\n*\t phone-match identity record exists with the given filterKeys1. i.e (fullName, phone1, filterKeys1)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t filterKeys1-matching identity gets returned in the output.\n*\t filterKeys1-matching identity gets upsert-ed with the given 'phone1'.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys1\n*\t addressLine1\n*\t postalCode\n*\t phone1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8253) - Identity-request with 'filterKeys2' when identity-match found without given `filterKeys2`",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\")); \r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> required attribute (fullName, emailAddress1, filterKeys2) are given in input.\", ()=>{\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys2);\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => { \r",
													"    pm.test(\"Validate Existing -> identity-record exists with empty (filterKeys2) and same (fullName, emailAddress1).\",()=>{\r",
													"        utils.validateIfNonEmpty(existingRecords.emptyFkey2MatchRecord.individualId);\r",
													"        pm.expect(existingRecords.emptyFkey2MatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.emptyFkey2MatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        pm.expect(existingRecords.emptyFkey2MatchRecord.filterKeys2).to.equal(\"\");\r",
													"    }); \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  The newly generated individualId comes populated in the response.\",()=>{\r",
													"        pm.expect(outputData.individualId).to.not.equal(existingRecords.emptyFkey2MatchRecord.individualId);\r",
													"    });  \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    + \"filterKeys2=\" + inputData.filterKeys2 \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            + \"emailAddress1=\" + outputData.emailAddress1 +\", \"\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let emptyFkey2MatchRecordDataRecord = existingRecords.emptyFkey2MatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + emptyFkey2MatchRecordDataRecord.individualId + \", \"  \r",
													"            +\"fullName=\" + emptyFkey2MatchRecordDataRecord.fullName + \", \" \r",
													"            +\"emailAddress1=\" + emptyFkey2MatchRecordDataRecord.emailAddress1 + \", \"\r",
													"            +\"filterKeys2=\" + emptyFkey2MatchRecordDataRecord.filterKeys2  \r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8253\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#Identity#NoMatchWithNonEmptyFKey2\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"emptyFkey2MatchRecord\" : \"\"};\r",
													"let preRequest1Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for empty filterKeys1 record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"filterKeys2\": utils.getFilterKey()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys2\" : preRequest1Data.inputRecord.filterKeys2\r",
													"    };\r",
													"    existingRecords.emptyFkey2MatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", existingRecords.emptyFkey2MatchRecord.fullName);\r",
													"    pm.variables.set(\"emailAddress1\", existingRecords.emptyFkey2MatchRecord.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"filterKeys2\": \"{{filterKeys2}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"no\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8253](https://jira.cnvrmedia.net/browse/PID-8253)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys2' when identity-match found without given filterKeys2\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-2.(aim_client_profiles -> FK2_ENABLED = 'Y')\n*\t filterKeys2 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK2_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n        Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK2_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t identity-match exists with the given input.\n\n\n&#9724; **EXPECTED RESULT:**\n*\t new individualId gets created and populated in the output.\n\t\n&#9724; **INPUT FIELDS**\n*    \"inputRecord.filterkeys2\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8254) -  Identity-request with 'filterKeys2' when identity-match found with different `filterKeys2`",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1,filterKeys2 ) are provided.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys2);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate Existing -> Identity-record exists for same (fullName + emailAddress1) and different (filterKeys2).\", () => {\r",
													"        pm.expect(existingRecords.diffFkey2MatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.diffFkey2MatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(existingRecords.diffFkey2MatchRecord.individualId);\r",
													"        pm.expect(existingRecords.diffFkey2MatchRecord.filterKeys2).to.not.equal(inputData.filterKeys2);\r",
													"    });\r",
													"\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  The new individualId comes populated in response.\", () => {\r",
													"        pm.expect(outputData.individualId).to.not.equal(existingRecords.diffFkey2MatchRecord.individualId)\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"filterKeys2=\" + inputData.filterKeys2\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let diffFkey2MatchDataRecord = existingRecords.diffFkey2MatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + diffFkey2MatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + diffFkey2MatchDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + diffFkey2MatchDataRecord.emailAddress1 + \", \"\r",
													"        + \"filterKeys2=\" + diffFkey2MatchDataRecord.filterKeys2\r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8254\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#Identity#NoMatchWithDiffEmptyFKey2\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"diffFkey2MatchRecord\" : \"\"};\r",
													"let preRequest1Data = {};\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"filterKeys2\": utils.getFilterKey(), \"addressLine1\":\"\", \"postalCode\":\"\", \"phone\":\"\"};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for different filterKeys2 record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"filterKeys2\" : utils.getFilterKey()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys2\" : preRequest1Data.inputRecord.filterKeys2\r",
													"    };\r",
													"    existingRecords.diffFkey2MatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", existingRecords.diffFkey2MatchRecord.fullName);\r",
													"    pm.variables.set(\"emailAddress1\", existingRecords.diffFkey2MatchRecord.emailAddress1);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"filterKeys2\": \"{{filterKeys2}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8254](https://jira.cnvrmedia.net/browse/PID-8254)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys2' when identity-match found with different filterKeys2\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-2.(aim_client_profiles -> FK2_ENABLED = 'Y')\n*\t filterKeys2 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK2_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n*\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK2_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t identity-match exists with the given input but with a different filterKeys2.\n\n\n&#9724; **EXPECTED RESULT:**\n*\t new individualId gets created and populated in the output.\n\t\n&#9724; **INPUT FIELDS**\n*    \"inputRecord.filterkeys2\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8255) - Identity-request with 'filterKeys2' when multiple filterKeys2-match identity found with given emailAddress and address.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1, addressLine1, postalCode, filterKeys2) are given in input.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys2);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + addressLine1 + postalCode + filterKeys2)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.addressMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.addressMatchRecord.addressLine1).to.equal(inputData.addressLine1);\r",
													"        pm.expect(existingRecords.addressMatchRecord.postalCode).to.equal(inputData.postalCode);\r",
													"        pm.expect(existingRecords.addressMatchRecord.filterKeys2).to.equal(inputData.filterKeys2);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + emailAddress1 + filterKeys2)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.emailMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.emailMatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        pm.expect(existingRecords.emailMatchRecord.filterKeys2).to.equal(inputData.filterKeys2);\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  The smallest individualId among the matching record comes populated in the output.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"        pm.expect(outputData.individualId).to.equal(\r",
													"            _.min([existingRecords.addressMatchRecord.individualId, existingRecords.emailMatchRecord.individualId]));\r",
													"    });\r",
													"    pm.test(\"Validate output ->  Other matching individual ids comes populated as consolidatedIds.\", () => {\r",
													"        pm.expect(outputData.consolidatedIds.length).to.not.equal(0)\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
													"        + \"filterKeys2=\" + inputData.filterKeys2\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1\" + outputData.addressLine1 + \", \"\r",
													"        + \"postlaCode\" + outputData.postlaCode + \", \"\r",
													"        + \"consolidatedIds \" + outputData.consolidatedIds\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let emailMatchDataRecord = existingRecords.emailMatchRecord;\r",
													"    let existingDataToDisplay = \"addressMatchRecord = [\"\r",
													"        + \"individualId=\" + addressMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + addressMatchDataRecord.fullName + \", \"\r",
													"        + \"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + addressMatchDataRecord.postalCode + \", \"\r",
													"        + \"filterKeys2=\" + addressMatchDataRecord.filterKeys2 + \" ] || emailMatchRecord = [\"\r",
													"        + \"individualId=\" + emailMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + emailMatchDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + emailMatchDataRecord.emailAddress1 + \", \"\r",
													"        + \"filterKeys2=\" + emailMatchDataRecord.filterKeys2 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8255\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithSameFilterKey2\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"emailMatchRecord\":\"\"};\r",
													"let preRequest1Data = {};\r",
													"let preRequest2Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"filterKeys2\": utils.getFilterKey()}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"\r",
													"            \"filterKeys2\": preRequest1Data.inputRecord.filterKeys2,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    \r",
													"    pm.variables.set(\"filterKeys2\", existingRecords.addressMatchRecord.filterKeys2);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"fullName\":preRequest1Data.inputRecord.fullName, \"filterKeys2\" : preRequest1Data.inputRecord.filterKeys2, \r",
													"    \"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys2\": preRequest2Data.inputRecord.filterKeys2,\r",
													"    };\r",
													"    existingRecords.emailMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"filterKeys1\": \"\",\r\n    \"filterKeys2\": \"{{filterKeys2}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8255](https://jira.cnvrmedia.net/browse/PID-8255)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys2' when multiple filterKeys2-match identity found with given emailAddress and address.\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-2.(aim_client_profiles -> FK2_ENABLED = 'Y')\n*\t filterKeys2 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK2_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK2_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys2. i.e (fullName, addressLine1, postalCode, filterKeys2).\n*\t email-match identity record exists with the given filterKeys2. i.e (fullName, emailAddress1, filterKeys2)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t identity-match record with lowest individualId gets returned in the response.\n*\t Consolidation of individualIds takes place and  individualId of other matched-record comes populated in identityOutput.consolidations.consolidatedIds.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys2\n*\t addressLine1\n*\t postalCode\n*\t emailAddress1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*\t\"identityOutput.consolidations.consolidatedIds\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8256) -  Identity-request with 'filterKeys2' when address-match and email-match identity exists with/without the given filterKeys2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, emailAddress1, addressLine1, postalCode, filterKeys2) are given in input.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys2);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> Identity-record exists for given (fullName + addressLine1 + postalCode + filterKeys2)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.addressMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.addressMatchRecord.addressLine1).to.equal(inputData.addressLine1);\r",
													"        pm.expect(existingRecords.addressMatchRecord.postalCode).to.equal(inputData.postalCode);\r",
													"        pm.expect(existingRecords.addressMatchRecord.filterKeys2).to.equal(inputData.filterKeys2);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Validate existing -> Identity-record exists for given (fullName + emailAddress1) and different (filterKeys2)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.emailMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.emailMatchRecord.emailAddress1).to.equal(inputData.emailAddress1);\r",
													"        pm.expect(existingRecords.emailMatchRecord.filterKeys2).to.not.equal(inputData.filterKeys2);\r",
													"        utils.validateIfNonEmpty(existingRecords.emailMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output -> filterKeys2-matching identity gets returned in the output.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"        pm.expect(outputData.individualId).to.equal(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + inputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
													"        + \"filterKeys2=\" + inputData.filterKeys2\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"emailAddress1=\" + outputData.emailAddress1 + \", \"\r",
													"        + \"addressLine1\" + outputData.addressLine1 + \", \"\r",
													"        + \"postlaCode\" + outputData.postlaCode \r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let emailMatchDataRecord = existingRecords.emailMatchRecord;\r",
													"    let existingDataToDisplay = \"addressMatchRecord = [\"\r",
													"        + \"individualId=\" + addressMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + addressMatchDataRecord.fullName + \", \"\r",
													"        + \"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + addressMatchDataRecord.postalCode + \", \"\r",
													"        + \"filterKeys2=\" + addressMatchDataRecord.filterKeys2 + \" ] || emailMatchRecord = [\"\r",
													"        + \"individualId=\" + emailMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + emailMatchDataRecord.fullName + \", \"\r",
													"        + \"emailAddress1=\" + emailMatchDataRecord.emailAddress1 + \", \"\r",
													"        + \"filterKeys2=\" + emailMatchDataRecord.filterKeys2 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8256\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithDiffFilterKey2\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"emailMatchRecord\":\"\"};\r",
													"let preRequest1Data = {};\r",
													"let preRequest2Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"filterKeys2\": utils.getFilterKey()}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"\r",
													"            \"filterKeys2\": preRequest1Data.inputRecord.filterKeys2,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    \r",
													"    pm.variables.set(\"filterKeys2\", existingRecords.addressMatchRecord.filterKeys2);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"fullName\":preRequest1Data.inputRecord.fullName, \"filterKeys2\" : utils.getFilterKey(), \r",
													"    \"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\"};\r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for email-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"emailAddress1\": outputData.emailAddress1,\r",
													"            \"filterKeys2\": preRequest2Data.inputRecord.filterKeys2,\r",
													"    };\r",
													"    existingRecords.emailMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"phone1\": \"\",\r\n        \"filterKeys1\": \"\",\r\n        \"filterKeys2\": \"{{filterKeys2}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8256](https://jira.cnvrmedia.net/browse/PID-8256)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys2' when address-match and email-match identity exists with/without the given filterKeys2\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-2.(aim_client_profiles -> FK2_ENABLED = 'Y')\n*\t filterKeys2 is provided in the input.\n*\t fullName,addressLine1, emailAddress1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK2_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys2. i.e (fullName, addressLine1, postalCode, filterKeys2).\n*\t email-match identity record exists with the given filterKeys2. i.e (fullName, emailAddress1, filterKeys2)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t filterKeys2-matching identity gets returned in the output.\n*\t filterKeys2-matching identity gets upsert-ed with the given 'emailAddress1'.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys2\n*\t addressLine1\n*\t postalCode\n*\t emailAddress1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8257) -  Identity-request with 'filterKeys2' when multiple filterKeys2-match identity found with given phone and address.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation = () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation = () => {\r",
													"    pm.test(\"Validate Input -> required attributes (fullName, phone1, addressLine1, postalCode, filterKeys2) are given in input.\", () => {\r",
													"        utils.validateIfNonEmpty(inputData.fullName)\r",
													"        utils.validateIfNonEmpty(inputData.phone1);\r",
													"        utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"        utils.validateIfNonEmpty(inputData.postalCode);\r",
													"        utils.validateIfNonEmpty(inputData.filterKeys2);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + addressLine1 + postalCode + filterKeys2)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.addressMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.addressMatchRecord.addressLine1).to.equal(inputData.addressLine1);\r",
													"        pm.expect(existingRecords.addressMatchRecord.postalCode).to.equal(inputData.postalCode);\r",
													"        pm.expect(existingRecords.addressMatchRecord.filterKeys2).to.equal(inputData.filterKeys2);\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Validate existing -> Identity-record exists for same (fullName + phone1 + filterKeys2)\", () => {\r",
													"        utils.validateIfNonEmpty(existingRecords.addressMatchRecord.individualId);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.fullName).to.equal(inputData.fullName);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.phone1).to.equal(inputData.phone1);\r",
													"        pm.expect(existingRecords.phoneMatchRecord.filterKeys2).to.equal(inputData.filterKeys2);\r",
													"        utils.validateIfNonEmpty(existingRecords.phoneMatchRecord.individualId);\r",
													"    });\r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation = () => {\r",
													"    pm.test(\"Validate output ->  The smallest individualId among the matching record comes populated in the output.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.individualId);\r",
													"        pm.expect(outputData.individualId).to.equal(\r",
													"            _.min([existingRecords.addressMatchRecord.individualId, existingRecords.phoneMatchRecord.individualId]));\r",
													"    });\r",
													"    pm.test(\"Validate output ->  Other matching individual ids comes populated as consolidatedIds.\", \r",
													"        () => {pm.expect(outputData.consolidatedIds.length).to.not.equal(0);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = () => {\r",
													"    let inputDataToDisplay =\r",
													"        \"[\"\r",
													"        + \"fullName=\" + inputData.fullName + \", \"\r",
													"        + \"phone1=\" + inputData.phone1 + \", \"\r",
													"        + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + inputData.postalCode + \", \"\r",
													"        + \"filterKeys2=\" + inputData.filterKeys2\r",
													"        + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = () => {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"        + \"individualId=\" + outputData.individualId + \", \"\r",
													"        + \"fullName=\" + outputData.fullName + \", \"\r",
													"        + \"phone1=\" + outputData.phone1 + \", \"\r",
													"        + \"addressLine1\" + outputData.addressLine1 + \", \"\r",
													"        + \"postlaCode\" + outputData.postlaCode + \", \"\r",
													"        + \"consolidatedIds \" + outputData.consolidatedIds\r",
													"        + \"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let phoneMatchDataRecord = existingRecords.phoneMatchRecord;\r",
													"    let existingDataToDisplay = \"addressMatchRecord = [\"\r",
													"        + \"individualId=\" + addressMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + addressMatchDataRecord.fullName + \", \"\r",
													"        + \"addressLine1=\" + addressMatchDataRecord.addressLine1 + \", \"\r",
													"        + \"postalCode=\" + addressMatchDataRecord.postalCode + \", \"\r",
													"        + \"filterKeys2=\" + addressMatchDataRecord.filterKeys2 + \" ] || phoneMatchRecord = [\"\r",
													"        + \"individualId=\" + phoneMatchDataRecord.individualId + \", \"\r",
													"        + \"fullName=\" + phoneMatchDataRecord.fullName + \", \"\r",
													"        + \"phone1=\" + phoneMatchDataRecord.phone1 + \", \"\r",
													"        + \"filterKeys2=\" + phoneMatchDataRecord.filterKeys2 \r",
													"        + \"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8257\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithSameFilterKey2\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=================================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"phoneMatchRecord\":\"\"};\r",
													"let preRequest1Data = {};\r",
													"let preRequest2Data = {};\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"emailAddress1\":\"\",\"phone1\":\"\",\"filterKeys2\": utils.getFilterKey()}; \r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode,\r",
													"\r",
													"            \"filterKeys2\": preRequest1Data.inputRecord.filterKeys2,\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\", outputData.fullName);\r",
													"    pm.variables.set(\"addressLine1\", outputData.addressLine1);\r",
													"    pm.variables.set(\"postalCode\", outputData.postalCode);\r",
													"    pm.variables.set(\"filterKeys2\", existingRecords.addressMatchRecord.filterKeys2);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"fullName\":preRequest1Data.inputRecord.fullName, \"filterKeys2\" : preRequest1Data.inputRecord.filterKeys2, \r",
													"    \"addressLine1\":\"\",\"emailAddress1\":\"\",\"postalCode\":\"\", \"phone1\": utils.getValidPhoneNo()};\r",
													"    preRequest2Data = utils.generateIdentityPayload(testerInput);\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": preRequest2Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for phone-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"phone1\": outputData.phone1,\r",
													"            \"filterKeys2\": preRequest2Data.inputRecord.filterKeys2,\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"    pm.variables.set(\"phone1\", outputData.phone1);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"{{phone1}}\",\r\n    \"filterKeys1\": \"\",\r\n    \"filterKeys2\": \"{{filterKeys2}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8257](https://jira.cnvrmedia.net/browse/PID-8257)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys2' when multiple filterKeys2-match identity found with given phone and address.\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-2.(aim_client_profiles -> FK2_ENABLED = 'Y')\n*\t filterKeys2 is provided in the input.\n*\t fullName,addressLine1, phone1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK2_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK2_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys2. i.e (fullName, addressLine1, postalCode, filterKeys2).\n*\t phone-match identity record exists with the given filterKeys2. i.e (fullName, phone1, filterKeys2)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t identity-match record with lowest individualId gets returned in the response.\n*\t Consolidation of individualIds takes place and  individualId of other matched-record comes populated in identityOutput.consolidations.consolidatedIds.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys2\n*\t addressLine1\n*\t postalCode\n*\t phone1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\"\n*\t\"identityOutput.consolidations.consolidatedIds\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8258) - Identity-request with 'filterKeys2' when address-match and phone-match identity exists with/without the given filterKeys2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, phone1, addressLine1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.phone1);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"    });\r",
													"    pm.test(\"Validate Input -> Different filterKeys2 is provided in two pretests.\",()=>{\r",
													"         pm.expect(pm.variables.get(\"filterKeys2FromRequest1\")).to.not.equal(pm.variables.get(\"filterKeys2FromRequest2\"))\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {       \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  addressMatched record's individualId comes in response\",()=>{\r",
													"     pm.expect(outputData.individualId).to.equal(existingRecords.addressMatchRecord.individualId)\r",
													"     \r",
													"    });\r",
													"    pm.test(\"Validate output ->  Consolidation will not happen for given input and pretests.\",()=>{\r",
													"         pm.expect(JSON.parse(responseBody).identityOutput.consolidations.consolidatedIds.length).to.equal(0);\r",
													"     \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"phone1=\" + inputData.phone1 +\", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1+ \", \"  \r",
													"    + \"postalCode=\" + inputData.postalCode+ \", \"  \r",
													"    + \"filterKeys2=\" + inputData.filterKeys2\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"phone1=\" + outputData.phone1 +\", \"\r",
													"            +\"addressLine1=\" + outputData.addressLine1 +\", \"\r",
													"            +\"postalCode=\" + outputData.postalCode \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let addressMatchDataRecord = existingRecords.addressMatchRecord;\r",
													"    let phoneMatchDataRecord = existingRecords.phoneMatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"            +\"addressMatchedindividualId=\" + addressMatchDataRecord.individualId + \", \" \r",
													"            +\"phoneMatchedindividualId=\" + phoneMatchDataRecord.individualId + \", \"\r",
													"            +\"fullName=\" + addressMatchDataRecord.fullName + \", \" \r",
													"            + \"addressLine1=\" + addressMatchDataRecord.addressLine1 +\", \" \r",
													"            + \"phone1=\" + phoneMatchDataRecord.phone1\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8258\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithDifferentFilterKey2\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=================================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"addressMatchRecord\":\"\",\"phoneMatchRecord\":\"\"};\r",
													"let addressLine1 = utils.getAddressLine1();\r",
													"let postalCode = utils.getRandomNumberBetween(100000000, 999999999);\r",
													"let fullName = utils.getFullName();\r",
													"let phone1 = \"513-549-4561\";\r",
													"let filterKeys2FromRequest1 = utils.getRandomNumberBetween(10, 99999999);\r",
													"let filterKeys2FromRequest2 = utils.getRandomNumberBetween(10, 99999999);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"addressLine1\":addressLine1,\"phone1\":\"\",\"emailAddress1\":\"\",\"postalCode\":postalCode,\"fullName\":fullName,\"filterKeys2\":filterKeys2FromRequest1,\"filterKeys1\":\"\"};\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for address-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullName,\"phone1\":phone1,\"addressLine1\":addressLine1,\"emailAddress1\":\"\",\"postalCode\":postalCode,\"filterKeys2\":filterKeys2FromRequest1,\"filterKeys1\":\"\"};\r",
													"    let randomData = utils.setRandomDataForRequest(testerInput);\r",
													"    }\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": outputData.addressLine1,\r",
													"            \"postalCode\": outputData.postalCode\r",
													"    };\r",
													"    existingRecords.addressMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"phone1\":phone1,\"emailAddress1\":\"\",\"postalCode\":\"\",\"fullName\":\"\",\"filterKeys2\":filterKeys2FromRequest2,\"filterKeys1\":\"\"};\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for phone-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"phone1\": outputData.phone1\r",
													"    };\r",
													"    existingRecords.phoneMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");\r",
													"pm.variables.set(\"filterKeys2FromRequest1\",filterKeys2FromRequest1);\r",
													"pm.variables.set(\"filterKeys2FromRequest2\",filterKeys2FromRequest2);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"{{countryCode}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"{{phone1}}\",\r\n        \"filterKeys1\": \"\",\r\n        \"filterKeys2\": \"{{filterKeys2}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8258](https://jira.cnvrmedia.net/browse/PID-8258)\n\n&#9724; **NAME:**  Identity-request with 'filterKeys2' when address-match and phone-match identity exists with/without the given filterKeys2\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-2.(aim_client_profiles -> FK2_ENABLED = 'Y')\n*\t filterKeys2 is provided in the input.\n*\t fullName,addressLine1, phone1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK2_ENABLED = 'Y' for the client profile, in table AIM_CLIENT_PROFILES\n*\t Validation: Record found for query.\n\n\t Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK2_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*\t address-match identity record exists with the given filterKeys2. i.e (fullName, addressLine1, postalCode, filterKeys2).\n*\t phone-match identity record exists with the given filterKeys2. i.e (fullName, phone1, filterKeys2)\n\n\n&#9724; **EXPECTED RESULT:**\n*\t filterKeys2-matching identity gets returned in the output.\n*\t filterKeys2-matching identity gets upsert-ed with the given 'phone1'.\n\t\n&#9724; **INPUT FIELDS**\n*\t filterkeys2\n*\t addressLine1\n*\t postalCode\n*\t phone1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "Realtime > clientprofile > fiterkeys > (PID-8303) - identity with filterkey1& filterkey2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\")); \r",
													"}\r",
													"\r",
													"\r",
													" this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1,filterKeys1,filterKeys2) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"         utils.validateIfNonEmpty(inputData.filterKeys1);\r",
													"         utils.validateIfNonEmpty(inputData.filterKeys2);\r",
													"    });\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataValidation = () => {       \r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  Two non empty filterKeys record's individualId should not match with both empty filterKeys record and one of the filterKeys empty record's individualId\",()=>{\r",
													"     pm.expect(outputData.individualId).to.not.equal(existingRecords.emptyFkeysMatchRecord.individualId);\r",
													"     pm.expect(outputData.individualId).to.not.equal(existingRecords.emptyFkey1MatchRecord.individualId);\r",
													"     pm.expect(outputData.individualId).to.not.equal(existingRecords.emptyFkey2MatchRecord.individualId);\r",
													"    });\r",
													"    pm.test(\"Validate output ->  Both empty filterKeys record's individualId should not match with one of the filterKeys empty record's individualId\",()=>{\r",
													"     pm.expect(existingRecords.emptyFkeysMatchRecord.individualId).to.not.equal(existingRecords.emptyFkey1MatchRecord.individualId);\r",
													"     pm.expect(existingRecords.emptyFkeysMatchRecord.individualId).to.not.equal(existingRecords.emptyFkey2MatchRecord.individualId);\r",
													"    });\r",
													"    pm.test(\"Validate output ->  filterKeys1 empty record's individualId should not match with filterKeys2 empty record's individualId.\",()=>{\r",
													"     pm.expect(existingRecords.emptyFkey1MatchRecord.individualId).to.not.equal(existingRecords.emptyFkey2MatchRecord.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"  \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 +\", \"\r",
													"    + \"filterKeys1=\" + inputData.filterKeys1+ \", \"   \r",
													"    + \"filterKeys2=\" + inputData.filterKeys2\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"emailAddress1=\" + outputData.emailAddress1 \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;    \r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {  \r",
													"    let emptyFkeysMatchDataRecord = existingRecords.emptyFkeysMatchRecord;\r",
													"    let emptyFkey1MatchDataRecord = existingRecords.emptyFkey1MatchRecord;\r",
													"    let emptyFkey2MatchDataRecord = existingRecords.emptyFkey2MatchRecord;\r",
													"    let existingDataToDisplay = \"[\"\r",
													"            +\"emptyFkeysMatchedindividualId=\" + emptyFkeysMatchDataRecord.individualId + \", \" \r",
													"            +\"emptyFkey1MatchedindividualId=\" + emptyFkey1MatchDataRecord.individualId + \", \" \r",
													"            +\"emptyFkey2MatchedindividualId=\" + emptyFkey2MatchDataRecord.individualId\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													"      \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=================================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8303\",\r",
													"                    sprint: \"21.02.03\",\r",
													"                    subject: \"realtime > clientprofile > filterkeys\",\r",
													"                    tags: \"#RealTime#FilterKey#ConsolidationWithSameFilterKey2\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=================================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"emptyFkeysMatchRecord\":\"\",\"emptyFkey1MatchRecord\":\"\",\"emptyFkey2MatchRecord\":\"\"};\r",
													"let emailAddress1 = utils.getEmail();\r",
													"let fullName = utils.getFullName();\r",
													"let filterKeys1 = utils.getRandomNumberBetween(10, 99999999);\r",
													"let filterKeys2 = utils.getRandomNumberBetween(10, 99999999);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"emailAddress1\":emailAddress1,\"phone1\":\"\",\"postalCode\":\"\",\"fullName\":fullName,\"filterKeys2\":\"\",\"filterKeys1\":\"\"}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for empty filterKeys1 and filterKeys2 record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"fullName\":fullName,\"emailAddress1\":emailAddress1,\"addressLine1\":\"\",\"phone1\":\"\",\"postalCode\":\"\",\"filterKeys2\":filterKeys2,\"filterKeys1\":filterKeys1};\r",
													"    let randomData = utils.setRandomDataForRequest(testerInput);\r",
													"    }\r",
													"\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"emailAddress1\": outputData.emailAddress1\r",
													"    };\r",
													"    existingRecords.emptyFkeysMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"emailAddress1\",emailAddress1);\r",
													"    pm.variables.set(\"fullName\",fullName);\r",
													"    pm.variables.set(\"filterKeys1\",filterKeys1);\r",
													"    pm.variables.set(\"filterKeys2\",filterKeys2);\r",
													"}\r",
													"\r",
													"let getPreRequest2 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"emailAddress1\":emailAddress1,\"phone1\":\"\",\"postalCode\":\"\",\"fullName\":fullName,\"filterKeys2\":filterKeys2,\"filterKeys1\":\"\"}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for empty filterKeys1 record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"emailAddress1\": outputData.emailAddress1\r",
													"    };\r",
													"    existingRecords.emptyFkey1MatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
													"\r",
													"}\r",
													"\r",
													"let getPreRequest3 = () => {\r",
													"    let testerInput = {\"addressLine1\":\"\",\"emailAddress1\":emailAddress1,\"phone1\":\"\",\"postalCode\":\"\",\"fullName\":fullName,\"filterKeys2\":\"\",\"filterKeys1\":filterKeys1}; \r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_FILTERKEYS_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_FILTERKEYS_ENABLED\"),\r",
													"        \"data\": utils.generateIdentityPayload(testerInput),\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for empty filterKeys2 record\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest3 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"fullName\": outputData.fullName,\r",
													"            \"emailAddress1\": outputData.emailAddress1\r",
													"    };\r",
													"    existingRecords.emptyFkey2MatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest3 = (outputData) => {\r",
													"\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"let preRequest1Detail = getPreRequest1();\r",
													"utils.submitPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
													"let preRequest2Detail = getPreRequest2();\r",
													"utils.submitPostRequest(this, preRequest2Detail, \"preRequest2\");\r",
													"let preRequest3Detail = getPreRequest3();\r",
													"utils.submitPostRequest(this, preRequest3Detail, \"preRequest3\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "clientCode",
												"value": "{{CCODE_FILTERKEYS_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": ""
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_FILTERKEYS_ENABLED}}",
												"type": "text"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"{{addressLine1}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"{{emailAddress1}}\",\n    \"familyName\": \"\",\n    \"fullName\": \"{{fullName}}\",\n    \"gender\": \"{{gender}}\",\n    \"phone1\": \"{{phone1}}\",\n    \"filterKeys1\": \"{{filterKeys1}}\",\n    \"filterKeys2\": \"{{filterKeys2}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n},\n    \"serviceConfig\": {\n    \"configAddressHygiene\": {\n        \"enablePac\": \"no\",\n        \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n}\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8303](https://jira.cnvrmedia.net/browse/PID-8303)\n\n&#9724; **NAME:**  Identity with filterKey1 & filterKey2\n\n&#9724; **DESCRIPTION:** \n*\t client profile enabled for filter-key-1 (aim_client_profiles -> FK1_ENABLED = 'Y') and filter-key-2.(aim_client_profiles -> FK2_ENABLED = 'Y')\n*\t filterKeys1 and filterKeys2 are provided in the input.\n*\t fullName,addressLine1, phone1, postalCode are provided in input.\n\n&#9724; **PRECONDITION**\n*\t FK1_ENABLED = \"Y\" & FK2_ENABLED = \"Y\" for the client profile.\n*        Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK1_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n*        Query:SELECT * FROM AIM_CLIENT_PROFILES WHERE FK2_ENABLED = 'Y' and CLIENT_CODE = '<clientCode>'\n\n\n&#9724; **EXPECTED RESULT:**\n*\t New individualId gets generated and returned in the response.\n\t\n&#9724; **INPUT FIELDS**\n*\t fullName\n*\t emailAddress1\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
									},
									"response": []
								},
								{
									"name": "terminate-filterkeys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"filterkeys\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "tsp",
							"item": [
								{
									"name": "init-tsp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "realtime-usa > tsp > (PID-7109) - Connect realtime request with TSP when no TSP-match found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let requestBody = JSON.parse(pm.request.body);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_TSP_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1, postalCode, phone1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    //NOT APPLICABLE//\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> tspAppendData comes populated in the output with no data.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.tspAppendData);\r",
													"        pm.expect(outputData.tspAppendData).to.not.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"   + \"enableTspAppend=\" + requestBody.serviceConfig.enableTspAppend + \", \"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"emailAddress1=\" + inputData.emailAddress1 \r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"           +\"tspAppendData=\" + outputData.tspAppendData +\", \"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 \r",
													"            +\"postalCode\" + outputData.postalCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"   return null;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7109\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > tsp\",\r",
													"                    tags: \"#USRealTime#TSP#noTspMatch\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let tspData = utils.getTspData();\r",
													"    console.log(tspData.postalCode)\r",
													"    let testerInput = {};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  https://jira.cnvrmedia.net/browse/PID-7109\n\n&#9724; **NAME:** Connect realtime request with TSP when no TSP-match found.\n\n&#9724; **DESCRIPTION:**  Real time request's submitted with \"countryCode = USA\", \"enableTspAppend = \"yes\".\n\n&#9724;**PRECONDITION:**\n*   No TSP-match identity exists.\n\n&#9724;**EXPECTED RESULT:**\n*    TSP detail doesn't get populated in the response.\n\n&#9724;**INPUT FIELDS:**\n*    \"inputRecord.enableTspAppend\" =\"yes\"\n\n&#9724;**OUTPUT FIELDS:**\n* \"outputRecord.tspAppendData\" is blank."
									},
									"response": []
								},
								{
									"name": "realtime-usa > tsp > (PID-7494) - Connect realtime USA request with TSP when  TSP is disabled in request.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let requestBody = JSON.parse(pm.request.body);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_TSP_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, addressLine1,emailAddress1,postalCode,phone1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);   \r",
													"         utils.validateIfNonEmpty(inputData.postalCode); \r",
													"         \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    pm.test(\"Validate existing ->  TSP-match identity record exist.\", ()=>{\r",
													"        utils.validateIfNonEmpty(existingRecords.tspMatchRecord.tspAppendData);\r",
													"        pm.expect(existingRecords.tspMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"        });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> tspAppendData comes populated empty in the output.\",\r",
													"    ()=>{\r",
													"        utils.validateIfEmpty(outputData.tspAppendData);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													" //  + \"enableTspAppend=\" + requestBody.serviceConfig.enableTspAppend + \", \"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"tspAppendData=\" +  outputData.tspAppendData +\", \"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"postalCode\" + outputData.postalCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.tspMatchRecord;\r",
													"    let existingDataToDisplay = \"TSP-match identity exists: [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            +\"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 +\", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;  \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7494\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > tsp\",\r",
													"                    tags: \"#RealTime#Identity#foundMatchingRecord\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"tspMatchRecord\" : \"\"};\r",
													"//let preRequest1Data = {};\r",
													"let tspData = utils.getTspData();\r",
													"\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"enableTspAppend\" : \"yes\",\"fullName\":tspData.fullName,\"addressLine1\":tspData.addressLine1,\"postalCode\":tspData.postalCode};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_TSP_ENABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_TSP_ENABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for TSP-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableTspAppend\" : \"no\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"enableTSPAppend\" : preRequest1Data.enableTSPAppend,\r",
													"            \"tspAppendData\" : outputData.tspAppendData,            \r",
													"            \"fullName\": preRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": preRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": preRequest1Data.inputRecord.postalCode,\r",
													"            \"emailAddress1\": preRequest1Data.inputRecord.emailAddress1,\r",
													"            \"phone1\": preRequest1Data.inputRecord.phone1\r",
													"    };\r",
													"    existingRecords.tspMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\",  existingRecords.tspMatchRecord.fullName);\r",
													"    pm.variables.set(\"addressLine1\",  existingRecords.tspMatchRecord.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",  existingRecords.tspMatchRecord.postalCode);\r",
													"    \r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"utils.submitPostRequest(this,  getPreRequest1(), \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"no\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7494](https://jira.cnvrmedia.net/browse/PID-7494)\n\n&#9724; **NAME:**  Connect realtime USA request with TSP when TSP is disabled in request.\n\n&#9724; **DESCRIPTION:** \n*\t Real time request's submitted with countryCode = USA, enableTspAppend = \"no\".\n\n&#9724; **PRECONDITION**\n*\t TSP-match identity exists.\n*\t TSP is enabled in client profile i.e tspEnable = Y in aim_client_profile table.\n\n&#9724; **EXPECTED RESULT:**\n*\t TSP detail doesn't get populated in the response even if it TSP-match identity exists.\n\t\n&#9724; **INPUT FIELDS**\n*\t inputRecord.enableTspAppend = \"no\"\n\n&#9724; **OUTPUT FIELDS:**\n*     outputRecord.tspAppendData = \" \""
									},
									"response": []
								},
								{
									"name": "realtime-usa > tsp > (PID-7496) - Connect realtime USA request with TSP when  TSP is disabled in client profile.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7496\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > tsp\",\r",
													"                    tags: \"#RealTime#Identity#foundMatchingRecord\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let existingRecords = {\"tspMatchRecord\" : \"\"};\r",
													"let preRequest1Data = {};\r",
													"let tspData = utils.getTspData();\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"let getPreRequest1 = () => {\r",
													"    let testerInput = {\"enableTspAppend\" : \"yes\",\"fullName\":tspData.fullName,\"addressLine1\":tspData.addressLine1,\"postalCode\":tspData.postalCode};\r",
													"    preRequest1Data = utils.generateIdentityPayload(testerInput)\r",
													"    let requestDetail ={\r",
													"        \"clientCode\": pm.environment.get(\"CCODE_TSP_DISABLED\"),\r",
													"        \"apiKey\": pm.environment.get(\"XAPIKEY_TSP_DISABLED\"),\r",
													"        \"data\": preRequest1Data,\r",
													"        \"url\":pm.environment.get(\"URL_REALTIME\"),\r",
													"        \"msg\":\"Generate data for TSP-match\"\r",
													"    };\r",
													"    return requestDetail;\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableTspAppend\" : \"yes\",\"fullName\":tspData.fullName,\"addressLine1\":tspData.addressLine1,\"postalCode\":tspData.postalCode};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
													"    let existingRecord = {\r",
													"            \"enableTSPAppend\" : preRequest1Data.enableTSPAppend,\r",
													"            \"tspAppendData\" : outputData.tspAppendData,            \r",
													"            \"fullName\": preRequest1Data.inputRecord.fullName,\r",
													"            \"individualId\": outputData.individualId,\r",
													"            \"addressLine1\": preRequest1Data.inputRecord.addressLine1,\r",
													"            \"postalCode\": preRequest1Data.inputRecord.postalCode,\r",
													"            \r",
													"    };\r",
													"    existingRecords.tspMatchRecord = existingRecord;\r",
													"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
													"}\r",
													"\r",
													"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
													"    pm.variables.set(\"fullName\",  existingRecords.tspMatchRecord.fullName);\r",
													"    pm.variables.set(\"addressLine1\",  existingRecords.tspMatchRecord.addressLine1);\r",
													"    pm.variables.set(\"postalCode\",  existingRecords.tspMatchRecord.postalCode);\r",
													"}\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"utils.submitPostRequest(this,  getPreRequest1(), \"preRequest1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let requestBody = JSON.parse(pm.request.body);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_TSP_DISABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, addressLine1, postalCode, phone1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"//     pm.test(\"Validate existing ->  TSP-match identity record exist.\",()=>{\r",
													"//         utils.validateIfNonEmpty(existingRecords.tspMatchRecord.tspAppendData);\r",
													"//         pm.expect(existingRecords.tspMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9',\"|\"]);\r",
													"//     });\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> tspAppendData comes populated empty in the output.\", ()=>{\r",
													"        utils.validateIfEmpty(outputData.tspAppendData);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"   + \"enableTspAppend=\" + requestBody.serviceConfig.enableTspAppend + \", \"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\" outputData.tspAppendData=\" +  outputData.tspAppendData +\", \"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"postalCode\" + outputData.postalCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    let existingDataRecord = existingRecords.tspMatchRecord;\r",
													"    let existingDataToDisplay = \"TSP-match identity exists: [\"\r",
													"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
													"            +\"fullName=\" + existingDataRecord.fullName + \", \"\r",
													"            + \"addressLine1=\" + existingDataRecord.addressLine1 +\", \"\r",
													"            + \"postalCode=\" + existingDataRecord.postalCode\r",
													"            +\"]\";\r",
													"    return existingDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_TSP_DISABLED}}"
											},
											{
												"key": "accessToken",
												"type": "text",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_DISABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7496](https://jira.cnvrmedia.net/browse/PID-7496)\n\n&#9724; **NAME:**  Connect realtime USA request with TSP when TSP is disabled in client profile.\n\n&#9724; **DESCRIPTION:** \n*\t Real time request's submitted with countryCode = USA, enableTspAppend = \"yes\".\n\n&#9724; **PRECONDITION**\n*\t TSP-match identity exists.\n*\t TSP is disabled in client profile i.e tspEnable = N in aim_client_profile table..\n\n&#9724; **EXPECTED RESULT:**\n*\t TSP detail doesn't get populated in the response even if it TSP-match identity exists.\n\t\n&#9724; **INPUT FIELDS**\n*\t inputRecord.enableTspAppend = \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*     outputRecord.tspAppendData = \" \""
									},
									"response": []
								},
								{
									"name": "realtime-usa > tsp > (PID-7106) - Connect realtime USA request with TSP when TSP-full match found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"let requestBody = JSON.parse(pm.request.body);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_TSP_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1, postalCode, phone1) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"    pm.test(\"Validate Input -> countryCode = USA\", () => {        \r",
													"        pm.expect(inputData.countryCode).to.equal(\"USA\")\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"    //NOT APPLICABLE//\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> tspAppendData comes populated in the output with data.\", () => {\r",
													"        utils.validateIfNonEmpty(outputData.tspAppendData);\r",
													"        pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    });\r",
													"    \r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"   + \"enableTspAppend=\" + requestBody.serviceConfig.enableTspAppend + \", \"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"           +\"countryCode=\" + outputData.countryCode +\", \"\r",
													"           +\"tspAppendData=\" + outputData.tspAppendData +\", \"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"postalCode\" + outputData.postalCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"   return null;\r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7106\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > tsp\",\r",
													"                    tags: \"#USRealTime#OccupancyScore#disableOccupancyScore\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let tspData = utils.getTspData();\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableTspAppend\" : \"yes\",\"fullName\":tspData.fullName,\"addressLine1\":tspData.addressLine1,\"postalCode\":tspData.postalCode};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7106](https://jira.cnvrmedia.net/browse/PID-7106)\n\n&#9724; **NAME:**  Connect realtime USA request with TSP when TSP-full match found\n\n&#9724; **DESCRIPTION:** \n*\t Real time request's submitted with countryCode = USA, enableTspAppend = \"yes\".\n\n&#9724; **PRECONDITION**\n*\t TSP-full-match identity i.e (address1 + gender + unitNumber + fullName)-match identity exists \n*\t TSP is enabled in client profile i.e tspEnable = Y in aim_client_profile table w.r.t the client code being used.\n\n&#9724; **EXPECTED RESULT:**\n*\t TSP detail gets populated in the response.\n\t\n&#9724; **INPUT FIELDS**\n*\t inputRecord.enableTspAppend = \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*     outputRecord.tspAppendData"
									},
									"response": []
								},
								{
									"name": "realtime-usa > tsp > (PID-7107) - Connect realtime USA request with TSP when TSP-address match but no TSP-name-match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_TSP_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> Required fields(fullName, addressLine1, postalCode) are provided.\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.fullName)\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output -> TSP data comes populated.\", ()=>{\r",
													"        pm.expect(outputData.tspAppendData).to.not.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay =\r",
													"   \"[\"\r",
													"    + \"fullName=\" + inputData.fullName + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 +\", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    +\"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay = \"[\"\r",
													"            +\"individualId=\" + outputData.individualId +\", \"\r",
													"            +\"fullName=\" + outputData.fullName +\", \"\r",
													"            +\"addressLine1=\"+ outputData.addressLine1 +\", \"\r",
													"            +\"postalCode\" + outputData.postalCode\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7107\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"realtime-usa > tsp\",\r",
													"                    tags: \"#RealTime#Identity#foundMatchingRecord\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"let tspData = utils.getTspData();\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"enableTspAppend\" : \"yes\",\"addressLine1\":tspData.addressLine1,\"postalCode\":tspData.postalCode,\"emailAddress1\":\"\",\"phone1\":\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n    \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n        \"enablePac\": \"no\",\r\n        \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enableTspAppend\": \"yes\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7107](https://jira.cnvrmedia.net/browse/PID-7107)\n\n&#9724; **NAME:**  Connect realtime USA request with TSP when TSP-address match but no TSP-name-match\n\n&#9724; **DESCRIPTION:** \n*\t Real time request's submitted with countryCode = USA, enableTspAppend = \"yes\".\n\n&#9724; **PRECONDITION**\n*\t TSP-address-match identity i.e (address1 )-match identity exists.\n*\t TSP-name-match identity  doesn't exist i.e (fullName)-match identity doesn't exist\n*\t TSP is enabled in client profile i.e tspEnable = Y in aim_client_profile table w.r.t the client code being used.\n\n&#9724; **EXPECTED RESULT:**\n*\t TSP details doesn't get populated in the response.\n\t\n&#9724; **INPUT FIELDS**\n*\t inputRecord.enableTspAppend = \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*     outputRecord.tspAppendData"
									},
									"response": []
								},
								{
									"name": "Realtime > tspMeta > (PID-8576) - Validate tspMeta request with no \"batchMode\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"//=======================================================================================\r",
													"(function validateTspMetaBatchModeN(){\r",
													"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") +\" ]\";\r",
													"    pm.test(msg,()=>{\r",
													"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
													"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
													"    });\r",
													"\r",
													"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
													"        pm.response.to.be.ok;\r",
													"        pm.response.to.be.withBody;\r",
													"        pm.response.to.be.json;\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    let outputDataMsg = \"(3)-Check output data => [ templateId = \" + outputData.templateId + \" , attributes = \" + outputData.attributes.slice(0,3) + \"...]\"\r",
													"    pm.test(outputDataMsg, ()=>{});\r",
													"    \r",
													"    pm.test(\"(4)- Validate fields templateId and attributes comes populated in the response and attributes does not contains SRC_JOB_ID and SRC_RECORD_ID\",()=>{\r",
													"        utils.validateIfNonEmpty(outputData.templateId);\r",
													"        utils.validateIfNonEmpty(outputData.attributes);\r",
													"        pm.expect(outputData.attributes.length).to.not.equal(0);\r",
													"        pm.expect(outputData.attributes).to.not.includes(\"SRC_JOB_ID\");\r",
													"        pm.expect(outputData.attributes).to.not.includes(\"SRC_RECORD_ID\");\r",
													"    })\r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8576\",\r",
													"                    sprint: \"21.03.03\",\r",
													"                    subject: \"realtime > tspMeta\",\r",
													"                    tags: \"#realtime#tspMeta#noBatchMode#defaultBatchMode\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSPMETA}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSPMETA_BATCHMODE_N}}"
											},
											{
												"key": "userRequestTransactionId",
												"value": "1234"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/tspMeta",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"tspMeta"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8576](https://jira.cnvrmedia.net/browse/PID-8576)\n\n◼ **NAME:**  Realtime - tspMeta - validate tspMeta request with no \"batchMode\" \n\n◼ **DESCRIPTION:** Validate tspMeta request when \"batchMode\" is not given in request header\n\n◼ **EXPECTED RESULT :**\n1. Response comes with status 200\n2. Default value of \"batchMode\" (i.e. \"N\") gets used and response comes populated with \"templateId\" and \"attributes\".\n3. \"attributes\" does not contain  \"SRC_JOB_ID\" and   \"SRC_RECORD_ID\"\n\n◼ **OUTPUT FIELD:**\n* \"templateId\"\n* \"attributes\""
									},
									"response": []
								},
								{
									"name": "Realtime > tspMeta > (PID-8577) -  Validate tspMeta request with invalid or empty clientCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8577\",\r",
													"                    sprint: \"21.03.03\",\r",
													"                    subject: \"realtime > tspMeta\",\r",
													"                    tags: \"#realtime#tspMeta#invalidClientCode\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"(function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"INVALID_CLIENT_CODE\";\r",
													"        }\r",
													"})();\r",
													"if(requestType == \"INVALID_CLIENT_CODE\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"clientCode\", \"smoke_test123\");\r",
													"    pm.variables.set(\"requestType\",\"INVALID_CLIENT_CODE\");\r",
													"}\r",
													"if(requestType == \"EMPTY_CLIENT_CODE\") {\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"clientCode\", \"\");\r",
													"    pm.variables.set(\"requestType\",\"EMPTY_CLIENT_CODE\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"//==========================================\r",
													"requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"let validateTspMetaInvalidClientCode = () => {\r",
													"    pm.test(\"(2)- Validating Bad Request\", () => {\r",
													"        pm.response.to.have.status(400);\r",
													"    });\r",
													"\r",
													"    let outputDataMsg = \"(3)-Check output data => [ templateId = \" + outputData.templateId + \" |  attributes = \" + outputData.attributes +\"]\";\r",
													"    pm.test(outputDataMsg, () => { });\r",
													"\r",
													"    pm.test(\"(4)- Validate fields templateId and attributes comes empty in response\", () => {\r",
													"        utils.validateIfEmpty(outputData.templateId);\r",
													"        pm.expect(outputData.attributes.length).to.equal(0);\r",
													"    })\r",
													"}\r",
													"//=========================================\r",
													"if (requestType == \"INVALID_CLIENT_CODE\") {\r",
													"    pm.test(\"CASE-1 - tspMeta with non-empty invalid clientCode.\",()=>{});\r",
													"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") + \" ]\";\r",
													"    pm.test(msg, () => {\r",
													"        pm.expect(pm.request.method).to.equal(\"GET\");\r",
													"        pm.expect(pm.request.headers.get(\"clientCode\")).to.equal(\"smoke_test123\");\r",
													"    });\r",
													"    validateTspMetaInvalidClientCode();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"EMPTY_CLIENT_CODE\");\r",
													"        postman.setNextRequest(pm.info.requestName);\r",
													"    })();\r",
													"}\r",
													"//==========================================\r",
													"\r",
													"if (requestType == \"EMPTY_CLIENT_CODE\") {\r",
													"    pm.test(\"CASE-2 - tspMeta with empty clientCode.\",()=>{});\r",
													"\r",
													"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") + \" ]\";\r",
													"    pm.test(msg, () => {\r",
													"        pm.expect(pm.request.method).to.equal(\"GET\");\r",
													"        pm.expect(pm.request.headers.get(\"clientCode\")).to.equal(\"\");\r",
													"    });\r",
													"    validateTspMetaInvalidClientCode();\r",
													"    (function stopRequest() {\r",
													"        pm.variables.clear();\r",
													"    })();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"value": "{{clientCode}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSPMETA_BATCHMODE_N}}"
											},
											{
												"key": "userRequestTransactionId",
												"value": "1234"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/tspMeta",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"tspMeta"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8577](https://jira.cnvrmedia.net/browse/PID-8577)\n\n◼ **NAME:**  Realtime- tspMeta -  Validate tspMeta request with invalid  or empty clientCode\n\n◼ **DESCRIPTION:** Validate tspMeta when invalid clientCode is given with request.\n\n◼ **EXPECTED RESULT :**\n1. Response comes with status 400\n2. \"templateId\" and \"attributes\" comes empty in the response\n\n◼ **OUTPUT FIELD:**\n* \"templateId\": \"\"\n* \"attributes\": []"
									},
									"response": []
								},
								{
									"name": "Realtime > tspMeta > (PID-8574) - Validate tspMeta request with \"batchMode\" as \"N\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8574\",\r",
													"                    sprint: \"21.03.03\",\r",
													"                    subject: \"realtime > tspMeta\",\r",
													"                    tags: \"#realtime#tspMeta#batchModeN\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let outputData = JSON.parse(responseBody);\r",
													"\r",
													"//=======================================================================================\r",
													"(function validateTspMetaBatchModeN(){\r",
													"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") +\" batchMode = \"+ pm.request.headers.get(\"batchMode\")+\"]\";\r",
													"    pm.test(msg,()=>{\r",
													"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
													"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
													"        pm.expect(pm.request.headers.get(\"batchMode\")).to.equal(\"N\");\r",
													"    });\r",
													"\r",
													"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
													"        pm.response.to.be.ok;\r",
													"        pm.response.to.be.withBody;\r",
													"        pm.response.to.be.json;\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    let outputDataMsg = \"(3)-Check output data => [ templateId = \" + outputData.templateId + \" ,attributes = \" + outputData.attributes.slice(0,3) + \"...]\"\r",
													"    pm.test(outputDataMsg, ()=>{});\r",
													"    \r",
													"    pm.test(\"(4)- Validate fields templateId and attributes comes populated in the response\",()=>{\r",
													"        utils.validateIfNonEmpty(outputData.templateId);\r",
													"        utils.validateIfNonEmpty(outputData.attributes);\r",
													"        pm.expect(outputData.attributes.length).to.not.equal(0);\r",
													"    })\r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSPMETA}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSPMETA_BATCHMODE_N}}"
											},
											{
												"key": "userRequestTransactionId",
												"value": "1234"
											},
											{
												"key": "batchMode",
												"value": "N",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server}}/v2/connect/realtime/tspMeta",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"tspMeta"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8574](https://jira.cnvrmedia.net/browse/PID-8574)\n\n◼ **NAME:**  Realtime - tspMeta - validate tspMeta request with \"batchMode\" as \"N\"\n\n◼ **DESCRIPTION:** Validate tspMeta request when \"batchMode\" is given as \"N\" in request header.\n\n◼ **EXPECTED RESULT :**\n1. Response comes with status 200\n2. Response comes populated with \"templateId\" and \"attributes\".\n3. \"attributes\" field comes populated with list of attributes.\n\n◼ **OUTPUT FIELD:**\n* \"templateId\"\n* \"attributes\""
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8970 - Realtime request when: Realtime request with fullName, address and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as [\"ADR\"]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8970\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADR\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let fullName = \"VIDHYA VIJAYAKUMAR\";\r",
													"let addressLine1 = \"6021 CONNECTION DRIVE\";\r",
													"let postalCode = \"75039\";\r",
													"\r",
													"pm.variables.set(\"fullName\",fullName);\r",
													"pm.variables.set(\"addressLine1\",addressLine1);\r",
													"pm.variables.set(\"postalCode\", postalCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg: \"Realtime request with fullName, address and configTspOptions as ['ADR'] :\", type : \"PRINT_MSG\"});\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1', 'postalCode'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"pm.test(\"(5)- Validate Output > tspAppend comes populated in the response.\", ()=>{\r",
													"       pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"USA\",\n        \"emailAddress3\": \"\",\n        \"emailAddress1\": \"\",\n        \"emailAddress2\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"businessEmail\": \"\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"ADR\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8970](https://jira.cnvrmedia.net/browse/PID-8970)\n\n◼ NAME: Realtime request when: Realtime request with fullName, address and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"ADR\"\\]\n\n◼ DESCRIPTION: Realtime request when:\n\n*   Realtime request when:\n    *   fullName, addressLine1, postalCode are given\n    *   \"enableTspAppend\" is given as \"yes\" and\n    *   \"configTspOptions\" is given in input as \\[\"ADR\"\\]\n\n◼ PRECONDITION:\n\n*   clientCode is enabled for TSP.\n*   tsp match for given fullName and address exists.\n    \n\n◼ EXPECTED RESULT:\n\ntspAppend comes populated with the address (fullName, address) match tsp data in the response.\n\n◼ INPUT FIELDS:  \n\"configTspOptions\":\\[\"ADR\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp >  PID-8971 - Realtime request with fullName, emailAddress1 and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as [\"EML\"]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \" PID-8971\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let tspMatchData = utils.getTspMatchData('EML');\r",
													"\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"pm.test(\"(5)- Validate Output > tspAppend comes populated in the response with email-1 tsp match data.\", ()=>{\r",
													"     pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('I');\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"USA\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"emailAddress3\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"\",\n        \"businessEmail\": \"\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8971](https://jira.cnvrmedia.net/browse/PID-8971)\n\n◼ NAME: Realtime request with fullName, emailAddress1 and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"EML\"\\]\n\n◼ DESCRIPTION: Realtime request when:\n\n*   fullName, emailAddress1 are given\n*   \"enableTspAppend\" is given as \"yes\" and\n*   \"configTspOptions\" is given in input as \\[\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\n*   clientCode is enabled for TSP.\n*   tsp match for given fullName, emailAddress1 exists.\n    \n\n◼ EXPECTED RESULT:\n\ntspAppend comes populated in response with email-1 match (fullName, emailAddress1) tsp data.\n\n◼ INPUT FIELDS:  \n\"configTspOptions\":\\[\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp >  PID-8972 - Realtime request with fullName, address, \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as [\"ADR\", \"EML\"]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8972\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADREML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let fullName = \"VIDHYA VIJAYAKUMAR\";\r",
													"let addressLine1 = \"6021 CONNECTION DRIVE\";\r",
													"let postalCode = \"75039\";\r",
													"\r",
													"pm.variables.set(\"fullName\",fullName);\r",
													"pm.variables.set(\"addressLine1\",addressLine1);\r",
													"pm.variables.set(\"postalCode\", postalCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg: \"Realtime request with fullName, address,  and enableTspAppend as yes and configTspOptions as ['ADR', 'EML']\", type : \"PRINT_MSG\"});\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"pm.test(\"(5)- Validate Output > tspAppend comes populated in the response.\", ()=>{\r",
													"     pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"inputRecord\": {\n\"addressLine1\": \"{{addressLine1}}\",\n\"countryCode\": \"USA\",\n\"emailAddress3\": \"\",\n\"emailAddress1\": \"\",\n\"emailAddress2\": \"\",\n\"familyName\": \"\",\n\"fullName\": \"{{fullName}}\",\n\"postalCode\": \"{{postalCode}}\",\n\"businessEmail\": \"\",\n\"trustedBusinessId\": \"\",\n\"trustedIndividualId\": \"\",\n\"userCorrelationId\": \"\"\n},\n\"serviceConfig\": {\n\"configAddressHygiene\": {\n\"enablePac\": \"no\",\n\"enablePcoa\": \"no\"\n},\n\"configIdentity\": {\n\"mode\": \"MATCH\"\n},\n\"enableAddressHygiene\": \"yes\",\n\"enableEmailHygiene\": \"yes\",\n\"enableGlobalSuppression\": \"no\",\n\"enableIdentity\": \"yes\",\n\"enableNameHygiene\": \"yes\",\n\"enableOccupancyScore\": \"no\",\n\"enablePhoneHygiene\": \"yes\",\n\"enableTspAppend\": \"yes\",\n\"configTspOptions\": [\n\"ADR\",\n\"EML\"\n]\n}\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8972](https://jira.cnvrmedia.net/browse/PID-8972)\n\n◼ NAME: Realtime request with fullName, address, and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"ADR\", \"EML\"\\]\n\n◼ DESCRIPTION:\n\nRealtime request when:\n\n*   fullName, addressLine1, postalCode given in input.\n*   \"enableTspAppend\" is given as \"yes\" and\n*   \"configTspOptions\" is given in input as \\[\"ADR\",\"EML\"\\]\n*   tsp match exists for fullName, address and fullName\n    \n\n◼ PRECONDITION:\n\n*   clientCode is enabled for TSP.\n    \n\n◼ EXPECTED RESULT:\n\ntspAppend comes populated with the address match (fullName, address) tsp data.\n\n◼ INPUT FIELDS:  \n\"configTspOptions\":\\[\"ADR\",\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8973 - Realtime request with fullName, emailAddress1 and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as [\"ADR\", \"EML\"]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \" PID-8973\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADR#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('EML');\r",
													"\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"pm.test(\"(5)- Validate Output > tspAppend comes populated in the response with email-1 tsp match data.\", ()=>{\r",
													"     pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('I');\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"USA\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"ADR\",\"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -**\n\n[https://jira.cnvrmedia.net/browse/PID-8973](https://jira.cnvrmedia.net/browse/PID-8973)\n\n◼ NAME: Realtime request with fullName, emailAddress1 and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"ADR\", \"EML\"\\]\n\n◼ DESCRIPTION: Realtime request when:\n\n*   fullName, emailAddress1 given in input.\n*   \"enableTspAppend\" is given as \"yes\" and\n*   \"configTspOptions\" is given in input as \\[\"ADR\",\"EML\"\\]\n*   tsp match exists for fullName, emailAddress1\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.\n    \n\n◼ EXPECTED RESULT:  \ntspAppend comes populated with the email match (fullName, emailAddress1) tsp data.\n\n◼ INPUT FIELDS:  \n\"configTspOptions\":\\[\"ADR\",\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp >  PID-8974 - Realtime request with fullName, address when \"enableTspAppend\" as \"yes\" and \"configTspOptions\" is either empty or not provided.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#default\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"let fullName = \"VIDHYA VIJAYAKUMAR\";\r",
													"\r",
													"let addressLine1 = \"123 MAIN ST\";\r",
													"let postalCode = \"75039\";\r",
													"\r",
													"pm.variables.set(\"fullName\",fullName);\r",
													"pm.variables.set(\"addressLine1\",addressLine1);\r",
													"\r",
													"pm.variables.set(\"postalCode\", postalCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg: \"Realtime request with fullName, address,  and enableTspAppend as yes and configTspOptions as []\", type : \"PRINT_MSG\"});\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"pm.test(\"(5)- Validate Output > tspAppend comes populated in the response.\", ()=>{\r",
													"     //pm.expect(outputData.tspAppendData).to.contain.oneOf([\"H|\"]);\r",
													"     pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"inputRecord\": {\n\"addressLine1\": \"6021 CONNECTION DRIVE\",\n\"countryCode\": \"USA\",\n\"emailAddress3\": \"\",\n\"emailAddress1\": \"\",\n\"emailAddress2\": \"\",\n\"familyName\": \"\",\n\"fullName\": \"VIDHYA VIJAYAKUMAR\",\n\"postalCode\": \"75039\",\n\"businessEmail\": \"\",\n\"trustedBusinessId\": \"\",\n\"trustedIndividualId\": \"\",\n\"userCorrelationId\": \"\"\n},\n\"serviceConfig\": {\n\"configAddressHygiene\": {\n\"enablePac\": \"no\",\n\"enablePcoa\": \"no\"\n},\n\"configIdentity\": {\n\"mode\": \"MATCH\"\n},\n\"enableAddressHygiene\": \"yes\",\n\"enableEmailHygiene\": \"yes\",\n\"enableGlobalSuppression\": \"no\",\n\"enableIdentity\": \"yes\",\n\"enableNameHygiene\": \"yes\",\n\"enableOccupancyScore\": \"no\",\n\"enablePhoneHygiene\": \"yes\",\n\"enableTspAppend\": \"yes\",\n\"configTspOptions\": [\"\"]\n}\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8972](https://jira.cnvrmedia.net/browse/PID-8972)\n\n◼ NAME: Realtime request with fullName, address, and \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"ADR\", \"EML\"\\]\n\n◼ DESCRIPTION:\n\nRealtime request when:\n\n*   fullName, addressLine1, postalCode given in input.\n*   \"enableTspAppend\" is given as \"yes\" and\n*   \"configTspOptions\" is given in input as \\[\"ADR\",\"EML\"\\]\n*   tsp match exists for fullName, address and fullName\n    \n\n◼ PRECONDITION:\n\n*   clientCode is enabled for TSP.\n    \n\n◼ EXPECTED RESULT:\n\ntspAppend comes populated with the address match (fullName, address) tsp data.\n\n◼ INPUT FIELDS:  \n\"configTspOptions\":\\[\"ADR\",\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8975 - Realtime request with \"enableTspAppend\" as \"no\" and \"configTspOptions\" is given as \"ADR\"/\"EML\" / \"ADR\",\"EML\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8975\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('ADREML');\r",
													"\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"addressLine1\", tspMatchData.addressLine1);\r",
													"pm.variables.set(\"postalCode\", tspMatchData.postalCode);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1','postalCode','emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"pm.test(\"(5)- Validate Output > tspAppend comes populated empty in the response\", ()=>{\r",
													"    utils.validateIfEmpty(outputData.tspAppendData);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"USA\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"emailAddress3\": \"\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"businessEmail\": \"\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"no\",\n        \"configTspOptions\": [\n            \"ADR\",\"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ JIRA: [https://jira.cnvrmedia.net/browse/PID-8975](https://jira.cnvrmedia.net/browse/PID-8975)\n\n◼ NAME: Realtime request with \"enableTspAppend\" as \"no\" and \"configTspOptions\" is given as \"ADR\"/\"EML\" / \"ADR\",\"EML\"\n\n◼ DESCRIPTION: Realtime request when:\n\n*   \"enableTspAppend\" is given as \"no\" and\n*   \"configTspOptions\" is given as \"ADR\"/\"EML\"/\"ADR\",\"EML\"\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.\n*   tsp match for given fullName, address / fullName, emailAddressLine1 / lastName address\n    \n\n◼ EXPECTED RESULT:\n\ntspAppend comes populated empty in the response."
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8976 - Realtime request with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" is given as \"ADR\"/\"EML\" / \"ADR\",\"EML\" and clientCode is disabled for TSP.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8976\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('ADREML');\r",
													"\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"addressLine1\", tspMatchData.addressLine1);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);\r",
													"pm.variables.set(\"postalCode\", tspMatchData.postalCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1','postalCode','emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"pm.test(\"(5)- Validate Output > tspAppend comes populated empty in the response\", ()=>{\r",
													"    utils.validateIfEmpty(outputData.tspAppendData);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_DISABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_DISABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"USA\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"ADR\",\"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ JIRA: [https://jira.cnvrmedia.net/browse/PID-8976](https://jira.cnvrmedia.net/browse/PID-8976)\n\n◼ NAME: Realtime request with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" is given as \"ADR\"/\"EML\" / \"ADR\",\"EML\" and clientCode is disabled for TSP.\n\n◼ DESCRIPTION: Realtime request when:\n\n*   \"enableTspAppend\" is given as \"yes\" and\n*   \"configTspOptions\" is given as \"ADR\"/\"EML\"/\"ADR\",\"EML\"\n*   clientCode is disabled for TSP.\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.\n    \n\n◼ EXPECTED RESULT:  \ntspAppend comes populated empty in the response."
									},
									"response": []
								},
								{
									"name": "realtime > tsp >  PID-8977 - Realtime request with TSP individual level address and email-1 match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\" .",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADREML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_TSP_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_TSP_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('ADREML');\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"addressLine1\", tspMatchData.addressLine1);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);\r",
													"pm.variables.set(\"postalCode\", tspMatchData.postalCode);\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'fullName' : tspMatchData.fullName, \r",
													"    'addressLine1':tspMatchData.addressLine1, \r",
													"    'postalCode': tspMatchData.postalCode,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"addressMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"\r",
													"//==============================================================================\r",
													"\r",
													"request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request2.testerInput = {\r",
													"    'fullName': tspMatchData.fullName,\r",
													"    'emailAddress1':tspMatchData.emailAddress1,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"\r",
													"(function createMatchingRecord() {  \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request2), (error, response) => {            \r",
													"        pm.variables.set(\"emailMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"let addressMatchRecord = pm.variables.get(\"addressMatchRecord\");\r",
													"let emailMatchRecord = pm.variables.get(\"emailMatchRecord\");\r",
													"\r",
													"utils.doTestLogging({msg: \"Realtime request with TSP individual level address and email-1 match attributes and 'tspAppend' as 'yes' and 'configTspOptions' given with 'ADR','EML'\", type : \"PRINT_MSG\"});\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName','addressLine1','emailAddress1','postalCode','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \r",
													"                \"individual-level-addres-match-record\" : addressMatchRecord,\r",
													"                \"household-level-email-match-record\" : emailMatchRecord,\r",
													"            } \r",
													"        });\r",
													"\r",
													"utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"\r",
													"pm.test(\"(6)- Validate Existing data > tspAppend comes populated for existing individual level address and email attributes\", ()=>{\r",
													"    pm.expect(addressMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(addressMatchRecord.tspAppendData[0]).to.equal('I');\r",
													"    pm.expect(emailMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(emailMatchRecord.tspAppendData[0]).to.equal('I');\r",
													"})\r",
													"pm.test(\"(7)- Validate Output > tspAppend comes populated in the response with individual level address match tsp data.\", ()=>{\r",
													"    pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('I');\r",
													"    pm.expect(outputData.tspAppendData).to.equal(pm.variables.get('addressMatchRecord').tspAppendData);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"inputRecord\": {\n\"addressLine1\": \"{{addressLine1}}\",\n\"countryCode\": \"USA\",\n\"emailAddress3\": \"\",\n\"emailAddress1\": \"{{emailAddress1}}\",\n\"emailAddress2\": \"\",\n\"familyName\": \"\",\n\"fullName\": \"{{fullName}}\",\n\"postalCode\": \"{{postalCode}}\",\n\"businessEmail\": \"\",\n\"trustedBusinessId\": \"\",\n\"trustedIndividualId\": \"\",\n\"userCorrelationId\": \"\"\n},\n\"serviceConfig\": {\n\"configAddressHygiene\": {\n\"enablePac\": \"no\",\n\"enablePcoa\": \"no\"\n},\n\"configIdentity\": {\n\"mode\": \"MATCH\"\n},\n\"enableAddressHygiene\": \"yes\",\n\"enableEmailHygiene\": \"yes\",\n\"enableGlobalSuppression\": \"no\",\n\"enableIdentity\": \"yes\",\n\"enableNameHygiene\": \"yes\",\n\"enableOccupancyScore\": \"no\",\n\"enablePhoneHygiene\": \"yes\",\n\"enableTspAppend\": \"yes\",\n\"configTspOptions\": [\"ADR\", \"EML\"]\n}\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8977](https://jira.cnvrmedia.net/browse/PID-8977)\n\n◼ NAME: Realtime request with TSP individual level address and email1 match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\"\n\n◼ DESCRIPTION:\n\nRealtime request when:\n\n*   individual level address (fullName, address) and email-1 (fullname, email1) are given in input.\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"ADR\",\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\nclientCode is TSP enabled.\n\n◼ EXPECTED RESULT:\n\nIndividual level address match TSP data comes populated in tspAppend.\n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"ADR\",\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8978 - Realtime request with individual level address and household level email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \" PID-8978\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADR#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('ADREML');\r",
													"\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"addressLine1\", tspMatchData.addressLine1);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);\r",
													"pm.variables.set(\"postalCode\", tspMatchData.postalCode);\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'fullName' : tspMatchData.fullName, \r",
													"    'addressLine1':tspMatchData.addressLine1, \r",
													"    'postalCode': tspMatchData.postalCode,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"addressMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"\r",
													"//==============================================================================\r",
													"\r",
													"request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request2.testerInput = {\r",
													"    'emailAddress1':tspMatchData.emailAddress1,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {  \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request2), (error, response) => {            \r",
													"        pm.variables.set(\"emailMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"let addressMatchRecord = pm.variables.get('addressMatchRecord');\r",
													"let emailMatchRecord = pm.variables.get('emailMatchRecord');\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1','postalCode','emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName','addressLine1','emailAddress1','postalCode','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \r",
													"                \"individual-level-addres-match-record\" : addressMatchRecord,\r",
													"                \"household-level-email-match-record\" : emailMatchRecord,\r",
													"            } \r",
													"        });\r",
													"\r",
													"utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"\r",
													"pm.test(\"(6)- Validate Existing data > tspAppend comes populated for existing individual level address and household level email match attributes\", ()=>{\r",
													"    pm.expect(addressMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(addressMatchRecord.tspAppendData[0]).to.equal('I');\r",
													"    pm.expect(emailMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(emailMatchRecord.tspAppendData[0]).to.equal('H');\r",
													"})\r",
													"pm.test(\"(7)- Validate Output > tspAppend comes populated in the response with individual level address match tsp data.\", ()=>{\r",
													"    pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('I');\r",
													"    pm.expect(outputData.tspAppendData).to.equal(pm.variables.get('addressMatchRecord').tspAppendData);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"USA\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"ADR\",\"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8978](https://jira.cnvrmedia.net/browse/PID-8978)\n\n◼ NAME: Realtime request with individual level address and household level email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\"\n\n◼ DESCRIPTION: Realtime request when:\n\n*   individual level address (fullName, address) and household level email-1 match attributes (fullName, emailAddress1) are given in input.\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"ADR\",\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.\n    \n\n◼ EXPECTED RESULT:  \nIndividual level address match TSP data comes populated in tspAppend.\n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"ADR\",\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp >  PID-8979 - Realtime request with household level address and individual level email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8979\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADREML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"pm.variables.set(\"fullName\", \"VIDHYA VIJAYAKUMAR\");\r",
													"pm.variables.set(\"addressLine1\", \"123 MAIN ST\");\r",
													"pm.variables.set(\"postalCode\", \"75039\");\r",
													"pm.variables.set(\"emailAddress1\", \"vidhya.vijayakumar@gmail.com\");\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_TSP_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_TSP_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'fullName' : \"VIDHYA VIJAYAKUMAR\", \r",
													"    'addressLine1':\"123 MAIN ST\", \r",
													"    'postalCode': \"75039\",\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"addressMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"\r",
													"//==============================================================================\r",
													"\r",
													"request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request2.testerInput = {\r",
													"    'fullName': \"VIDHYA VIJAYAKUMAR\",\r",
													"    'emailAddress1': \"vidhya.vijayakumar@gmail.com\",\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"\r",
													"let fullName = pm.variables.set(\"fullName\", \"VIDHYA VIJAYAKUMAR\");\r",
													"(function createMatchingRecord() {  \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request2), (error, response) => {            \r",
													"        pm.variables.set(\"emailMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"let addressMatchRecord = pm.variables.get(\"addressMatchRecord\");\r",
													"let emailMatchRecord = pm.variables.get(\"emailMatchRecord\");\r",
													"\r",
													"utils.doTestLogging({msg: \"Realtime request with household level address and individual level email-1 tsp match attributes and 'tspAppend' as 'yes' and 'configTspOptions' given with 'ADR','EML'\", type : \"PRINT_MSG\"});\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName','addressLine1','emailAddress1','postalCode','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \r",
													"                \"household-level-addres-match-record\" : addressMatchRecord,\r",
													"                \"individual-level-email-match-record\" : emailMatchRecord,\r",
													"            } \r",
													"        });\r",
													"\r",
													"utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"\r",
													"pm.test(\"(6)- Validate Existing data > tspAppend comes populated for existing household level address and individual level email attributes\", ()=>{\r",
													"    pm.expect(addressMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9',\"|\"]);\r",
													"    //pm.expect(addressMatchRecord.tspAppendData[0]).to.equal('H');\r",
													"    // pm.expect(emailMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"     pm.expect(emailMatchRecord.tspAppendData[0]).to.equal('I');\r",
													"})\r",
													"pm.test(\"(7)- Validate Output > tspAppend comes populated in the response with individual level email match tsp data.\", ()=>{\r",
													"    pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('I');\r",
													"    pm.expect(outputData.tspAppendData).to.equal(pm.variables.get('emailMatchRecord').tspAppendData);\r",
													"});\r",
													"\r",
													"pm.variables.clear();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"inputRecord\": {\n\"addressLine1\": \"{{addressLine1}}\",\n\"countryCode\": \"USA\",\n\"emailAddress3\": \"\",\n\"emailAddress1\": \"{{emailAddress1}}\",\n\"emailAddress2\": \"\",\n\"familyName\": \"\",\n\"fullName\": \"{{fullName}}\",\n\"postalCode\": \"{{postalCode}}\",\n\"businessEmail\": \"\",\n\"trustedBusinessId\": \"\",\n\"trustedIndividualId\": \"\",\n\"userCorrelationId\": \"\"\n},\n\"serviceConfig\": {\n\"configAddressHygiene\": {\n\"enablePac\": \"no\",\n\"enablePcoa\": \"no\"\n},\n\"configIdentity\": {\n\"mode\": \"MATCH\"\n},\n\"enableAddressHygiene\": \"yes\",\n\"enableEmailHygiene\": \"yes\",\n\"enableGlobalSuppression\": \"no\",\n\"enableIdentity\": \"yes\",\n\"enableNameHygiene\": \"yes\",\n\"enableOccupancyScore\": \"no\",\n\"enablePhoneHygiene\": \"yes\",\n\"enableTspAppend\": \"yes\",\n\"configTspOptions\": [\"ADR\", \"EML\"]\n}\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8979](https://jira.cnvrmedia.net/browse/PID-8979)\n\n◼ NAME: Realtime request with household level address and individual level email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\"\n\n◼ DESCRIPTION:\n\nRealtime request when:\n\n*   household level address (lastName, address) and indivudal level email-1 match attributes (fullname, emailAddress1) are given in input.\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"ADR\",\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\nclientCode is TSP enabled.\n\n◼ EXPECTED RESULT:\n\nIndividual level email-1 match TSP data comes populated in tspAppend as response.\n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"ADR\",\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8980 - Realtime request with household level address and email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8980\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADR#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('ADREML');\r",
													"let name = tspMatchData.fullName.split(\" \");\r",
													"let fullName = name[name.length-1];\r",
													"pm.variables.set(\"fullName\", fullName);\r",
													"pm.variables.set(\"addressLine1\", tspMatchData.addressLine1);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);\r",
													"pm.variables.set(\"postalCode\", tspMatchData.postalCode);\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'fullName' : fullName, \r",
													"    'addressLine1':tspMatchData.addressLine1, \r",
													"    'postalCode': tspMatchData.postalCode,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"addressMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"\r",
													"//==============================================================================\r",
													"\r",
													"request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request2.testerInput = {\r",
													"    'emailAddress1':tspMatchData.emailAddress1,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {  \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request2), (error, response) => {            \r",
													"        pm.variables.set(\"emailMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"let addressMatchRecord = pm.variables.get('addressMatchRecord')\r",
													"let emailMatchRecord = pm.variables.get('emailMatchRecord')\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1','postalCode','emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName','addressLine1','emailAddress1','postalCode','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \r",
													"                \"household-level-addres-match-record\" : addressMatchRecord,\r",
													"                \"household-level-email-match-record\" : emailMatchRecord,\r",
													"            } \r",
													"        });\r",
													"utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"\r",
													"pm.test(\"(6)- Validate Existing Data > tspAppend comes populated for existing household level address and email match attributes.\", ()=>{\r",
													"    pm.expect(addressMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(addressMatchRecord.tspAppendData[0]).to.equal('H');\r",
													"    pm.expect(emailMatchRecord.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(emailMatchRecord.tspAppendData[0]).to.equal('H');\r",
													"});\r",
													"pm.test(\"(7)- Validate Output > tspAppend comes populated in the response with household level address match tsp data.\", ()=>{\r",
													"    pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('H');\r",
													"    pm.expect(outputData.tspAppendData).to.equal(pm.variables.get('addressMatchRecord').tspAppendData);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"USA\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"ADR\",\"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -**\n\n[https://jira.cnvrmedia.net/browse/PID-8980](https://jira.cnvrmedia.net/browse/PID-8980)\n\n◼ NAME: Realtime request with household level address and email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" given with \"ADR\",\"EML\"\n\n◼ DESCRIPTION: Realtime request when:\n\n*   household level address (lastName, address) and email-1 (fullName, emailAddress1) match attributes are given in input.\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"ADR\",\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.\n    \n\n◼ EXPECTED RESULT:  \nHousehold level address match TSP data comes populated in tspAppend.\n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"ADR\",\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8982 - Realtime request with household level tsp match email1, email2, email3 attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" as [\"EML\" ]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8982\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADR#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"let emailAddress1 = \"VIDHYA.VIJAYAKUMAR@GMAIL.COM\";\r",
													"let emailAddress2 = \"VISWANATHA.REDDY@YAHOO.COM\";\r",
													"let emailAddress3 = \"SIDHAJYOTHI.MISHRA@AOL.COM\"\r",
													"pm.variables.set(\"emailAddress1\",emailAddress1);\r",
													"pm.variables.set(\"emailAddress2\",emailAddress2);\r",
													"pm.variables.set(\"emailAddress3\",emailAddress3);\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'emailAddress1': emailAddress1,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"email1MatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"\r",
													"//==============================================================================\r",
													"request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request2.testerInput = {\r",
													"    'emailAddress1': emailAddress2,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request2), (error, response) =>{            \r",
													"        pm.variables.set(\"email2MatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"//==============================================================================\r",
													"request3 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request3.testerInput = {\r",
													"    'emailAddress1': emailAddress3,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request3), (error, response) =>{            \r",
													"        pm.variables.set(\"email3MatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"let email1MatchRecord = pm.variables.get('email1MatchRecord');\r",
													"let email2MatchRecord = pm.variables.get('email2MatchRecord');\r",
													"let email3MatchRecord = pm.variables.get('email3MatchRecord');\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'emailAddress2','emailAddress3'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['emailAddress1','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \r",
													"                \"email1-match-record\" : email1MatchRecord,\r",
													"                \"email2-match-record\" : email2MatchRecord,\r",
													"                \"email3-match-record\" : email3MatchRecord\r",
													"            } \r",
													"        });\r",
													"utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"\r",
													"pm.test(\"(6)- Validate Existing Data > tspAppend comes populated for existing household level email1, email2, email3 match\", ()=>{\r",
													"    \r",
													"    let alphaNumaricList = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9'];\r",
													"\r",
													"    pm.expect(email1MatchRecord.tspAppendData).to.contain.oneOf(alphaNumaricList);\r",
													"    pm.expect(email2MatchRecord.tspAppendData).to.contain.oneOf(alphaNumaricList);\r",
													"    pm.expect(email3MatchRecord.tspAppendData).to.contain.oneOf(alphaNumaricList);\r",
													"    pm.expect(email1MatchRecord.tspAppendData[0]).to.equal('H');\r",
													"    pm.expect(email2MatchRecord.tspAppendData[0]).to.equal('H');\r",
													"    pm.expect(email3MatchRecord.tspAppendData[0]).to.equal('H');\r",
													"});\r",
													"pm.test(\"(7)- Validate Output > tspAppend comes populated in the response with household level address match tsp data.\", ()=>{\r",
													"    \r",
													"    pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('H');\r",
													"    pm.expect(outputData.tspAppendData).to.equal(pm.variables.get('email1MatchRecord').tspAppendData);\r",
													"});\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"USA\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"emailAddress2\": \"{{emailAddress2}}\",\n        \"emailAddress3\": \"{{emailAddress3}}\",\n        \"fullName\": \"\",\n        \"postalCode\": \"\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"ADR\",\"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8982](https://jira.cnvrmedia.net/browse/PID-8982)\n\n◼ NAME: Realtime request with household level tsp match email1, email2, email3 attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"EML\" \\]\n\n◼ DESCRIPTION: Realtime request with:\n\n*   emailAddress1, emailAddress2, emailAddress3 have TSP household level match.\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.  \n    ◼ EXPECTED RESULT:  \n    Household level email-1 tsp match data comes populated in tspAppend as response.\n    \n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8983 - Realtime request with individual level tsp match email-3 and household level email-2, email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" as [\"EML\" ]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8983\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_TSP_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_TSP_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"\r",
													"let emailAddress1 = \"VIDHYA.VIJAYAKUMAR@GMAIL.COM\";\r",
													"let emailAddress2 = \"VISWANATHA.REDDY@YAHOO.COM\";\r",
													"let emailAddress3 = \"SIDHAJYOTHI.MISHRA@AOL.COM\"\r",
													"pm.variables.set(\"emailAddress1\",emailAddress1);\r",
													"pm.variables.set(\"emailAddress2\",emailAddress2);\r",
													"pm.variables.set(\"emailAddress3\",emailAddress3);\r",
													"\r",
													"//===================================================================================\r",
													"\r",
													"let tspMatchData = utils.getTspMatchData('EML');\r",
													"pm.variables.set(\"fullName\", \"SIDHAJYOTHI MISHRA\");\r",
													"\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'fullName' : \"SIDHAJYOTHI MISHRA\", \r",
													"    'emailAddress1': emailAddress3,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"emailMatchRecord3\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"\r",
													"//==============================================================================\r",
													"\r",
													"request2 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request2.testerInput = {\r",
													"    'emailAddress1': emailAddress1,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"EML\"]\r",
													"};    \r",
													"\r",
													"(function createMatchingRecord() {  \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request2), (error, response) => {            \r",
													"        pm.variables.set(\"emailMatchRecord1\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"\r",
													"//===================================================================================\r",
													"\r",
													"request3 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request3.testerInput = {\r",
													"    'emailAddress1': emailAddress2,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"EML\"]\r",
													"};    \r",
													"\r",
													"(function createMatchingRecord() {  \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request3), (error, response) => {            \r",
													"        pm.variables.set(\"emailMatchRecord2\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"let emailMatchRecord1 = pm.variables.get('emailMatchRecord1');\r",
													"let emailMatchRecord2 = pm.variables.get('emailMatchRecord2');\r",
													"let emailMatchRecord3 = pm.variables.get('emailMatchRecord3');\r",
													"\r",
													"utils.doTestLogging({msg: \"Realtime request with household level address and individual level email-1 tsp match attributes and 'tspAppend' as 'yes' and 'configTspOptions' given with 'ADR','EML'\", type : \"PRINT_MSG\"});\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1', 'emailAddress2', 'emailAddress3'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['emailAddress1','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \r",
													"                \"email1-match-record\" : emailMatchRecord1,\r",
													"                \"email2-match-record\" : emailMatchRecord2,\r",
													"                \"email3-match-record\" : emailMatchRecord3\r",
													"            } \r",
													"        });\r",
													"utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"\r",
													"pm.test(\"(6)- Validate Existing Data > tspAppend comes populated for existing household level email1, email2, and email3 individual match attributes\", ()=>{\r",
													"    \r",
													"    let alphaNumaricList = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9'];\r",
													"\r",
													"    pm.expect(emailMatchRecord1.tspAppendData).to.contain.oneOf(alphaNumaricList);\r",
													"    pm.expect(emailMatchRecord2.tspAppendData).to.contain.oneOf(alphaNumaricList);\r",
													"    pm.expect(emailMatchRecord3.tspAppendData).to.contain.oneOf(alphaNumaricList);\r",
													"    pm.expect(emailMatchRecord1.tspAppendData[0]).to.equal('H');\r",
													"    pm.expect(emailMatchRecord2.tspAppendData[0]).to.equal('H');\r",
													"    pm.expect(emailMatchRecord3.tspAppendData[0]).to.equal('I');\r",
													"});\r",
													"pm.test(\"(7)- Validate Output > Individual level emailAddress3 match tsp data comes populated as part of response in tspAppend.\", ()=>{\r",
													"    \r",
													"    pm.expect(outputData.tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"    pm.expect(outputData.tspAppendData[0]).to.equal('I');\r",
													"    pm.expect(outputData.tspAppendData).to.equal(pm.variables.get('emailMatchRecord3').tspAppendData);\r",
													"});\r",
													"pm.variables.clear();\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_TSP_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"inputRecord\": {\n\"addressLine1\": \"\",\n\"countryCode\": \"USA\",\n\"emailAddress3\": \"{{emailAddress3}}\",\n\"emailAddress1\": \"{{emailAddress1}}\",\n\"emailAddress2\": \"{{emailAddress2}}\",\n\"familyName\": \"\",\n\"fullName\": \"{{fullName}}\",\n\"postalCode\": \"\",\n\"businessEmail\": \"\",\n\"trustedBusinessId\": \"\",\n\"trustedIndividualId\": \"\",\n\"userCorrelationId\": \"\"\n},\n\"serviceConfig\": {\n\"configAddressHygiene\": {\n\"enablePac\": \"no\",\n\"enablePcoa\": \"no\"\n},\n\"configIdentity\": {\n\"mode\": \"MATCH\"\n},\n\"enableAddressHygiene\": \"yes\",\n\"enableEmailHygiene\": \"yes\",\n\"enableGlobalSuppression\": \"no\",\n\"enableIdentity\": \"yes\",\n\"enableNameHygiene\": \"yes\",\n\"enableOccupancyScore\": \"no\",\n\"enablePhoneHygiene\": \"yes\",\n\"enableTspAppend\": \"yes\",\n\"configTspOptions\": [\"EML\"]\n}\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8983](https://jira.cnvrmedia.net/browse/PID-8983)\n\n◼ NAME: Realtime request with individual level tsp match email-3 and household level email-2, email-1 tsp match attributes and \"tspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"EML\" \\]\n\n◼ DESCRIPTION:\n\nRealtime request with:\n\n*   given fullName,email-3, have TSP individual level match.\n*   given email-1, email-2 have TSP household level match.\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\nclientCode is TSP enabled.\n\n◼ EXPECTED RESULT:\n\nIndividual level emailAddress3 match tsp data comes populated as part of response in tspAppend.\n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8984 - Request with TSP individual / household address level match attributes when \"configTspOptions\" is given as \"EML\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8984\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADR#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('ADREML');\r",
													"\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"addressLine1\", tspMatchData.addressLine1);\r",
													"pm.variables.set(\"postalCode\", tspMatchData.postalCode);\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'fullName': tspMatchData.fullName,\r",
													"    'addressLine1': tspMatchData.addressLine1,\r",
													"    'postalCode': tspMatchData.postalCode,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"ADR\",\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"addressMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1','postalCode'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName','addressLine1','postalCode','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \"email1-match-record\" : pm.variables.get('addressMatchRecord')\r",
													"            } \r",
													"        });\r",
													"pm.test(\"(6) - Validate Existing Data > tsp match exists for given address match attributes\", ()=>{\r",
													"    pm.expect(pm.variables.get('addressMatchRecord').tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"});\r",
													"pm.test(\"(7)- Validate Output > tspAppend comes populated in response without any TSP data.\", ()=>{\r",
													"    pm.expect(outputData.tspAppendData).to.not.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"});\r",
													"\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"countryCode\": \"USA\",\n        \"fullName\": \"{{fullName}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"EML\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8984](https://jira.cnvrmedia.net/browse/PID-8984)\n\n◼ NAME: Realtime request with TSP individual / household address level match attributes when \"configTspOptions\" is given as \"EML\"\n\n◼ DESCRIPTION: Realtime request with:\n\n*   individual/household level address match attributes\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"EML\"\\]\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.\n    \n\n◼ EXPECTED RESULT:  \ntspAppend comes populated in response without any TSP data.\n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"EML\"\\]"
									},
									"response": []
								},
								{
									"name": "realtime > tsp > PID-8985 - Realtime request with TSP household/individual email level match attributes when \"tspAppend\" as \"yes\"  and \"configTspOptions\" is given as \"ADR\" or blank",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8985\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"realtime > tsp\",\r",
													"                    tags: \"#realtime#tsp#configTspOptions#ADR\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===============================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===============================================================================\r",
													"\r",
													"requestType = ''\r",
													"requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_TSP_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_TSP_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"\r",
													"//===============================================================================\r",
													"let tspMatchData = utils.getTspMatchData('EML');\r",
													"\r",
													"pm.variables.set(\"fullName\", tspMatchData.fullName);\r",
													"pm.variables.set(\"emailAddress1\", tspMatchData.emailAddress1);\r",
													"\r",
													"//===============================================================================\r",
													"\r",
													"request1 = JSON.parse(JSON.stringify(requestDetail));\r",
													"request1.testerInput = {\r",
													"    'fullName': tspMatchData.fullName,\r",
													"    'emailAddress1': tspMatchData.emailAddress1,\r",
													"    'enableTspAppend':'yes',\r",
													"    'configTspOptions': [\"EML\"]\r",
													"};    \r",
													"(function createMatchingRecord() {          \r",
													"    pm.sendRequest(utils.constructIdentityRequestWithTSPConfig(request1), (error, response) =>{            \r",
													"        pm.variables.set(\"emailMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
													"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1'] });\r",
													"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['tspAppendData'] });\r",
													"utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"            fields : ['fullName','emailAddress1','tspAppendData'],\r",
													"            existingRecords : { \r",
													"                \"email1-match-record\" : pm.variables.get('emailMatchRecord')\r",
													"            } \r",
													"        });\r",
													"pm.test(\"(6) - Validate Existing Data > tsp match exists for given email match attributes\", ()=>{\r",
													"    pm.expect(pm.variables.get('emailMatchRecord').tspAppendData).to.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"});\r",
													"pm.test(\"(7)- Validate Output > tspAppend comes populated in response without any TSP data.\", ()=>{\r",
													"    pm.expect(outputData.tspAppendData).to.not.contain.oneOf([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",'0','1','2','3','4','5','6','7','8','9']);\r",
													"});\r",
													"pm.variables.clear();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_IDENTITY_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputRecord\": {\n        \"addressLine1\": \"\",\n        \"countryCode\": \"USA\",\n        \"fullName\": \"{{fullName}}\",\n        \"emailAddress1\": \"{{emailAddress1}}\",\n        \"postalCode\": \"\",\n        \"trustedBusinessId\": \"\",\n        \"trustedIndividualId\": \"\",\n        \"userCorrelationId\": \"\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n        \"configIdentity\": {\n            \"mode\": \"MATCH\"\n        },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"yes\",\n        \"configTspOptions\": [\n            \"ADR\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8985](https://jira.cnvrmedia.net/browse/PID-8985)\n\n◼ NAME: Realtime request with TSP household/individual email level match attributes when \"configTspOptions\" is given as \"ADR\" or blank\n\n◼ DESCRIPTION:\n\nRealtime request with:\n\n*   individual/household level email match attributes\n*   \"enableTspAppend\" is given as \"yes\" and \"configTspOptions\" is given as \\[\"ADR\"\\] / \\[\"\"\\]\n    \n\n◼ PRECONDITION:\n\n*   clientCode is TSP enabled.\n    \n\n◼ EXPECTED RESULT:  \ntspAppend comes populated in response without any TSP data.\n\n◼ INPUT FIELDS:  \n\"tspAppend\":\"YES\",  \n\"configTspOptions\":\\[\"ADR\"\\]"
									},
									"response": []
								},
								{
									"name": "terminate-tsp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"tsp\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "business-match",
							"item": [
								{
									"name": "init-business-match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realtime > business-match (PID-8620) - Realtime identity request with companyName and businessEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName and businessEmail are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.businessEmail);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  businessId comes populated in response.\",()=>{\r",
													"    utils.validateIfNonEmpty(outputData.businessId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"businessEmail=\" + inputData.businessEmail\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"businessId=\" + outputData.businessId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8620\",\r",
													"                    sprint: \"21.03.04\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#withBusinessEmail\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"companyName\":utils.getCompanyName(),\"businessEmail\":utils.getEmail()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"\",\r\n    \"companyName\":\"{{companyName}}\",\r\n    \"businessEmail\":\"{{businessEmail}}\",\r\n    \"businessPhone\":\"\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8620](https://jira.cnvrmedia.net/browse/PID-8620)\n\n◼ NAME: Realtime identity request with companyName and businessEmail\n\n◼ DESCRIPTION:\n\nIdentity request's submitted with\ncompanyName and businessEmail provided in the input.\n\n◼ EXPECTED RESULT:\n\nbusinessId comes populated in response.\n◼ INPUT FIELDS:\n\n\"companyName\"\n\"buissinessEmail\"\n\n◼ OUTPUT FIELDS:\n\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime > business-match (PID-8621) - Realtime identity request with companyName and businessPhone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"if(outputData.businessId == undefined || outputData.businessId == ''){\r",
													"        pm.test(\"Input phone no(\"+ outputData.phone1 +\") is not in threshold & new businessId is not empty in output.\", () => {\r",
													"            utils.validateIfNonEmpty(outputData.businessId);\r",
													"        });\r",
													"        pm.test.skip(\"Skipping all other test as input phone no is in threshhold.\")\r",
													"        return;\r",
													"    }  \r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName and businessPhone are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.businessPhone);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  businessId comes populated in response.\",()=>{\r",
													"    pm.expect(outputData.businessId).to.not.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"businessPhone=\" + inputData.businessPhone\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"businessId=\" + outputData.businessId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8621\",\r",
													"                    sprint: \"21.03.04\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#withBusinessPhone\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"companyName\":utils.getCompanyName(),\"businessPhone\":utils.getValidPhone1()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"\",\r\n    \"companyName\":\"{{companyName}}\",\r\n    \"businessEmail\":\"\",\r\n    \"businessPhone\":\"{{businessPhone}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8621](https://jira.cnvrmedia.net/browse/PID-8621)\n\n◼ NAME: Realtime identity request with companyName and businessPhone\n\n◼ DESCRIPTION:\n\nIdentity request's submitted with\ncompanyName and businessPhone provided in the input.\n\n◼ EXPECTED RESULT:\n\nbusinessId comes populated in response.\n\n◼ INPUT FIELDS:\n\n\"companyName\"\n\"buissinessPhone\"\n\n◼ OUTPUT FIELDS:\n\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime > business-match (PID-8622) - Realtime identity request with companyName and addressLine1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName, addressLine1 and postelCode are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  businessId comes populated response.\",()=>{\r",
													"    pm.expect(outputData.businessId).to.not.equal(\"\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"addressLine1=\" + inputData.addressLine1+ \", \" \r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"addressLine1=\" + outputData.addressLine1+ \", \" \r",
													"     + \"postalCode=\" + outputData.postalCode + \", \"\r",
													"     + \"businessId=\" + outputData.businessId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8622\",\r",
													"                    sprint: \"21.03.04\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#withAddress\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"companyName\":utils.getCompanyName()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"{{addressLine1}}\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"\",\r\n    \"companyName\":\"{{companyName}}\",\r\n    \"businessEmail\":\"\",\r\n    \"businessPhone\":\"\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8622](https://jira.cnvrmedia.net/browse/PID-8622)\n\n◼ NAME: Realtime identity request with companyName and addressLine1\n\n◼ DESCRIPTION:\n\nIdentity request's submitted with\ncompanyName and addressLine1 provided in the input.\n\n◼ EXPECTED RESULT:\n\nbusinessId comes populated in response.\n\n◼ INPUT FIELDS:\n\n\"companyName\"\n\"addressLine1\"\n\n◼ OUTPUT FIELDS:\n\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8652) -Realtime identity request with companyName and businessKeys1 or businessKeys2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//===============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//==============================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//==============================================================\r",
													"if(requestType == \"BUSINESSKEYS1_REQUEST\") {\r",
													"    (function verifyBusinessKey1Request() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-request with companyName and businessKeys1.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessKeys1', 'businessKeys2'] });\r",
													"        \r",
													"        pm.test(\"(4) Validate Input -> businessKeys1 is provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.businessKeys1);\r",
													"        });\r",
													"        \r",
													"        utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"        \r",
													"        pm.test(\"(6) Validate output ->  businessId comes populated response.\",()=>{\r",
													"            pm.expect(outputData.businessId).to.not.equal(\"\");\r",
													"        });\r",
													"\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        let companyName = pm.variables.get(\"companyName\");\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"companyName\",companyName);\r",
													"        pm.variables.set(\"requestType\", \"BUSINESSKEYS2_REQUEST\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//==============================================================\r",
													"if(requestType == \"BUSINESSKEYS2_REQUEST\") {\r",
													"    (function verifyBusinessKey1Request() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-request with companyName and businessKeys2.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessKeys1', 'businessKeys2'] });\r",
													"        \r",
													"        pm.test(\"(4) Validate Input -> businessKeys2 is provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.businessKeys2);\r",
													"        });\r",
													"        \r",
													"        utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"        \r",
													"        pm.test(\"(6) Validate output ->  businessId comes populated response.\",()=>{\r",
													"            pm.expect(outputData.businessId).to.not.equal(\"\");\r",
													"        });\r",
													"\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear(); \r",
													"    })();\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//===============================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8652\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#businessMatch#businessKeys\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//===================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let requestType = \"\";\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"BUSINESSKEYS1_REQUEST\";\r",
													"        }\r",
													"})()\r",
													"//===================================================================\r",
													"\r",
													"if(requestType == \"BUSINESSKEYS1_REQUEST\"){\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"requestType\", \"BUSINESSKEYS1_REQUEST\");\r",
													"    pm.variables.set(\"companyName\",  utils.getCompanyName());\r",
													"    pm.variables.set(\"businessKeys1\", _.random(99999,999999));\r",
													"    pm.variables.set(\"businessKeys2\", \"\");\r",
													"}\r",
													"\r",
													"//===================================================================\r",
													"\r",
													"if(requestType == \"BUSINESSKEYS2_REQUEST\"){\r",
													"    let companyName = pm.variables.get(\"companyName\");\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"requestType\", \"BUSINESSKEYS2_REQUEST\");\r",
													"    pm.variables.set(\"companyName\",  companyName);\r",
													"    pm.variables.set(\"businessKeys1\", \"\");\r",
													"    pm.variables.set(\"businessKeys2\", _.random(99999,999999));\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessKeys1\": \"{{businessKeys1}}\",\r\n        \"businessKeys2\": \"{{businessKeys2}}\",\r\n        \"businessEmail\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8652](https://jira.cnvrmedia.net/browse/PID-8652)\n\n**◼ NAME:** Realtime identity request with companyName and businessKeys1 or businessKeys2\n\n**◼ DESCRIPTION:**\nIdentity request's submitted with\ncompanyName and addressLine1 provided in the input.\n\n**◼ PRECONDITION:**\nClient profile is enabled for b2b.\n\n**◼ EXPECTED RESULT:**\nbusinessId comes populated in response.\n\n**◼ INPUT FIELDS:**\n\n* \"companyName\"\n* \"businessKeys1\"\n\n**◼ OUTPUT FIELDS:**\n\n* \"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8657) - Realtime identity request when businessEmail or businessPhone or address match found.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//===============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//==============================================================\r",
													" requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//==============================================================\r",
													"if(requestType == \"BUSINESSEMAIL_MATCH\") {\r",
													"    (function verifyBusinessEmailMatchRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-1 : Identity-request with existing companyName and businessEmail.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessEmail','businessPhone', 'addressLine1','postalCode'] });\r",
													"        utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"                    fields : ['companyName', 'businessId'], \r",
													"                    existingRecords : { 'business-email-match' : pm.variables.get(\"businessEmailMatchRecord\") } \r",
													"                });\r",
													"        utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"        pm.test(\"(6) Output Validation: existing non-empty businessId comes populated in the response\", ()=>{\r",
													"            utils.validateIfNonEmpty(outputData.businessId);\r",
													"            utils.validateIfNonEmpty(pm.variables.get(\"businessEmailMatchRecord\").businessId);\r",
													"            pm.expect(outputData.businessId).to.equal(pm.variables.get(\"businessEmailMatchRecord\").businessId);\r",
													"        });\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"BUSINESSPHONE_MATCH\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//==============================================================\r",
													"if(requestType == \"BUSINESSPHONE_MATCH\") {\r",
													"    (function verifyBusinessEmailMatchRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-2 : Identity-request with existing companyName and businessPhone.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessEmail','businessPhone', 'addressLine1','postalCode']  });\r",
													"        utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"                    fields : ['companyName', 'businessId'], \r",
													"                    existingRecords : { 'business-phone-match' : pm.variables.get(\"businessPhoneMatchRecord\") } \r",
													"                });\r",
													"        utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"        pm.test(\"(6) Output Validation: existing non-empty businessId comes populated in the response\", ()=>{\r",
													"            utils.validateIfNonEmpty(outputData.businessId);\r",
													"            utils.validateIfNonEmpty(pm.variables.get(\"businessPhoneMatchRecord\").businessId);\r",
													"            pm.expect(outputData.businessId).to.equal(pm.variables.get(\"businessPhoneMatchRecord\").businessId);\r",
													"        });\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"requestType\", \"ADDRESS_BUSINESS_MATCH\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"\r",
													"//==============================================================\r",
													"if(requestType == \"ADDRESS_BUSINESS_MATCH\") {\r",
													"    (function verifyBusinessEmailMatchRequest() {\r",
													"        utils.doTestLogging({msg: \"CASE-3 : Identity-request with existing companyName and addressLine1 , postalCode.\", type : \"PRINT_MSG\"});\r",
													"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessEmail','businessPhone', 'addressLine1','postalCode']  });\r",
													"        utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"                    fields : ['companyName', 'businessId'], \r",
													"                    existingRecords : { 'business-address-match' : pm.variables.get(\"addressBusinessMatchRecord\") } \r",
													"                });\r",
													"        utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"        pm.test(\"(6) Output Validation: existing non-empty businessId comes populated in the response\", ()=>{\r",
													"            utils.validateIfNonEmpty(outputData.businessId);\r",
													"            utils.validateIfNonEmpty(pm.variables.get(\"addressBusinessMatchRecord\").businessId);\r",
													"            pm.expect(outputData.businessId).to.equal(pm.variables.get(\"addressBusinessMatchRecord\").businessId);\r",
													"        });\r",
													"    })();\r",
													"    (function setNextRequest() {\r",
													"        pm.variables.clear();\r",
													"    })();\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//========================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8657\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#businessMatch#existingMatchFound\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//===================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let requestType = \"\";\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"BUSINESSEMAIL_MATCH\";\r",
													"        }\r",
													"})()\r",
													"\r",
													"//===================================================================\r",
													"let requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"//===================================================================\r",
													"if(requestType == \"BUSINESSEMAIL_MATCH\"){\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"requestType\", \"BUSINESSEMAIL_MATCH\");\r",
													"    pm.variables.set(\"companyName\",  utils.getCompanyName());\r",
													"    pm.variables.set(\"businessEmail\", utils.getRandomDataForField(\"emailAddress1\"));\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"\r",
													"    request.testerInput = {\r",
													"        'companyName' : pm.variables.get(\"companyName\"), \r",
													"        'businessEmail': pm.variables.get(\"businessEmail\")\r",
													"    }; \r",
													"    (function createBusinessMailMatchingRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"            pm.variables.set(\"businessEmailMatchRecord\", utils.getOutputData(response.json()));\r",
													"        });            \r",
													"    })();\r",
													"    pm.variables.set(\"addressLine1\", \"\");\r",
													"    pm.variables.set(\"postalCode\", \"\");\r",
													"    pm.variables.set(\"businessPhone\", \"\");\r",
													"}\r",
													"//===================================================================\r",
													"if(requestType == \"BUSINESSPHONE_MATCH\"){\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"requestType\", \"BUSINESSPHONE_MATCH\");\r",
													"    pm.variables.set(\"companyName\",  utils.getCompanyName());\r",
													"    pm.variables.set(\"businessPhone\", utils.getValidPhone1());\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"\r",
													"    request.testerInput = {\r",
													"        'companyName' : pm.variables.get(\"companyName\"), \r",
													"        'businessPhone': pm.variables.get(\"businessPhone\")\r",
													"    }; \r",
													"    (function createBusinessMailMatchingRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"            pm.variables.set(\"businessPhoneMatchRecord\", utils.getOutputData(response.json()));\r",
													"        });            \r",
													"    })();\r",
													"    pm.variables.set(\"addressLine1\", \"\");\r",
													"    pm.variables.set(\"postalCode\", \"\");\r",
													"    pm.variables.set(\"businessEmail\", \"\");\r",
													"}\r",
													"\r",
													"//===================================================================\r",
													"if(requestType == \"ADDRESS_BUSINESS_MATCH\"){\r",
													"    pm.variables.clear();\r",
													"    pm.variables.set(\"requestType\", \"ADDRESS_BUSINESS_MATCH\");\r",
													"    pm.variables.set(\"companyName\",  utils.getCompanyName());\r",
													"    pm.variables.set(\"addressLine1\", utils.getRandomDataForField(\"addressLine1\"));\r",
													"    pm.variables.set(\"postalCode\", utils.getRandomDataForField(\"postalCode\"));\r",
													"    request = JSON.parse(JSON.stringify(requestDetail));\r",
													"\r",
													"    request.testerInput = {\r",
													"        'companyName' : pm.variables.get(\"companyName\"), \r",
													"        'addressLine1': pm.variables.get(\"addressLine1\"),\r",
													"        'postalCode': pm.variables.get(\"postalCode\")\r",
													"    }; \r",
													"    (function createBusinessMailMatchingRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"            pm.variables.set(\"addressBusinessMatchRecord\", utils.getOutputData(response.json()));\r",
													"        });            \r",
													"    })();\r",
													"    pm.variables.set(\"businessEmail\", \"\");\r",
													"    pm.variables.set(\"businessPhone\", \"\");\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessKeys1\": \"\",\r\n        \"businessKeys2\": \"\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"businessPhone\": \"{{businessPhone}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8657](https://jira.cnvrmedia.net/browse/PID-8657)\n\n**◼ NAME:**Realtime identity request when businessEmail or businessPhone or address match found.\n\n**◼ DESCRIPTION:** Identity request's submitted with companyName, businessEmail / businessPhone / addressLine1 provided in the input\n\n**◼ PRECONDITION:**\nIdentity-record exists with given businessEmail / businessPhone/ addressLine1.\n\n**◼ EXPECTED RESULT:**\n\nExisting matched identity-details gets returned in the response.\n\n**◼ INPUT FIELDS:**\n\n\"fullName\"\n\"businessEmail\"\n\n**◼ OUTPUT FIELDS:**\n\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8658) - Realtime identity request with (businessEmail/businessPhone/businessKeys,addressLine1,companyName) and multiple match(businessEmail/businessPhone match/businessKeys and addressLine1 match) exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//===============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//==============================================================\r",
													"(function verifyBusinessEmailAddressConsolidation() {\r",
													"    utils.doTestLogging({msg: \"CASE-1 : Identity-request with existing companyName, businessEmail and companyName, address consolidation scenario\", type : \"PRINT_MSG\"});\r",
													"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessEmail','businessPhone','businessKeys1','addressLine1','postalCode'] });\r",
													"    utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"                fields : ['businessId', 'companyName','addressLine1','postalCode'], \r",
													"                existingRecords : { 'business-email-match' : pm.variables.get(\"businessEmailMatchRecord\") ,\r",
													"                'business-address-match' : pm.variables.get(\"addressMatchRecord\")} \r",
													"            });\r",
													"    utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName','addressLine1','postalCode','businessConsolidationsIds'] });\r",
													"\r",
													"    pm.test(\"(6) Output Validation: Lowest businessId comes populated in the response\", ()=>{\r",
													"        pm.expect(outputData.businessId).to.equal(_.min([pm.variables.get(\"businessEmailMatchRecord\").businessId, pm.variables.get(\"addressMatchRecord\").businessId]));\r",
													"    })\r",
													"    pm.test(\"(7) Output Validation: Remaining businessId comes populated in businessConsolidations list\",()=>{\r",
													"        pm.expect(outputData.businessConsolidationsIds).to.include(_.max([pm.variables.get(\"businessEmailMatchRecord\").businessId, pm.variables.get(\"addressMatchRecord\").businessId]));\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8658\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#businessMatch#consolidation\"\r",
													"         })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//===================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===================================================================\r",
													"const companyName = utils.getCompanyName();\r",
													"const requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"let createAddressMatchRecord = (companyName)=>{\r",
													"    let request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    pm.variables.set(\"addressLine1\", utils.getRandomDataForField(\"addressLine1\"));\r",
													"    pm.variables.set(\"postalCode\", utils.getRandomDataForField(\"postalCode\"));\r",
													"    \r",
													"    request.testerInput = {\r",
													"        'companyName' : companyName, \r",
													"        'addressLine1': pm.variables.get(\"addressLine1\"), \r",
													"        'postalCode': pm.variables.get(\"postalCode\")\r",
													"    }; \r",
													"    \r",
													"    (function createAddressMatchRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"addressMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"}\r",
													"//===================================================================\r",
													"pm.variables.set(\"companyName\", companyName);\r",
													"pm.variables.set(\"businessEmail\", utils.getRandomDataForField(\"emailAddress1\"));\r",
													"pm.variables.set(\"businessPhone\", \"\");\r",
													"pm.variables.set(\"businessKeys1\", \"\");\r",
													"\r",
													"request = JSON.parse(JSON.stringify(requestDetail));\r",
													"request.testerInput = {\r",
													"    'companyName' : pm.variables.get(\"companyName\"), \r",
													"    'businessEmail': pm.variables.get(\"businessEmail\")\r",
													"}; \r",
													"(function createEmailMatchRecord() {                        \r",
													"    pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"        pm.variables.set(\"businessEmailMatchRecord\", utils.getOutputData(response.json()));\r",
													"    });            \r",
													"})();\r",
													"createAddressMatchRecord(pm.variables.get(\"companyName\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessKeys1\": \"\",\r\n        \"businessKeys2\": \"\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8658](https://jira.cnvrmedia.net/browse/PID-8658)\n\n**◼ NAME:** Realtime identity request with (businessEmail / businessPhone, addressLine1, companyName) and multiple match(businessEmail / businessPhone match and addressLine1 match) exists for the identity.\n\n**◼ DESCRIPTION:** Identity request's submitted with businessEmail/ businessPhone, addressLine1,companyName provided in the input\n\n**◼ PRECONDITION:** identity-record exists with same businessEmail / businessPhone as given in input.\nidentity-record exists with same addressLine1 as given in input.\n\n**◼ EXPECTED RESULT:**\n\n* Lowest business id gets returned in the response.\n* Remaining businessIds comes populated in the consolidatedIds of businessConsolidations field. idType comes as \"B\" in the businessConsolidations field.   \n\n**◼ INPUT FIELDS:**\n\n* \"companyName\"\n* \"businessEmail\"\n* \"addressLine1\"\n\n**◼ OUTPUT FIELDS:**\n\n* \"businessId\"\n* \"businessConsolidations\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8659) - Realtime identity request with (businessEmail/businessPhone,addressLine1,companyName, emailAddress1/phone1,fullName) and multiple match(businessEmail/businessPhone match, addressLine1 match), (emailAddress1/phone1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//===============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//==============================================================\r",
													"(function verifyBusinessEmailIdentityEmailAndAddressConsolidation() {\r",
													"    let businessEmailMatchRecord = pm.variables.get(\"businessEmailMatchRecord\");\r",
													"    let addressMatchRecord = pm.variables.get(\"addressMatchRecord\");\r",
													"    let identityEmailMatchRecord = pm.variables.get(\"identityEmailMatchRecord\");\r",
													"    utils.doTestLogging({msg: \"CASE-1 : Request with businessEmail, emailAddress1, addressLine1, postalCode, companyName and fullName when multiple match exists\", type : \"PRINT_MSG\"});\r",
													"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName','companyName', 'businessEmail','addressLine1','postalCode','emailAddress1','businessPhone','phone1'] });\r",
													"    utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"                fields : ['businessId', 'individualId','fullName','companyName','addressLine1','postalCode', 'emailAddress1','phone1'], \r",
													"                existingRecords : { \r",
													"                'business-email-match' : businessEmailMatchRecord ,\r",
													"                'address-match' : addressMatchRecord,\r",
													"                'identity-email-match' : identityEmailMatchRecord,\r",
													"                } \r",
													"            });\r",
													"    utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'individualId','companyName','addressLine1','emailAddress1','postalCode','consolidatedIds','businessConsolidationsIds'] });\r",
													"\r",
													"    pm.test(\"(6)-(a)- Output Validation: Lowest businessId comes populated in the response\", ()=>{\r",
													"        pm.expect(outputData.businessId).to.equal(_.min([addressMatchRecord.businessId, businessEmailMatchRecord.businessId]));\r",
													"    });\r",
													"    pm.test(\"(6)-(b)- Output Validation: Lowest individualId comes populated in the response\", ()=>{\r",
													"        pm.expect(outputData.individualId).to.equal(_.min([addressMatchRecord.individualId, identityEmailMatchRecord.individualId]));\r",
													"    });\r",
													"    pm.test(\"(7)-(a)- Output Validation: Remaining businessId comes populated in businessConsolidations list\",()=>{\r",
													"        pm.expect(outputData.businessConsolidationsIds).to.include(_.max([addressMatchRecord.businessId, businessEmailMatchRecord.businessId]));\r",
													"    });\r",
													"    pm.test(\"(7)-(b)- Output Validation: Remaining individualId comes populated in consolidations list\",()=>{\r",
													"        pm.expect(outputData.consolidatedIds).to.include(_.max([addressMatchRecord.individualId, identityEmailMatchRecord.individualId]));\r",
													"    });\r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//========================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8659\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#businessMatch#identityMatch#consolidation\"\r",
													"         })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//===================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//===================================================================\r",
													"const companyName = utils.getCompanyName();\r",
													"const fullName = utils.getRandomDataForField(\"fullName\");\r",
													"const requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"};\r",
													"let createAddressMatchRecord = (companyName, fullName,addressLine1,postalCode)=>{\r",
													"    let request = JSON.parse(JSON.stringify(requestDetail));\r",
													"    \r",
													"    request.testerInput = {\r",
													"        'companyName' : companyName,\r",
													"        'fullName': fullName, \r",
													"        'addressLine1': addressLine1, \r",
													"        'postalCode': postalCode\r",
													"    }; \r",
													"    \r",
													"    (function createAddressMatchRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"addressMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"}\r",
													"let createEmailMatchRecord = (fullName, emailAddress1)=>{\r",
													"    let request = JSON.parse(JSON.stringify(requestDetail));    \r",
													"    request.testerInput = {\r",
													"        'fullName': fullName, \r",
													"        'emailAddress1': emailAddress1\r",
													"    }; \r",
													"    (function createAddressMatchRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"identityEmailMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"}\r",
													"let createPhoneMatchRecord = (fullName, phone1)=>{\r",
													"    let request = JSON.parse(JSON.stringify(requestDetail));    \r",
													"    request.testerInput = {\r",
													"        'fullName': fullName, \r",
													"        'phone1': phone1\r",
													"    }; \r",
													"    (function createAddressMatchRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"identityPhoneMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"}\r",
													"let createBusinessEmailMatchRecord = (companyName, businessEmail)=>{\r",
													"    let request = JSON.parse(JSON.stringify(requestDetail));    \r",
													"    request.testerInput = {\r",
													"        'companyName': companyName, \r",
													"        'businessEmail': businessEmail\r",
													"    }; \r",
													"    (function createAddressMatchRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"businessEmailMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"}\r",
													"let createBusinessPhoneMatchRecord = (companyName, businessPhone)=>{\r",
													"    let request = JSON.parse(JSON.stringify(requestDetail));    \r",
													"    request.testerInput = {\r",
													"        'companyName': companyName, \r",
													"        'businessPhone': businessPhone\r",
													"    }; \r",
													"    (function createAddressMatchRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
													"                pm.variables.set(\"businessPhoneMatchRecord\", utils.getOutputData(response.json()));\r",
													"            });            \r",
													"    })();\r",
													"}\r",
													"//==================================================================\r",
													"\r",
													"pm.variables.set(\"companyName\", companyName);\r",
													"pm.variables.set(\"fullName\", fullName);\r",
													"pm.variables.set(\"addressLine1\", utils.getRandomDataForField(\"addressLine1\"));\r",
													"pm.variables.set(\"postalCode\", utils.getRandomDataForField(\"postalCode\"));\r",
													"pm.variables.set(\"businessEmail\", utils.getRandomDataForField(\"emailAddress1\"));\r",
													"pm.variables.set(\"emailAddress1\", utils.getRandomDataForField(\"emailAddress1\"));\r",
													"pm.variables.set(\"businessPhone\", \"\");\r",
													"pm.variables.set(\"phone1\", \"\");\r",
													"createAddressMatchRecord(pm.variables.get(\"companyName\"),\r",
													"    pm.variables.get(\"fullName\"), pm.variables.get(\"addressLine1\"), pm.variables.get(\"postalCode\"));\r",
													"createEmailMatchRecord(pm.variables.get(\"fullName\"), pm.variables.get(\"emailAddress1\"));\r",
													"createBusinessEmailMatchRecord(pm.variables.get(\"companyName\"), pm.variables.get(\"businessEmail\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessKeys1\": \"\",\r\n        \"businessKeys2\": \"\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8659](https://jira.cnvrmedia.net/browse/PID-8659)\n\n**◼ NAME:** Realtime identity request with (businessEmail/businessPhone,addressLine1,companyName, emailAddress1/phone1,fullName) and multiple match ( businessEmail / businessPhone match, addressLine1 match), (emailAddress1/phone1 match) exists for the identity\n\n**◼ DESCRIPTION:**\nIdentity request's submitted with\nbusinessEmail / businessPhone, addressLine1, companyName, fullName, emailAddress1 / phone1 provided in the input.\n\n**◼ PRECONDITION:** identity-record exists with same businessEmail/businessPhone as given in input.\nidentity-record exists with same addressLine1 as given in input.\nidentity-record exists with same emailAddress1/phone1 as given in input.\n\n**◼ EXPECTED RESULT:**\n\n* 1.Lowest individual id from identity match comes populated in \"individualId field in response. Remaining individualIds comes populated in the consolidatedIds of consolidations field. idType comes as \"I\" in the consolidations field.\n\n* 2.Lowest businessId from business match comes populated in businessId field in response.\nRemaining businessIds comes populated in the consolidatedIds of businessConsolidations field. idType comes as \"B\" in the businessConsolidations field.\n \n**◼ INPUT FIELDS:**\n\n* \"companyName\"\n* \"businessEmail\"\n* \"addressLine1\"\n\n**◼ OUTPUT FIELDS:**\n\n* \"businessId\"\n* \"businessConsolidations\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8665) -USRealtime identity request to verify RDI indicator for residential address.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> residential addressLine1 and postalCode is provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  For residential address rdiFlag comes as 'Y' in response\",()=>{\r",
													"        pm.expect(outputData.rdiFlag).to.equal(\"Y\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"addressLine1=\" + inputData.addressLine1 + \", \" \r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"rdiFlag=\" + outputData.rdiFlag\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8665\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#businessMatch#rdiFlag#residentialAddress\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"pm.variables.set(\"companyName\",  utils.getCompanyName());\r",
													"pm.variables.set(\"addressLine1\",\"6745 Prospect way irving\");\r",
													"pm.variables.set(\"postalCode\",\"75063\");\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessKeys1\": \"\",\r\n        \"businessKeys2\": \"\",\r\n        \"businessEmail\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8665](https://jira.cnvrmedia.net/browse/PID-8665)\n\n**◼ NAME:** USRealtime identity request to verify RDI indicator for residential address.\n\n**◼ DESCRIPTION:**\nIdentity request's submitted for us realtime with residential address given in addressLine1 input field.\n\n**◼ PRECONDITION:**\nClient profile is enabled for b2b.\n\n**◼ EXPECTED RESULT:**\nsince the given address is residential in input, the rdiFlag comes as \"Y\" in output. For Canada and global request rdiFlag comes as empty irrespective of residential or non residential address.\n\n**◼ INPUT FIELDS:**\n\n\"companyName\"\n\"addressLine1\"\n\"postalCode\"\n\n**◼ OUTPUT FIELDS:**\n\n* \"rdiFlag\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8666) -USRealtime identity request to verify RDI indicator for non residential address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> non residential addressLine1 and postalCode is provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  For non residential address rdiFlag comes as 'N' in response\",()=>{\r",
													"        pm.expect(outputData.rdiFlag).to.equal(\"N\");\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"addressLine1=\" + inputData.addressLine1 + \", \" \r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    + \"]\";\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"rdiFlag=\" + outputData.rdiFlag\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8666\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#businessMatch#rdiFlag#nonResidentialAddress\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"pm.variables.set(\"companyName\",  utils.getCompanyName());\r",
													"pm.variables.set(\"addressLine1\",\"3000 John F. Kennedy Blvd\");\r",
													"pm.variables.set(\"postalCode\",\"07306\");\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessKeys1\": \"\",\r\n        \"businessKeys2\": \"\",\r\n        \"businessEmail\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8666](https://jira.cnvrmedia.net/browse/PID-8666)\n\n**◼ NAME:** USRealtime identity request to verify RDI indicator for non residential address.\n\n**◼ DESCRIPTION:**\nIdentity request's submitted for us realtime with non residential address given in addressLine1 input field.\n\n**◼ PRECONDITION:**\nClient profile is enabled for b2b.\n\n**◼ EXPECTED RESULT:**\nsince the given address is non residential in input, the rdiFlag comes as \"N\" in output. For Canada and global request rdiFlag comes as empty irrespective of residential or non residential address.\n\n**◼ INPUT FIELDS:**\n\n\"companyName\"\n\"addressLine1\"\n\"postalCode\"\n\n**◼ OUTPUT FIELDS:**\n\n* \"rdiFlag\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8660) -Realtime identity request with business attributes in input with short id enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName and businessEmail are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.businessEmail);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  businessId and the siteId comes populated in response.\",()=>{\r",
													"        pm.expect((outputData.businessId).length).to.equal(13);\r",
													"        pm.expect((outputData.siteId).length).to.equal(13);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"businessEmail=\" + inputData.businessEmail + \", \"\r",
													"    + \"addressLine1=\" + inputData.addressLine1 + \", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"businessId=\" + outputData.businessId + \", \"\r",
													"     + \"siteId=\" + outputData.siteId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8660\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#withBusinessEmail#shortId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"const companyName = utils.getCompanyName();\r",
													"const businessEmail = utils.getRandomDataForField(\"emailAddress1\");\r",
													"const addressLine1 = utils.getRandomDataForField(\"addressLine1\");\r",
													"const postalCode = utils.getRandomDataForField(\"postalCode\");\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {'companyName' : companyName, 'businessEmail': businessEmail, 'addressLine1': addressLine1, 'postalCode': postalCode};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"{{addressLine1}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"\",\n    \"familyName\": \"\",\n    \"fullName\": \"\",\n    \"companyName\":\"{{companyName}}\",\n    \"businessEmail\":\"{{businessEmail}}\",\n    \"businessPhone\":\"\",\n    \"gender\": \"\",\n    \"phone1\": \"\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n},\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ JIRA -https://jira.cnvrmedia.net/browse/PID-8660\n\n◼ NAME: Realtime identity request with business attributes in input with short id enabled\n\n◼ DESCRIPTION:\nIdentity request's submitted with\nbusiness attributes(such as businessEmail,businessPhone or address) provided in the input.\n\n◼ PRECONDITION:\nClient profile is enabled for b2b.\n\n◼ EXPECTED RESULT:\nsiteId and businessId comes populated in 13 digits-form in the output. (example - 2000010267360)\n\n◼ INPUT FIELDS:\n\"companyName\"\n\"buissinessEmail\"\n\"addressLine1\"\n\n◼ OUTPUT FIELDS:\n\"businessId\"\n\"siteId\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8661) -Realtime identity request with different companyName, to validate thresholding of businessEmail.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName and businessEmail are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.businessEmail);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  On business email threshold businessId should not come populated in response.\",()=>{\r",
													"           pm.expect(outputData.businessId).to.equal(\"\"); \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"businessEmail=\" + inputData.businessEmail + \", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"businessId=\" + outputData.businessId + \", \"\r",
													"     + \"siteId=\" + outputData.siteId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8661\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#withBusinessEmail#shortId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"const businessEmail = utils.getRandomDataForField(\"emailAddress1\");\r",
													"\r",
													"//====================================================================\r",
													"        \r",
													"var noOfTry = 1;\r",
													"const noOfTries = pm.environment.get('BUSINESS_EMAIL_THRESHOLD');\r",
													"            \r",
													"var BUSINESS_EMAIL_THRESHOLD_URL = pm.environment.get(\"URL_REALTIME\");\r",
													"        function businessEmailThreshold() {\r",
													"            let header = {\r",
													"            \"Content-Type\": \"application/json\",\r",
													"            \"clientCode\": pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
													"            \"accessToken\": pm.environment.get(\"accessToken\"),\r",
													"             \"x-api-key\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\")\r",
													"            }\r",
													"            let companyName= utils.getRandomString();//utils.getCompanyName();\r",
													"            let testerInput = {'companyName': companyName, 'businessEmail': businessEmail,'addressLine1':'','emailAddress1':'', 'phone1':''};\r",
													"            const postRequest = {\r",
													"            url: BUSINESS_EMAIL_THRESHOLD_URL,\r",
													"            method: \"POST\",\r",
													"            header: header,\r",
													"            body:{\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify(utils.generateIdentityPayload(testerInput))\r",
													"            }\r",
													"        };\r",
													"    \r",
													"            pm.sendRequest(postRequest, (error, response) => {\r",
													"                const businessEmail = JSON.parse(postRequest.body.raw).inputRecord.businessEmail;\r",
													"                const companyName = JSON.parse(postRequest.body.raw).inputRecord.companyName\r",
													"                pm.test(\"Business email threshold request \"+\"(Try-\" + noOfTry + \").\" + \" businessEmail = \" + businessEmail + \", companyName \" + companyName, () => {\r",
													"                    pm.expect(response).to.have.property('code', 200);\r",
													"                });\r",
													"                console.log(businessEmail);\r",
													"                console.log(companyName);\r",
													"                if(response.code == 200 && noOfTry < noOfTries) {\r",
													"                    noOfTry = noOfTry + 1;\r",
													"                    businessEmailThreshold();\r",
													"                    \r",
													"                } else {\r",
													"                    console.log(\"Job is completed\")\r",
													"                    \r",
													"                }\r",
													"            });\r",
													"        }\r",
													"\r",
													"businessEmailThreshold();\r",
													"\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {'companyName': utils.getCompanyName(), 'businessEmail': businessEmail,'addressLine1':''};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"\",\n    \"familyName\": \"\",\n    \"fullName\": \"\",\n    \"companyName\":\"{{companyName}}\",\n    \"businessEmail\":\"{{businessEmail}}\",\n    \"businessPhone\":\"\",\n    \"gender\": \"\",\n    \"phone1\": \"\",\n    \"postalCode\": \"\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"\"\n},\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ JIRA -https://jira.cnvrmedia.net/browse/PID-8661\n\n◼ NAME: Realtime identity request with different companyName but same businessEmail as in pre condition.\n\n◼ DESCRIPTION:\nIdentity request's submitted with\ndifferent companyName and same businessEmail that's being given in precondition.\n\n◼ PRECONDITION:\nClient profile is enabled for b2b.\nPerform 7 identity transactions with different companyName and same businessEmail in each request.\n\n◼ EXPECTED RESULT:\nsince businessEmail gets thresholded after 6th request businessId comes as empty in response.\n\n◼ INPUT FIELDS:\n\"companyName\"\n\"buissinessEmail\"\n\n◼ OUTPUT FIELDS:\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8662) -Realtime identity request with different companyName, to validate thresholding of businessPhone.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName and businessEmail are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.businessPhone);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  On businessPhone threshold businessId should not come populated in response.\",()=>{\r",
													"        // if(pm.environment.get('BUSINESS_PHONE_THRESHOLD')){\r",
													"           pm.expect(outputData.businessId).to.equal(\"\"); \r",
													"        \r",
													"      //  pm.expect(outputData.businessId).to.equal(\"\");\r",
													"        \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"businessPhone=\" + inputData.businessPhone + \", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"businessId=\" + outputData.businessId + \", \"\r",
													"     + \"siteId=\" + outputData.siteId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8662\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#withBusinessPhone#shortId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"const businessPhone = utils.getValidPhone1();\r",
													"\r",
													"\r",
													"//====================================================================\r",
													"        \r",
													"var noOfTry = 1;\r",
													"const noOfTries = 13;//pm.environment.get('BUSINESS_PHONE_THRESHOLD');\r",
													"            \r",
													"var BUSINESS_PHONE_THRESHOLD_URL = pm.environment.get(\"URL_REALTIME\");\r",
													"        function businessPhoneThreshold() {\r",
													"            let header = {\r",
													"            \"Content-Type\": \"application/json\",\r",
													"            \"clientCode\": pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
													"            \"accessToken\": pm.environment.get(\"accessToken\"),\r",
													"             \"x-api-key\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\")\r",
													"            }\r",
													"            let companyName= utils.getRandomString(); //utils.getCompanyName();\r",
													"            let testerInput = {'companyName': companyName, 'businessPhone': businessPhone,'addressLine1':'','emailAddress1':'','phone1':''};\r",
													"            const postRequest = {\r",
													"            url: BUSINESS_PHONE_THRESHOLD_URL,\r",
													"            method: \"POST\",\r",
													"            header: header,\r",
													"            body:{\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify(utils.generateIdentityPayload(testerInput))\r",
													"            }\r",
													"        };\r",
													"    \r",
													"            pm.sendRequest(postRequest, (error, response) => {\r",
													"                let businessPhone = JSON.parse(postRequest.body.raw).inputRecord.businessPhone;\r",
													"                let companyName = JSON.parse(postRequest.body.raw).inputRecord.companyName;\r",
													"                pm.test(\"Business phone threshold request \"+\"(Try-\" + noOfTry + \").\" + \" businessPhone = \" + businessPhone + \" ,companyName = \" + companyName , () => {\r",
													"                    pm.expect(response).to.have.property('code', 200);\r",
													"                });\r",
													"                console.log(businessPhone);\r",
													"                console.log(companyName);\r",
													"                if(response.code == 200 && noOfTry < noOfTries) {\r",
													"                    noOfTry = noOfTry + 1;\r",
													"                    businessPhoneThreshold();\r",
													"                    \r",
													"                } else {\r",
													"                    console.log(\"Job is completed\")\r",
													"                    \r",
													"                }\r",
													"            });\r",
													"        }\r",
													"\r",
													"businessPhoneThreshold();\r",
													"\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {'companyName': utils.getCompanyName(), 'businessPhone': businessPhone,'addressLine1':\"\"};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"\",\n    \"familyName\": \"\",\n    \"fullName\": \"\",\n    \"companyName\":\"{{companyName}}\",\n    \"businessEmail\":\"\",\n    \"businessPhone\":\"{{businessPhone}}\",\n    \"gender\": \"\",\n    \"phone1\": \"\",\n    \"postalCode\": \"\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"\"\n},\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ JIRA -https://jira.cnvrmedia.net/browse/PID-8662\n\n◼ NAME: Realtime identity request with different companyName, to validate thresholding of businessPhone.\n\n◼ DESCRIPTION:\n\nIdentity request's submitted with\ndifferent companyName and same businessPhone that's being given in precondition.\n\n◼ PRECONDITION:\n\nClient profile is enabled for b2b.\nPerform 12 identity transactions with different companyName and same businessPhone in each request.\n◼ EXPECTED RESULT:\n\nsince businessEmail gets thresholded after 12th request businessId comes as empty in response.\n◼ INPUT FIELDS:\n\n\"companyName\"\n\"businessPhone\"\n◼ OUTPUT FIELDS:\n\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime >  business-match > (PID-8664) -Realtime identity request with companyName and General address.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName and addressLine1 are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.addressLine1);\r",
													"         utils.validateIfNonEmpty(inputData.postalCode);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  On business email threshold businessId should not come populated in response.\",()=>{\r",
													"           pm.expect(outputData.businessId).to.not.equal(\"\"); \r",
													"        \r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"businessAddress=\" + inputData.businessAddress + \", \"\r",
													"    + \"postalCode=\" + inputData.postalCode\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"companyName=\" + outputData.companyName + \", \"  \r",
													"     + \"businessId=\" + outputData.businessId + \", \"\r",
													"     + \"siteId=\" + outputData.siteId\r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8664\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#withBusinessAddress#shortId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"const address = utils.getValidAddress();\r",
													"addressLine1 = address.addressLine1;\r",
													"const postalCode = address.postalCode;\r",
													"\r",
													"\r",
													"//====================================================================\r",
													"        \r",
													"var noOfTry = 1;\r",
													"const noOfTries = pm.environment.get('BUSINESS_ADDRESS_THRESHOLD');\r",
													"            \r",
													"var BUSINESS_ADDRESS_THRESHOLD_URL = pm.environment.get(\"URL_REALTIME\");\r",
													"        function businessAddressThreshold() {\r",
													"            let header = {\r",
													"            \"Content-Type\": \"application/json\",\r",
													"            \"clientCode\": pm.environment.get(\"CCODE_DIGITALKEYS_ENABLED\"),\r",
													"            \"accessToken\": pm.environment.get(\"accessToken\"),\r",
													"             \"x-api-key\": pm.environment.get(\"XAPIKEY_DIGITALKEYS_ENABLED\")\r",
													"            }\r",
													"            let companyName= utils.getCompanyName();\r",
													"            let testerInput = {'companyName': companyName,'addressLine1': addressLine1, 'postalCode': postalCode};\r",
													"            const postRequest = {\r",
													"            url: BUSINESS_ADDRESS_THRESHOLD_URL,\r",
													"            method: \"POST\",\r",
													"            header: header,\r",
													"            body:{\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify(utils.generateIdentityPayload(testerInput))\r",
													"            }\r",
													"        };\r",
													"    \r",
													"            pm.sendRequest(postRequest, (error, response) => {\r",
													"                pm.test(\"Business address threshold request \"+\"(Try-\" + noOfTry + \").\", () => {\r",
													"                    pm.expect(response).to.have.property('code', 200);\r",
													"                });\r",
													"                console.log(JSON.parse(postRequest.body.raw).inputRecord.addressLine1);\r",
													"                console.log(JSON.parse(postRequest.body.raw).inputRecord.companyName);\r",
													"                if(response.code == 200 && noOfTry < noOfTries) {\r",
													"                    noOfTry = noOfTry + 1;\r",
													"                    businessAddressThreshold();\r",
													"                    \r",
													"                } else {\r",
													"                    console.log(\"Job is completed\")\r",
													"                    \r",
													"                }\r",
													"            });\r",
													"        }\r",
													"\r",
													"businessAddressThreshold();\r",
													"\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {'companyName': utils.getCompanyName(), 'addressLine1': addressLine1, 'postalCode': postalCode};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}"
											},
											{
												"key": "x-api-key",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\n    \"addressLine1\": \"{{addressLine1}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"emailAddress1\": \"\",\n    \"familyName\": \"\",\n    \"fullName\": \"\",\n    \"companyName\":\"{{companyName}}\",\n    \"businessEmail\":\"\",\n    \"businessPhone\":\"\",\n    \"gender\": \"\",\n    \"phone1\": \"\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"trustedBusinessID\": \"\",\n    \"trustedIndividualID\": \"\",\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\n},\n  \"serviceConfig\": {\n    \"configAddressHygiene\": {\n      \"enablePac\": \"no\",\n      \"enablePcoa\": \"no\"\n    },\n    \"enableAddressHygiene\": \"Yes\",\n    \"enableEmailHygiene\": \"Yes\",\n    \"enableGlobalSuppression\": \"yes\",\n    \"enableIdentity\": \"Yes\",\n    \"enableNameHygiene\": \"yes\",\n    \"enableOccupancyScore\": \"yes\",\n    \"enablePhoneHygiene\": \"yes\",\n    \"enableTspAppend\": \"yes\"\n  }\n}"
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "◼ JIRA -https://jira.cnvrmedia.net/browse/PID-8664\n\n◼ NAME: Realtime identity request with companyName and General address..\n\n◼ DESCRIPTION:\nIdentity request's submitted with\ncompanyName and General address given in the input.\n\n◼ PRECONDITION:\nClient profile is enabled for b2b.\n\n◼ EXPECTED RESULT:\nsince General address threshold value is 0 it gets thresholded and businessId does not comes as empty in response.\n\n◼ INPUT FIELDS:\n\"companyName\"\n\"addressLine1\"\n\"postalCode\"\n\n◼ OUTPUT FIELDS:\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "realtime > business-match > (PID-8742)- Realtime identity request with companyName including exclusions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//===============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//==============================================================\r",
													"(function verifyCompanyNameWithExtension() {\r",
													"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessEmail'] });\r",
													"    utils.doTestLogging({msg : \"(4)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
													"                fields : ['businessId', 'companyName'], \r",
													"                existingRecords : { \r",
													"                    'business-email-match' : pm.variables.get(\"businessEmailMatchRecord\")\r",
													"                } \r",
													"            });\r",
													"    utils.doTestLogging({msg : \"(5)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"\r",
													"    pm.test(\"(6) Output Validation: existing non-empty businessId comes populated in the response\", ()=>{\r",
													"        utils.validateIfNonEmpty(outputData.businessId);\r",
													"        pm.expect(outputData.businessId).to.equal(pm.variables.get(\"businessEmailMatchRecord\").businessId);\r",
													"    })\r",
													"})();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8742\",\r",
													"                    sprint: \"21.03.06\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#realtime#businessMatch#companyNameWithExtension\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"const companyName = utils.getCompanyName();\r",
													"const businessEmail = utils.getRandomDataForField(\"emailAddress1\");\r",
													"const requestDetail = {\r",
													"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
													"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
													"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
													"    \"testerInput\":{} \r",
													"}; \r",
													"//=============================================================\r",
													"(function createEmailMatchRecord(companyName){\r",
													"    let request = JSON.parse(JSON.stringify(requestDetail)); \r",
													"    request.testerInput = {\r",
													"        'companyName' : companyName, \r",
													"        'businessEmail': businessEmail, \r",
													"    }; \r",
													"    \r",
													"    (function createAddressMatchRecord() {                        \r",
													"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {          \r",
													"            pm.variables.set(\"businessEmailMatchRecord\", utils.getOutputData(response.json()));\r",
													"        });            \r",
													"    })();\r",
													"})(companyName+ \" INC\");\r",
													"//=============================================================\r",
													"pm.variables.set(\"companyName\", companyName + \" AC\");\r",
													"pm.variables.set(\"businessEmail\", businessEmail);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8742](https://jira.cnvrmedia.net/browse/PID-8742)\n\n◼ NAME: Realtime identity request with companyName including exclusions.\n\n◼ DESCRIPTION: Identity request's submitted with\n\n companyName to verify companyName exclusions(which included in exclusion list) is ignored.\n\n◼ EXPECTED RESULT:\n\nIf companyName exclusion is included in maintained exclusion list it will be ignored while matching(ex: Epsilon AC and Epsilon INC are matched since both AC and INC are in exclusion list)\n◼ INPUT FIELDS:\n\"companyName\"\n\n◼ OUTPUT FIELDS:\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime > business-match (PID-8738) - Realtime identity request when identity and business details given together in input.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//--------------------------------\r",
													"\r",
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"//DEFINITION=================================================================================================================================================//\r",
													"\r",
													"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"this.defineResponseValidation = () => {\r",
													"    utils.validateOKResponse();\r",
													"}\r",
													"\r",
													"this.defineRequestValidation= () => {\r",
													"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
													"}\r",
													"\r",
													"this.defineInputDataValidation =() => {\r",
													"    pm.test(\"Validate Input -> companyName, businessEmail, fullName, emailAddress1 are provided in input\",()=>{\r",
													"         utils.validateIfNonEmpty(inputData.companyName);\r",
													"         utils.validateIfNonEmpty(inputData.businessEmail);\r",
													"         utils.validateIfNonEmpty(inputData.fullName);\r",
													"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineExistingDataValidation = () => {\r",
													"   \r",
													"};\r",
													"\r",
													"this.defineOutputDataValidation= () => {\r",
													"    pm.test(\"Validate output ->  businessId and individualId comes populated in response.\",()=>{\r",
													"    utils.validateIfNonEmpty(outputData.businessId);\r",
													"    utils.validateIfNonEmpty(outputData.individualId);\r",
													"    });\r",
													"}\r",
													"\r",
													"this.defineInputDataToDisplay = ()=> {\r",
													"  let inputDataToDisplay = \r",
													"   \"[\"\r",
													"    + \"companyName=\" + inputData.companyName + \", \" \r",
													"    + \"businessEmail=\" + inputData.businessEmail + \", \" \r",
													"    + \"fullName=\" + inputData.fullName + \", \" \r",
													"    + \"emailAddress1=\" + inputData.emailAddress1\r",
													"    return inputDataToDisplay;\r",
													"}\r",
													"\r",
													"\r",
													"this.defineOutputDataToDisplay = ()=> {\r",
													"    let outputDataToDisplay =\r",
													"    \"[\"\r",
													"     + \"businessId=\" + outputData.businessId + \", \" \r",
													"     + \"individualId=\" + outputData.individualId \r",
													"        +\"]\";\r",
													"    return outputDataToDisplay;\r",
													"};\r",
													"\r",
													"\r",
													"this.defineExistingDataToDisplay = () => {\r",
													"    \r",
													"};\r",
													"\r",
													"\r",
													"//EXECUTION==============================================================================================================================================//\r",
													"\r",
													"utils.validateAll(this);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8738\",\r",
													"                    sprint: \"21.03.04\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#Realtime#Identity#bussiness-match#Identity\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=======================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//DEFINATION=================================================================================================================================================//\r",
													"\r",
													"this.generateDataForCurrentRequest = () => {\r",
													"    let testerInput = {\"companyName\":utils.getCompanyName(),\"businessEmail\":utils.getEmail()};\r",
													"    utils.setRandomDataForRequest(testerInput);\r",
													"}\r",
													"\r",
													"//EXECUTION================================================================================================================================================//\r",
													"this.generateDataForCurrentRequest();\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"{{emailAddress1}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"companyName\":\"{{companyName}}\",\r\n    \"businessEmail\":\"{{businessEmail}}\",\r\n    \"businessPhone\":\"\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8738](https://jira.cnvrmedia.net/browse/PID-8738)\n\n◼ NAME: Realtime identity request when identity and business details given together.\n\n◼ DESCRIPTION: Identity request's submitted with\nemailAddress1/phone1/addressLine1 with fullName and businessEmail/businessPhone/addressLine1 with companyName in input.\n\n◼ EXPECTED RESULT:\n\nindividualId comes populated in response.\nbusinessId comes populated in response.\n\n◼ INPUT FIELDS:\n\n*  \"fullName\"\n*  \"emailAddress1\"\n*  \"companyName\"\n*  \"businessEmail\"\n\n◼ OUTPUT FIELDS:\n*  \"individualId\"\n* \"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime > business-match > (PID-8754) - Realtime identity request with companyName with only special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//===============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//==============================================================\r",
													"(function verifyCompanyNameWithExtension() {\r",
													"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessEmail'] });\r",
													"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"    pm.test(\"(5) Output Validation: companyName comes populated in response with value provided in input companyName.\", ()=>{\r",
													"        pm.expect(inputData.companyName).equals(outputData.companyName);\r",
													"    })\r",
													"    pm.test(\"(6) Output Validation: empty businessId comes populated in the response\", ()=>{\r",
													"        utils.validateIfEmpty(outputData.businessId);\r",
													"    })\r",
													"})();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8754\",\r",
													"                    sprint: \"21.04.01\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#realtime#businessMatch#companyNameWithOnlySpecialCharactersAndSpace\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=============================================================\r",
													"let generateSpecialCharacterStringWithSpace = ()=>{\r",
													"    let specialChars = [\"~\",\"`\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\"];\r",
													"    return specialChars[_.random(0,specialChars.length-1)] + specialChars[_.random(0,specialChars.length-1)] + specialChars[_.random(0,specialChars.length-1)];\r",
													"}\r",
													"//=============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"const companyName = generateSpecialCharacterStringWithSpace();\r",
													"const businessEmail = utils.getRandomDataForField(\"emailAddress1\");\r",
													"//=============================================================\r",
													"pm.variables.set(\"companyName\", companyName);\r",
													"pm.variables.set(\"businessEmail\", businessEmail);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8754](https://jira.cnvrmedia.net/browse/PID-8754)\n\n◼ NAME: Realtime identity request with companyName with only special characters\n\n◼ DESCRIPTION: Identity requests with companyName having only special characters and spaces gives empty businessId.\nexample:\n companyName - \"*,*\"\n companyName- \":  )\"\n\n◼ EXPECTED RESULT:\nEmpty businessId comes populated in the response.\n\n◼ INPUT FIELDS:\n\"companyName\"\n\n◼ OUTPUT FIELDS:\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "Realtime > business-match > (PID-8755) - Realtime identity request with companyName having special characters along companyName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//===============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
													"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
													"\r",
													"//==============================================================\r",
													"(function verifyCompanyNameWithExtension() {\r",
													"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
													"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
													"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'businessEmail'] });\r",
													"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'companyName'] });\r",
													"\r",
													"    pm.test(\"(5) Output Validation: companyName comes populated in response with value provided in input companyName.\", ()=>{\r",
													"        pm.expect(inputData.companyName).equals(outputData.companyName);\r",
													"    })\r",
													"    pm.test(\"(6) Output Validation: non-empty businessId comes populated in the response\", ()=>{\r",
													"        utils.validateIfNonEmpty(outputData.businessId);\r",
													"    })\r",
													"})();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8755\",\r",
													"                    sprint: \"21.04.01\",\r",
													"                    subject: \"realtime > business-match\",\r",
													"                    tags: \"#realtime#businessMatch#companyNameAlongWithSpecialCharacters\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"\r",
													"//=============================================================\r",
													"let generateSpecialCharacterStringWithSpace = ()=>{\r",
													"    let specialChars = [\"~\",\"`\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\"];\r",
													"    return specialChars[_.random(0,specialChars.length-1)] + specialChars[_.random(0,specialChars.length-1)] + specialChars[_.random(0,specialChars.length-1)];\r",
													"}\r",
													"//=============================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"const companyName = utils.getCompanyName() + \" \" + generateSpecialCharacterStringWithSpace();\r",
													"const businessEmail = utils.getRandomDataForField(\"emailAddress1\");\r",
													"//=============================================================\r",
													"pm.variables.set(\"companyName\", companyName);\r",
													"pm.variables.set(\"businessEmail\", businessEmail);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_ENABLED}}",
												"type": "text"
											},
											{
												"key": "accessToken",
												"value": "{{accessToken}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{XAPIKEY_B2B_ENABLED}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"businessPhone\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/v2/connect/realtime/service",
											"host": [
												"{{server}}"
											],
											"path": [
												"v2",
												"connect",
												"realtime",
												"service"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8755](https://jira.cnvrmedia.net/browse/PID-8755)\n\n◼ NAME: Realtime identity request with companyName having special characters along companyName\n\n◼ DESCRIPTION: Realtime identity request with companyName having special characters along companyName\nexample:\n companyName - \"ADM *,*\"\n companyName- \"ADM : )\"\n\n◼ EXPECTED RESULT:\n1. Non empty businessId comes populated in the response.\n2. companyName get hygiened\n\n◼ INPUT FIELDS:\n\"companyName\"\n\n◼ OUTPUT FIELDS:\n\"businessId\""
									},
									"response": []
								},
								{
									"name": "terminate-business-match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"business-match\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "mode",
							"item": [
								{
									"name": "init-mode",
									"item": [
										{
											"name": "init-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const utils = eval(globals.connectUtils);\r",
															"utils.enableOrDisableFeatures();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "match-mode",
									"item": [
										{
											"name": "init-match-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const utils = eval(globals.connectUtils);\r",
															"utils.enableOrDisableFeatures();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > match-mode > (PID-8830) - Realtime request with 'MATCH' mode for existing record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8830\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > match-mode\",\r",
															"                    tags: \"#realtime#matchMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"\r",
															"\r",
															"    pm.variables.set(\"emailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {'emailAddress1' : pm.variables.get('emailAddress1'), 'fullName' : pm.variables.get('fullName')}; \r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord\", utils.getOutputData(response.json()));\r",
															"        });\r",
															"    })();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"    const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"    \r",
															"    \r",
															"    \r",
															"    (function verifyAll_noMatchFoundRequest() {\r",
															"        utils.doTestLogging({msg: \"Realtime request with 'MATCH' mode for existing record\", type : \"PRINT_MSG\"});\r",
															"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
															"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'emailAddress1'] });\r",
															"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId', 'emailAddress1', 'fullName'],\r",
															"            existingRecords : { \"(email+fullName)-match-record\" : pm.variables.get('matchRecord')} \r",
															"        });\r",
															"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
															"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchRecord')});\r",
															"    })();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
														"type": "default"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "default"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "default"
													},
													{
														"key": "clientCode",
														"value": "{{CCODE_IDENTITY_ENABLED}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"inputRecord\": {\r\n\"addressLine1\": \"\",\r\n\"addressLine2\": \"\",\r\n\"countryCode\": \"USA\",\r\n\"companyName\":\"\",\r\n\"businessPhone\":\"\",\r\n\"locality1\":\"\",\r\n\"emailAddress1\": \"{{emailAddress1}}\",\r\n\"prefix\":\"\",\r\n\"givenName\":\"\",\r\n\"middleName\":\"\",\r\n\"familyName\": \"\",\r\n\"fullName\": \"{{fullName}}\",\r\n\"gender\": \"\",\r\n\"phone1\": \"\",\r\n\"postalCode\": \"\",\r\n\"trustedBusinessID\": \"\",\r\n\"trustedIndividualID\": \"\",\r\n\"userCorrelationId\": \"111\"\r\n},\r\n\"serviceConfig\": {\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\"\r\n},\r\n\"configIdentity\":{\r\n\"mode\":\"MATCH\"\r\n},\r\n\"enableAddressHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableIdentity\": \"yes\",\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > match-mode > (PID-8831) - Realtime request with 'MATCH' mode for new record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8835\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > match-mode\",\r",
															"                    tags: \"#realtime#matchMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"\r",
															"\r",
															"    pm.variables.set(\"emailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"    \r",
															"    \r",
															"    \r",
															"    (function verifyAll_noMatchFoundRequest() {\r",
															"        utils.doTestLogging({msg: \"Realtime request with 'MATCH' mode for new record\", type : \"PRINT_MSG\"});\r",
															"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1', 'fullName'] });\r",
															"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId'] });\r",
															"        pm.test(\"Validate output ->  individualId comes empty in response\", pm.expect(outputData.individualId).to.equal(\"\"));\r",
															"             \r",
															"    })();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
														"type": "default"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "default"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "default"
													},
													{
														"key": "clientCode",
														"value": "{{CCODE_IDENTITY_ENABLED}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"inputRecord\": {\r\n\"addressLine1\": \"\",\r\n\"addressLine2\": \"\",\r\n\"countryCode\": \"USA\",\r\n\"companyName\":\"{{companyName}}\",\r\n\"businessPhone\":\"\",\r\n\"locality1\":\"\",\r\n\"businessEmail\": \"\",\r\n\"emailAddress1\":\"{{emailAddress1}}\",\r\n\"prefix\":\"\",\r\n\"givenName\":\"\",\r\n\"middleName\":\"\",\r\n\"familyName\": \"\",\r\n\"fullName\": \"{{fullName}}\",\r\n\"gender\": \"\",\r\n\"phone1\": \"\",\r\n\"postalCode\": \"\",\r\n\"trustedBusinessID\": \"\",\r\n\"trustedIndividualID\": \"\",\r\n\"userCorrelationId\": \"111\"\r\n},\r\n\"serviceConfig\": {\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\"\r\n},\r\n\"configIdentity\":{\r\n\"mode\":\"MATCH\"\r\n},\r\n\"enableAddressHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableIdentity\": \"yes\",\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > match-mode > (PID-8834) - Realtime B2B request with 'MATCH' mode for existing record.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8834\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > match-mode\",\r",
															"                    tags: \"#realtime#matchModeB2B\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"\r",
															"    pm.variables.set(\"businessEmail\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"companyName\", utils.getRandomDataForField('companyName'));\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {'businessEmail' : pm.variables.get('businessEmail'), 'companyName' : pm.variables.get('companyName')}; \r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord\", utils.getOutputData(response.json()));\r",
															"        });\r",
															"    })();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"    const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"    \r",
															"    \r",
															"    \r",
															"    (function verifyAll_noMatchFoundRequest() {\r",
															"        utils.doTestLogging({msg: \"Realtime request with 'MATCH' mode for existing record\", type : \"PRINT_MSG\"});\r",
															"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['businessEmail', 'companyName'] });\r",
															"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId'] });\r",
															"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['businessId'],\r",
															"            existingRecords : { \"(email+fullName)-match-record\" : pm.variables.get('matchRecord')} \r",
															"        });\r",
															"        pm.test(\"(6)- Validate Output > Existing BusinessId returns in the output.\", ()=>{\r",
															"             pm.expect(outputData.businessId).to.equal(pm.variables.get('matchRecord').businessId)});\r",
															"             \r",
															"    })();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{XAPIKEY_B2B_ENABLED}}",
														"type": "default"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "default"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "default"
													},
													{
														"key": "clientCode",
														"value": "{{CCODE_B2B_ENABLED}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"inputRecord\": {\r\n\"addressLine1\": \"\",\r\n\"addressLine2\": \"\",\r\n\"countryCode\": \"USA\",\r\n\"companyName\":\"{{companyName}}\",\r\n\"businessPhone\":\"\",\r\n\"locality1\":\"\",\r\n\"businessEmail\": \"{{businessEmail}}\",\r\n\"prefix\":\"\",\r\n\"givenName\":\"\",\r\n\"middleName\":\"\",\r\n\"familyName\": \"\",\r\n\"fullName\": \"{{fullName}}\",\r\n\"gender\": \"\",\r\n\"phone1\": \"\",\r\n\"postalCode\": \"\",\r\n\"trustedBusinessID\": \"\",\r\n\"trustedIndividualID\": \"\",\r\n\"userCorrelationId\": \"111\"\r\n},\r\n\"serviceConfig\": {\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\"\r\n},\r\n\"configIdentity\":{\r\n\"mode\":\"MATCH\"\r\n},\r\n\"enableAddressHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableIdentity\": \"yes\",\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > match-mode > (PID-8835) - Realtime B2B request with 'MATCH' mode for new record.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8835\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > match-mode\",\r",
															"                    tags: \"#realtime#matchMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"\r",
															"\r",
															"    pm.variables.set(\"businessEmail\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"companyName\", utils.getRandomDataForField('companyName'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"    const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"    \r",
															"    \r",
															"    \r",
															"    (function verifyAll_noMatchFoundRequest() {\r",
															"        utils.doTestLogging({msg: \"Realtime request with 'MATCH' mode for new record\", type : \"PRINT_MSG\"});\r",
															"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['businessEmail', 'companyName'] });\r",
															"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId'] });\r",
															"        pm.test(\"(6)- Validate Output > Empty businessId returns in the output.\", ()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(\"\")});\r",
															"\r",
															"             \r",
															"    })();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}",
														"type": "default"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "default"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "default"
													},
													{
														"key": "clientCode",
														"value": "{{CCODE_IDENTITY_ENABLED}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"inputRecord\": {\r\n\"addressLine1\": \"\",\r\n\"addressLine2\": \"\",\r\n\"countryCode\": \"USA\",\r\n\"companyName\":\"{{companyName}}\",\r\n\"businessPhone\":\"\",\r\n\"locality1\":\"\",\r\n\"businessEmail\": \"{{businessEmail}}\",\r\n\"prefix\":\"\",\r\n\"givenName\":\"\",\r\n\"middleName\":\"\",\r\n\"familyName\": \"\",\r\n\"fullName\": \"{{fullName}}\",\r\n\"gender\": \"\",\r\n\"phone1\": \"\",\r\n\"postalCode\": \"\",\r\n\"trustedBusinessID\": \"\",\r\n\"trustedIndividualID\": \"\",\r\n\"userCorrelationId\": \"111\"\r\n},\r\n\"serviceConfig\": {\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\"\r\n},\r\n\"configIdentity\":{\r\n\"mode\":\"MATCH\"\r\n},\r\n\"enableAddressHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableIdentity\": \"yes\",\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > match > (PID-8832) -Realtime request with 'MATCH' mode to verify the profile enrichment with new attribute.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"//DEFINITION=================================================================================================================================================//\r",
															"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputRecord = JSON.parse(responseBody);\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"this.defineResponseValidation = () => {\r",
															"    utils.validateOKResponse();\r",
															"}\r",
															"\r",
															"this.defineRequestValidation= () => {\r",
															"    let inputParams = [\"individualId\"];\r",
															"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"), inputParams);\r",
															"}\r",
															"\r",
															"this.defineInputDataValidation =() => {\r",
															"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1,  postalCode) are provided.\",()=>{\r",
															"         utils.validateIfNonEmpty(inputData.fullName)\r",
															"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
															"         utils.validateIfNonEmpty(inputData.emailAddress2);\r",
															"         \r",
															"    });\r",
															"}\r",
															"\r",
															"this.defineExistingDataValidation = () => {\r",
															"    pm.test(\"Validate existing ->  Record exists with emailAddress1\", utils.validateIfNonEmpty(existingRecords.email1MatchRecord.emailAddress1));\r",
															"};\r",
															"let getRequest = {\r",
															"        url: pm.environment.get('server') + \"/v2/connect/realtime/privacy/byId?individualId=\"+outputData.individualId,\r",
															"        method: 'GET',\r",
															"        header: {\r",
															"            \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"            \"x-api-key\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"            \"accessToken\": pm.environment.get(\"accessToken\")\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(getRequest, (error, response)=>{\r",
															"        let privacyOutput = response.json();\r",
															"        pm.test(\"Validate output -> The extra attribute doesn't get enriched to profile.\", () =>{\r",
															"            pm.expect(_.size(privacyOutput.storedAttributes) == 1).to.be.true;\r",
															"        });\r",
															"    });\r",
															"this.defineOutputDataValidation= () => {\r",
															"    \r",
															"}\r",
															"\r",
															"this.defineInputDataToDisplay = ()=> {\r",
															"  let inputDataToDisplay =\r",
															"   \"[\"\r",
															"    + \"fullName=\" + inputData.fullName + \", \"\r",
															"    + \"emailAddress1=\" + inputData.emailAddress1+ \", \"\r",
															"    + \"emailAddress2=\" + inputData.emailAddress2\r",
															"    +\"]\";\r",
															"    return inputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineOutputDataToDisplay = ()=> {\r",
															"    let outputDataToDisplay = \"[\"\r",
															"            +\"individualId=\" + outputData.individualId +\", \"\r",
															"            +\"fullName=\" + outputData.fullName +\", \"\r",
															"            + \"emailAddress1=\" + outputData.emailAddress1+ \", \"\r",
															"            + \"emailAddress2=\" + outputData.emailAddress2\r",
															"        +\"]\";\r",
															"    return outputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineExistingDataToDisplay = () => {\r",
															"    let existingDataRecord = existingRecords.email1MatchRecord;\r",
															"    let existingDataToDisplay = \"emailAddress1 match identity exists: [\"\r",
															"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
															"            + \"emailAddress1=\" + existingDataRecord.emailAddress1\r",
															"            +\"]\"\r",
															"    return existingDataToDisplay;\r",
															"};\r",
															"\r",
															"\r",
															"//EXECUTION==============================================================================================================================================//\r",
															"\r",
															"utils.validateAll(this);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=======================================================================================================================================//\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"8832\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > match\",\r",
															"                    tags: \"#Realtime#Identity#ProfileEnrichment\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"\r",
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"let existingRecords = { \"email1MatchRecord\": \"\"};\r",
															"let emailAddress1 =utils.getEmail();\r",
															"let commonFullName = utils.getFullName();\r",
															"\r",
															"//DEFINATION=================================================================================================================================================//\r",
															"\r",
															"let getPreRequest1 = () => {\r",
															"    let testerInput = { \"fullName\": commonFullName, \"phone1\": \"\", \"addressLine1\": \"\",\"postalCode\":\"\",\"emailAddress1\":emailAddress1 };\r",
															"    let requestDetail = {\r",
															"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"        \"data\": utils.generateIdentityPayload(testerInput),\r",
															"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
															"        \"msg\":\"Generate data for emailAddress1 match\"\r",
															"    };\r",
															"    return requestDetail;\r",
															"}\r",
															"\r",
															"this.generateDataForCurrentRequest = () => {\r",
															"    //N/A\r",
															"}\r",
															"\r",
															"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
															"    let existingRecord = {\r",
															"        \"fullName\": outputData.fullName,\r",
															"        \"emailAddress1\": outputData.emailAddress1,\r",
															"        \"individualId\": outputData.individualId\r",
															"    };\r",
															"    existingRecords.email1MatchRecord = existingRecord;\r",
															"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
															"}\r",
															"\r",
															"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
															"    pm.variables.set(\"fullName\", outputData.fullName);\r",
															"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
															"    pm.variables.set(\"emailAddress2\", utils.getEmail());\r",
															"}\r",
															"\r",
															"\r",
															"//EXECUTION================================================================================================================================================//\r",
															"this.generateDataForCurrentRequest();\r",
															"utils.submitPostRequest(this, getPreRequest1(), \"preRequest1\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"value": "{{CCODE_IDENTITY_ENABLED}}",
														"type": "text"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"inputRecord\": {\r\n\"addressLine1\": \"\",\r\n\"addressLine2\": \"\",\r\n\"countryCode\": \"{{countryCode}}\",\r\n\"companyName\":\"\",\r\n\"businessPhone\":\"\",\r\n\"locality1\":\"\",\r\n\"emailAddress1\": \"{{emailAddress1}}\",\r\n\"emailAddress2\": \"{{emailAddress2}}\",\r\n\"prefix\":\"\",\r\n\"givenName\":\"\",\r\n\"middleName\":\"\",\r\n\"familyName\": \"\",\r\n\"fullName\": \"{{fullName}}\",\r\n\"gender\": \"\",\r\n\"phone1\": \"\",\r\n\"postalCode\": \"\",\r\n\"fKey2\":\"\",\r\n\"trustedBusinessID\": \"\",\r\n\"trustedIndividualID\": \"\",\r\n\"userCorrelationId\": \"\"\r\n},\r\n\"serviceConfig\": {\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\"\r\n},\r\n\"configIdentity\":{\r\n\"mode\":\"MATCH\"\r\n},\r\n\"enableAddressHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableIdentity\": \"yes\",\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8832](https://jira.cnvrmedia.net/browse/PID-8832)\n\n◼ NAME: Realtime request with 'MATCH' mode to verify the profile enrichment with new attribute.  \n\n◼ DESCRIPTION: Connect-realtime request with existing record and  extra attribute(emailAddress2) to verify the profile enrichment in database.\n\n◼ EXPECTED RESULT:\n* The extra attribute(emailAddress2) is not enriched to the existing record.\n* Existing record's indiviualId is returned in response.\n\n◼ INPUT FIELDS:\n\n\"emailAddress1\"\n\"emailAddress2\"\n\"fullName\"\n\n◼ OUTPUT FIELDS:\n\n\"individualId\""
											},
											"response": []
										},
										{
											"name": "Realtime > match > (PID-8833) -Realtime request with 'MATCH' mode to verify consolidation scenarios.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=======================================================================================================================================//\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"8833\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > match\",\r",
															"                    tags: \"#realtime#matchMode#Consolidation\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"\r",
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"let existingRecords = { \"email1MatchRecord\": \"\", \"email2MatchRecord\": \"\"};\r",
															"let commonFullName = utils.getFullName();\r",
															"\r",
															"//DEFINATION=================================================================================================================================================//\r",
															"\r",
															"let getPreRequest1 = () => {\r",
															"    let testerInput = { \"fullName\": commonFullName, \"phone1\": \"\", \"addressLine1\": \"\",\"postalCode\":\"\" };\r",
															"    let requestDetail = {\r",
															"        \"clientCode\": pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"        \"data\": utils.generateIdentityPayload(testerInput),\r",
															"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
															"        \"msg\":\"Generate data for emailAddress1 match\"\r",
															"    };\r",
															"    return requestDetail;\r",
															"}\r",
															"let getPreRequest2 = () => {\r",
															"    let testerInput = { \"fullName\": commonFullName, \"addressLine1\": \"\", \"postalCode\": \"\",\"phone1\": \"\",\"emailAddress1\":\"\",\"emailAddress2\":utils.getEmail() };\r",
															"    let requestDetail = {\r",
															"        \"clientCode\":pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"        \"apiKey\":  pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"        \"data\": utils.generateIdentityPayload(testerInput),\r",
															"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
															"        \"msg\":\"Generate data for emailAddress2 match\"\r",
															"    };\r",
															"    return requestDetail;\r",
															"}\r",
															"\r",
															"this.generateDataForCurrentRequest = () => {\r",
															"    let testerInput = {};\r",
															"    utils.setRandomDataForRequest(testerInput);\r",
															"}\r",
															"\r",
															"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
															"    let existingRecord = {\r",
															"        \"fullName\": outputData.fullName,\r",
															"        \"emailAddress1\": outputData.emailAddress1,\r",
															"        \"individualId\": outputData.individualId\r",
															"    };\r",
															"    existingRecords.email1MatchRecord = existingRecord;\r",
															"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
															"}\r",
															"\r",
															"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
															"    let existingRecord = {\r",
															"        \"fullName\": outputData.fullName,\r",
															"        \"emailAddress2\": outputData.emailAddress2,\r",
															"        \"individualId\": outputData.individualId\r",
															"    };\r",
															"    existingRecords.email2MatchRecord = existingRecord;\r",
															"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
															"}\r",
															"\r",
															"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
															"    pm.variables.set(\"fullName\", outputData.fullName);\r",
															"    pm.variables.set(\"emailAddress1\", outputData.emailAddress1);\r",
															"}\r",
															"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
															"    pm.variables.set(\"emailAddress2\", outputData.emailAddress2);\r",
															"}\r",
															"\r",
															"//EXECUTION================================================================================================================================================//\r",
															"this.generateDataForCurrentRequest();\r",
															"utils.submitPostRequest(this, getPreRequest1(), \"preRequest1\");\r",
															"utils.submitPostRequest(this, getPreRequest2(), \"preRequest2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"//DEFINITION=================================================================================================================================================//\r",
															"\r",
															"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputRecord = JSON.parse(responseBody);\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"\r",
															"this.defineResponseValidation = () => {\r",
															"    utils.validateOKResponse();\r",
															"}\r",
															"\r",
															"this.defineRequestValidation= () => {\r",
															"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
															"}\r",
															"\r",
															"this.defineInputDataValidation =() => {\r",
															"    pm.test(\"Validate Input -> Required fields(fullName, emailAddress1,  postalCode) are provided.\",()=>{\r",
															"         utils.validateIfNonEmpty(inputData.fullName)\r",
															"         utils.validateIfNonEmpty(inputData.emailAddress1);\r",
															"         utils.validateIfNonEmpty(inputData.emailAddress2);\r",
															"         \r",
															"    });\r",
															"}\r",
															"\r",
															"this.defineExistingDataValidation = () => {\r",
															"    pm.test(\"Validate existing ->  Record1 exists with emailAddress1\", utils.validateIfNonEmpty(existingRecords.email1MatchRecord.emailAddress1));\r",
															"    pm.test(\"Validate existing ->  Record2 exists with emailAddress2\", utils.validateIfNonEmpty(existingRecords.email2MatchRecord.emailAddress2));\r",
															"};\r",
															"\r",
															"this.defineOutputDataValidation= () => {\r",
															"    pm.test(\"Validate output ->  Consolidation doesn't happen with the match mode.\",()=>{\r",
															"    pm.expect(_.size(outputRecord.identityOutput.consolidations.consolidatedIds) == 0).to.be.true;\r",
															"    });\r",
															"    pm.test(\"Validate output -> Lower individualId comes populated in the response.\",()=>{\r",
															"     if(existingRecords.email1MatchRecord.individualId>existingRecords.email2MatchRecord.individualId){\r",
															"         pm.expect(outputData.individualId).to.equal(existingRecords.email2MatchRecord.individualId)\r",
															"     }\r",
															"     else{\r",
															"          pm.expect(outputData.individualId).to.equal(existingRecords.email1MatchRecord.individualId)\r",
															"     }\r",
															"    });\r",
															"}\r",
															"\r",
															"this.defineInputDataToDisplay = ()=> {\r",
															"  let inputDataToDisplay =\r",
															"   \"[\"\r",
															"    + \"fullName=\" + inputData.fullName + \", \"\r",
															"    + \"emailAddress1=\" + inputData.emailAddress1+ \", \"\r",
															"    + \"emailAddress2=\" + inputData.emailAddress2\r",
															"    +\"]\";\r",
															"    return inputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineOutputDataToDisplay = ()=> {\r",
															"    let outputDataToDisplay = \"[\"\r",
															"            +\"individualId=\" + outputData.individualId +\", \"\r",
															"            +\"fullName=\" + outputData.fullName +\", \"\r",
															"            + \"emailAddress1=\" + outputData.emailAddress1+ \", \"\r",
															"            + \"emailAddress2=\" + outputData.emailAddress2\r",
															"        +\"]\";\r",
															"    return outputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineExistingDataToDisplay = () => {\r",
															"    let existingDataRecord = existingRecords.email1MatchRecord;\r",
															"    let existingDataRecord1 = existingRecords.email2MatchRecord;\r",
															"    let existingDataToDisplay = \"emailAddress1 match identity exists: [\"\r",
															"            +\"individualId=\" + existingDataRecord.individualId + \", \"\r",
															"            + \"emailAddress1=\" + existingDataRecord.emailAddress1\r",
															"            +\"]\"+\r",
															"            \"emailAddress2 match identity exists: [\"\r",
															"            +\"individualId=\" + existingDataRecord1.individualId + \", \"\r",
															"            + \"emailAddress2=\" + existingDataRecord1.emailAddress2\r",
															"            +\"]\";\r",
															"    return existingDataToDisplay;\r",
															"};\r",
															"\r",
															"\r",
															"//EXECUTION==============================================================================================================================================//\r",
															"\r",
															"utils.validateAll(this);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"value": "{{CCODE_IDENTITY_ENABLED}}",
														"type": "text"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"inputRecord\": {\r\n\"addressLine1\": \"\",\r\n\"addressLine2\": \"\",\r\n\"countryCode\": \"{{countryCode}}\",\r\n\"companyName\":\"\",\r\n\"businessPhone\":\"\",\r\n\"locality1\":\"\",\r\n\"emailAddress1\": \"{{emailAddress1}}\",\r\n\"emailAddress2\": \"{{emailAddress2}}\",\r\n\"prefix\":\"\",\r\n\"givenName\":\"\",\r\n\"middleName\":\"\",\r\n\"familyName\": \"\",\r\n\"fullName\": \"{{fullName}}\",\r\n\"gender\": \"\",\r\n\"phone1\": \"\",\r\n\"postalCode\": \"\",\r\n\"fKey2\":\"\",\r\n\"trustedBusinessID\": \"\",\r\n\"trustedIndividualID\": \"\",\r\n\"userCorrelationId\": \"\"\r\n},\r\n\"serviceConfig\": {\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\"\r\n},\r\n\"configIdentity\":{\r\n\"mode\":\"MATCH\"\r\n},\r\n\"enableAddressHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableIdentity\": \"yes\",\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8833](https://jira.cnvrmedia.net/browse/PID-8833)\n\n◼ NAME: Realtime request with 'MATCH' mode to verify consolidation scenarios. \n\n◼ DESCRIPTION: Connect-realtime request with 'emailAddress1', 'emailAddress2' and 'fullName' to verify consolidation with 'MATCH' mode.\n\n◼ PRECONDITION:\n\nIdentity record exists with fullName and emailAddress1.\nIdentity record exists with fullName and emailAddress2.\n\n◼ EXPECTED RESULT:\n\n* Consolidation will not happen(both existing records remains without any change in the database).\n* Lower individualId from two existing records is returned in response.\n\n◼ INPUT FIELDS:\n\n\"emailAddress1\"\n\"emailAddress2\"\n\"fullName\"\n\n◼ OUTPUT FIELDS:\n\n\"individualId\""
											},
											"response": []
										},
										{
											"name": "Realtime > business-match > match > (PID-8836) -Realtime B2B request with 'MATCH' mode to verify the profile enrichment with new attribute.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"//DEFINITION=================================================================================================================================================//\r",
															"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputRecord = JSON.parse(responseBody);\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"this.defineResponseValidation = () => {\r",
															"    utils.validateOKResponse();\r",
															"}\r",
															"\r",
															"this.defineRequestValidation= () => {\r",
															"    let inputParams = [\"individualId\"];\r",
															"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"), inputParams);\r",
															"}\r",
															"\r",
															"\r",
															"this.defineInputDataValidation =() => {\r",
															"    pm.test(\"Validate Input -> Required fields(companyName, businessEmail, businessPhone) are provided.\",()=>{\r",
															"         utils.validateIfNonEmpty(inputData.companyName)\r",
															"         utils.validateIfNonEmpty(inputData.businessEmail); \r",
															"         utils.validateIfNonEmpty(inputData.businessPhone); \r",
															"    });\r",
															"}\r",
															"\r",
															"this.defineExistingDataValidation = () => {\r",
															"    pm.test(\"Validate existing ->  Record1 exists with businessEmail\", utils.validateIfNonEmpty(existingRecords.businessEmailMatchRecord.businessEmail));\r",
															"}\r",
															"\r",
															"let getRequest = {\r",
															"        url: pm.environment.get('server') + \"/v2/connect/realtime/privacy/byId?individualId=\"+outputData.businessId,\r",
															"        method: 'GET',\r",
															"        header: {\r",
															"            \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"            \"x-api-key\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"            \"accessToken\": pm.environment.get(\"accessToken\")\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(getRequest, (error, response)=>{\r",
															"        let privacyOutput = response.json();\r",
															"        pm.test(\"Validate output -> The extra attribute doesn't get enriched to profile.\", () =>{\r",
															"            pm.expect(_.size(privacyOutput.storedAttributes) == 1).to.be.true;\r",
															"        });\r",
															"    });\r",
															"this.defineOutputDataValidation= () => {\r",
															"\r",
															"};\r",
															"  \r",
															"\r",
															"this.defineInputDataToDisplay = ()=> {\r",
															"  let inputDataToDisplay =\r",
															"   \"[\"\r",
															"    + \"companyName=\" + inputData.companyName + \", \"\r",
															"    + \"businessEmail=\" + inputData.businessEmail+ \", \"\r",
															"    + \"businessPhone=\" + inputData.businessPhone\r",
															"    +\"]\";\r",
															"    return inputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineOutputDataToDisplay = ()=> {\r",
															"    let outputDataToDisplay = \"[\"\r",
															"            +\"businessId=\" + outputData.businessId +\", \"\r",
															"            +\"companyName=\" + outputData.companyName \r",
															"        +\"]\";\r",
															"    return outputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineExistingDataToDisplay = () => {\r",
															"    let existingDataRecord = existingRecords.businessEmailMatchRecord;\r",
															"    let existingDataToDisplay = \"businessEmail match identity exists: [\"\r",
															"            +\"businessId=\" + existingDataRecord.businessId + \", \"\r",
															"            + \"businessEmail=\" + existingDataRecord.businessEmail\r",
															"            +\"]\";\r",
															"    return existingDataToDisplay;\r",
															"};\r",
															"\r",
															"//EXECUTION==============================================================================================================================================//\r",
															"\r",
															"utils.validateAll(this);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=======================================================================================================================================//\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"8836\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > business-match > match\",\r",
															"                    tags: \"#Realtime#B2B#ProfileEnrichment\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"let existingRecords = { \"businessEmailMatchRecord\": \"\"};\r",
															"let businessEmail = utils.getEmail();\r",
															"let businessPhone = utils.getValidPhone1();\r",
															"let commonCompanyName = utils.getCompanyName();\r",
															"\r",
															"//DEFINATION=================================================================================================================================================//\r",
															"\r",
															"let getPreRequest1 = () => {\r",
															"    let testerInput = { \"companyName\": commonCompanyName,\"fullName\":\"\", \"phone1\": \"\", \"addressLine1\": \"\",\"postalCode\":\"\",\"emailAddress1\":\"\",\"businessEmail\":businessEmail };\r",
															"    let requestDetail = {\r",
															"        \"clientCode\": pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"        \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"        \"data\": utils.generateIdentityPayload(testerInput),\r",
															"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
															"        \"msg\":\"Generate data for businessEmail match\"\r",
															"    };\r",
															"    return requestDetail;\r",
															"}\r",
															"\r",
															"this.generateDataForCurrentRequest = () => {\r",
															"    \r",
															"}\r",
															"\r",
															"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
															"    let existingRecord = {\r",
															"        \"companyName\": outputData.companyName,\r",
															"        \"businessEmail\": businessEmail,\r",
															"        \"businessId\": outputData.businessId\r",
															"    };\r",
															"    existingRecords.businessEmailMatchRecord = existingRecord;\r",
															"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
															"}\r",
															"\r",
															"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
															"    pm.variables.set(\"companyName\", outputData.companyName);\r",
															"    pm.variables.set(\"businessEmail\", businessEmail);\r",
															"    pm.variables.set(\"businessPhone\", businessPhone);\r",
															"}\r",
															"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
															"    \r",
															"}\r",
															"\r",
															"//EXECUTION================================================================================================================================================//\r",
															"this.generateDataForCurrentRequest();\r",
															"utils.submitPostRequest(this, getPreRequest1(), \"preRequest1\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"value": "{{CCODE_B2B_ENABLED}}",
														"type": "text"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"emailAddress2\": \"\",\r\n    \"businessEmail\": \"{{businessEmail}}\",\r\n    \"businessPhone\": \"{{businessPhone}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"\",\r\n    \"companyName\": \"{{companyName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"configIdentity\":{\r\n    \"mode\":\"MATCH\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8836](https://jira.cnvrmedia.net/browse/PID-8836)\n\n◼ NAME: Realtime B2B request with 'MATCH' mode to verify the profile enrichment with new attribute. \n\n◼ DESCRIPTION: Connect-realtime B2B request with existing record and  extra attribute(businessPhone) to verify the new attribute(businessPhone) enrichment in database with 'MATCH' mode.\n\n◼ PRECONDITION:\nClient profile is enabled for b2b.\n\n◼ EXPECTED RESULT:\n* The extra attribute(businessPhone) is not enriched to the existing record.\n* Existing record's businessId is returned in response.\n\n◼ INPUT FIELDS:\n\n\"businessEmail\"\n\"businessPhone\"\n\"companyName\"\n\n◼ OUTPUT FIELDS:\n\n\"businessId\""
											},
											"response": []
										},
										{
											"name": "Realtime > business-match > match > (PID-8837) -Realtime B2B request with 'MATCH' mode to verify consolidation scenarios.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=======================================================================================================================================//\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"8837\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > business-match > match\",\r",
															"                    tags: \"#realtime#B2B#matchMode#profileEnrichment\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"\r",
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"let existingRecords = { \"businessEmailMatchRecord\": \"\", \"businessPhoneMatchRecord\": \"\"};\r",
															"let businessEmail = utils.getEmail();\r",
															"let businessPhone = utils.getValidPhone1();\r",
															"let commonCompanyName = utils.getCompanyName();\r",
															"\r",
															"//DEFINATION=================================================================================================================================================//\r",
															"\r",
															"let getPreRequest1 = () => {\r",
															"    let testerInput = { \"companyName\": commonCompanyName, \"phone1\": \"\", \"addressLine1\": \"\",\"postalCode\":\"\",\"businessEmail\":businessEmail };\r",
															"    let requestDetail = {\r",
															"        \"clientCode\": pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"        \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"        \"data\": utils.generateIdentityPayload(testerInput),\r",
															"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
															"        \"msg\":\"Generate data for businessEmail match\"\r",
															"    };\r",
															"    return requestDetail;\r",
															"}\r",
															"let getPreRequest2 = () => {\r",
															"    let testerInput = { \"companyName\": commonCompanyName, \"addressLine1\": \"\", \"postalCode\": \"\",\"businessPhone\":businessPhone };\r",
															"    let requestDetail = {\r",
															"        \"clientCode\":pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"        \"apiKey\":  pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"        \"data\": utils.generateIdentityPayload(testerInput),\r",
															"        \"url\": pm.environment.get(\"URL_REALTIME\"),\r",
															"        \"msg\":\"Generate data for businessPhone match\"\r",
															"    };\r",
															"    return requestDetail;\r",
															"}\r",
															"\r",
															"this.generateDataForCurrentRequest = () => {\r",
															"    let testerInput = {};\r",
															"    utils.setRandomDataForRequest(testerInput);\r",
															"}\r",
															"\r",
															"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
															"    let existingRecord = {\r",
															"        \"companyName\": outputData.companyName,\r",
															"        \"businessEmail\": businessEmail,\r",
															"        \"businessId\": outputData.businessId\r",
															"    };\r",
															"    existingRecords.businessEmailMatchRecord = existingRecord;\r",
															"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
															"}\r",
															"\r",
															"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
															"    let existingRecord = {\r",
															"        \"companyName\": outputData.companyName,\r",
															"        \"businessPhone\": businessPhone,\r",
															"        \"businessId\": outputData.businessId\r",
															"    };\r",
															"    existingRecords.businessPhoneMatchRecord = existingRecord;\r",
															"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
															"}\r",
															"\r",
															"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
															"    pm.variables.set(\"companyName\", outputData.companyName);\r",
															"    pm.variables.set(\"businessEmail\", businessEmail);\r",
															"}\r",
															"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
															"    pm.variables.set(\"businessPhone\", businessPhone);\r",
															"}\r",
															"\r",
															"//EXECUTION================================================================================================================================================//\r",
															"this.generateDataForCurrentRequest();\r",
															"utils.submitPostRequest(this, getPreRequest1(), \"preRequest1\");\r",
															"utils.submitPostRequest(this, getPreRequest2(), \"preRequest2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//INITIALIZATION==============================================================================================================================================//\r",
															"const utils = eval(globals.connectUtils);\r",
															"//DEFINITION=================================================================================================================================================//\r",
															"\r",
															"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputRecord = JSON.parse(responseBody);\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"\r",
															"this.defineResponseValidation = () => {\r",
															"    utils.validateOKResponse();\r",
															"}\r",
															"\r",
															"this.defineRequestValidation= () => {\r",
															"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_B2B_ENABLED\"));\r",
															"}\r",
															"\r",
															"this.defineInputDataValidation =() => {\r",
															"    pm.test(\"Validate Input -> Required fields(companyName, businessEmail, businessPhone) are provided.\",()=>{\r",
															"         utils.validateIfNonEmpty(inputData.companyName)\r",
															"         utils.validateIfNonEmpty(inputData.businessEmail); \r",
															"         utils.validateIfNonEmpty(inputData.businessPhone); \r",
															"    });\r",
															"}\r",
															"\r",
															"this.defineExistingDataValidation = () => {\r",
															"    pm.test(\"Validate existing ->  Record1 exists with businessEmail\", utils.validateIfNonEmpty(existingRecords.businessEmailMatchRecord.businessEmail));\r",
															"    pm.test(\"Validate existing ->  Record2 exists with businessPhone\", utils.validateIfNonEmpty(existingRecords.businessPhoneMatchRecord.businessPhone));\r",
															"};\r",
															"\r",
															"this.defineOutputDataValidation= () => {\r",
															"    pm.test(\"Validate output ->  Consolidation doesn't happen with the match mode.\",()=>{\r",
															"    pm.expect(_.size(outputRecord.identityOutput.businessConsolidations.consolidatedIds) == 0).to.be.true;\r",
															"    });\r",
															"    pm.test(\"Validate output -> Lower individualId cames populated in the response.\",()=>{\r",
															"     if(existingRecords.businessEmailMatchRecord.businessId>existingRecords.businessPhoneMatchRecord.businessId){\r",
															"         pm.expect(outputData.businessId).to.equal(existingRecords.businessPhoneMatchRecord.businessId)\r",
															"     }\r",
															"     else{\r",
															"          pm.expect(outputData.businessId).to.equal(existingRecords.businessEmailMatchRecord.businessId)\r",
															"     }\r",
															"    });\r",
															"}\r",
															"\r",
															"this.defineInputDataToDisplay = ()=> {\r",
															"  let inputDataToDisplay =\r",
															"   \"[\"\r",
															"    + \"companyName=\" + inputData.companyName + \", \"\r",
															"    + \"businessEmail=\" + inputData.businessEmail+ \", \"\r",
															"    + \"businessPhone=\" + inputData.businessPhone\r",
															"    +\"]\";\r",
															"    return inputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineOutputDataToDisplay = ()=> {\r",
															"    let outputDataToDisplay = \"[\"\r",
															"            +\"businessId=\" + outputData.businessId +\", \"\r",
															"            +\"companyName=\" + outputData.companyName \r",
															"        +\"]\";\r",
															"    return outputDataToDisplay;\r",
															"}\r",
															"\r",
															"\r",
															"this.defineExistingDataToDisplay = () => {\r",
															"    let existingDataRecord = existingRecords.businessEmailMatchRecord;\r",
															"    let existingDataRecord1 = existingRecords.businessPhoneMatchRecord;\r",
															"    let existingDataToDisplay = \"businessEmail match identity exists: [\"\r",
															"            +\"businessId=\" + existingDataRecord.businessId + \", \"\r",
															"            + \"businessEmail=\" + existingDataRecord.businessEmail\r",
															"            +\"]\"+\r",
															"            \"businessPhone match identity exists: [\"\r",
															"            +\"businessId=\" + existingDataRecord1.businessId + \", \"\r",
															"            + \"businessPhone=\" + existingDataRecord1.businessPhone\r",
															"            +\"]\";\r",
															"    return existingDataToDisplay;\r",
															"};\r",
															"\r",
															"\r",
															"//EXECUTION==============================================================================================================================================//\r",
															"\r",
															"utils.validateAll(this);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"value": "{{CCODE_B2B_ENABLED}}",
														"type": "text"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"inputRecord\": {\r\n    \"addressLine1\": \"\",\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"emailAddress1\": \"\",\r\n    \"emailAddress2\": \"\",\r\n    \"businessEmail\": \"{{businessEmail}}\",\r\n    \"businessPhone\": \"{{businessPhone}}\",\r\n    \"familyName\": \"\",\r\n    \"fullName\": \"\",\r\n    \"companyName\": \"{{companyName}}\",\r\n    \"gender\": \"\",\r\n    \"phone1\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"trustedBusinessID\": \"\",\r\n    \"trustedIndividualID\": \"\",\r\n    \"userCorrelationId\": \"{{userCorrelationId}}\"\r\n},\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\"\r\n    },\r\n    \"configIdentity\":{\r\n    \"mode\":\"MATCH\"\r\n    },\r\n    \"enableAddressHygiene\": \"Yes\",\r\n    \"enableEmailHygiene\": \"Yes\",\r\n    \"enableGlobalSuppression\": \"yes\",\r\n    \"enableIdentity\": \"Yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"yes\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"yes\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8837](https://jira.cnvrmedia.net/browse/PID-8837)\n\n◼ NAME: Realtime B2B request with 'MATCH' mode to verify consolidation scenario. \n\n◼ DESCRIPTION: Connect-realtime request with 'businessEmail', 'businessPhone' and 'companyName' to verify consolidation with 'MATCH' mode.\n\n◼ PRECONDITION:\n\n* Client profile is enabled for b2b.\n* Record exists with companyName and businessEmail.\n* Record exists with companyName and businessPhone.\n\n◼ EXPECTED RESULT:\n* Consolidation will not happen(both existing records remains without any change in the database)\n* Lower businessId from two existing b2b records is returned in 'businessId' field.\n\n◼ INPUT FIELDS:\n\n\"businessEmail\"\n\"businessPhone\"\n\"companyName\"\n\n◼ OUTPUT FIELDS:\n\n\"businessId\""
											},
											"response": []
										},
										{
											"name": "terminate-match-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set(\"folder\", \"match-mode\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "delete-mode",
									"item": [
										{
											"name": "init-delete-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const utils = eval(globals.connectUtils);\r",
															"utils.enableOrDisableFeatures();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8848) - Realtime request, with \"DELETE\" mode, when trustedIndividualId is provided in input",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with delete mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId', 'emailAddress1'],\r",
															"            existingRecords : { \"email-match-record-1\" : pm.variables.get('matchRecord') } \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6)- Validate output data: identityOutput.returnCode comes non-empty in response\", ()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let emailAddress1 = pm.variables.get(\"identityEmailAddress1\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST\");\r",
															"        pm.variables.set(\"emailAddress1\", emailAddress1);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity match with deleted profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId'] });\r",
															"    pm.test(\"(5)- Validate output: individualId comes populated empty in the response, .\",()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8848\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"DELETE_MODE_REQUEST\";\r",
															"    }\r",
															"})()\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"DELETE_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"DELETE\");\r",
															"    pm.variables.set(\"identityEmailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"emailAddress1\", \"\");\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {'emailAddress1' : pm.variables.get('identityEmailAddress1')}; \r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord\", utils.getOutputData(response.json()));\r",
															"            pm.variables.set(\"trustedIndividualId\", pm.variables.get(\"matchRecord\").individualId);\r",
															"        });\r",
															"    })();\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    pm.variables.set(\"emailAddress1\", pm.variables.get('emailAddress1'));\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_IDENTITY_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessId\": \"\",\r\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8848](https://jira.cnvrmedia.net/browse/PID-8848)\n\n◼ NAME: Identity realtime request, with \"DELETE\" mode, when trustedIndividualId is provided in input\n\n◼ DESCRIPTION: Identity realtime request, with \"DELETE\" mode, when trustedIndividualId is provided in input\n\n◼ PRECONDITION:  \nProfile match for given trustedIndividualId should exists.\n\n◼ EXPECTED RESULT:  \n1\\. Profile with \"individualId\" having same value as input trustedIndividualId is hard deleted.  \n2\\. All fields except identityOutput.returnCode comes populated empty in the response.\n\n◼ INPUT FIELDS:  \n\"mode\":\"DELETE\""
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8849) - Realtime request, with \"DELETE\" mode, when trustedBusinessId is provided in input",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with delete mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['businessId', 'companyName','businessEmail'],\r",
															"            existingRecords : { \"businessMail-match-record\" : pm.variables.get('matchRecord') } \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6)- Validate output data: identityOutput.returnCode comes non-empty in response\", ()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let companyName = pm.variables.get(\"existingCompanyName\");\r",
															"        let businessEmail = pm.variables.get(\"existingBusinessEmail\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST\");\r",
															"        pm.variables.set(\"companyName\", companyName);\r",
															"        pm.variables.set(\"businessEmail\", businessEmail);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity match with deleted profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName','businessEmail','trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId'] });\r",
															"    pm.test(\"(5)- Validate output: businessId comes populated empty in the response, .\",()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(\"\");\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8849\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"DELETE_MODE_REQUEST\";\r",
															"    }\r",
															"})()\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"DELETE_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"DELETE\");\r",
															"    pm.variables.set(\"existingCompanyName\", utils.getCompanyName());\r",
															"    pm.variables.set(\"existingBusinessEmail\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"businessEmail\", \"\");\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {\r",
															"        'companyName': pm.variables.get('existingCompanyName'),\r",
															"        'businessEmail' : pm.variables.get('existingBusinessEmail')\r",
															"    };\r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord\", utils.getOutputData(response.json()));\r",
															"            pm.variables.set(\"trustedBusinessId\", pm.variables.get(\"matchRecord\").businessId);\r",
															"        });\r",
															"    })();\r",
															"    pm.variables.set(\"companyName\",\"\");\r",
															"    pm.variables.set(\"businessEmail\",\"\");\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"trustedBusinessId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    pm.variables.set(\"companyName\", pm.variables.get('companyName'));\r",
															"    pm.variables.set(\"businessEmail\", pm.variables.get('businessEmail'));\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessId\": \"{{trustedBusinessId}}\",\r\n        \"trustedIndividualId\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8849](https://jira.cnvrmedia.net/browse/PID-8849)\n\n◼ NAME: Realtime request, with \"DELETE\" mode, when trustedBusinessId is provided in input\n\n◼ DESCRIPTION: Realtime request, with \"DELETE\" mode, when trustedBusinessId is provided in input\n\n◼ PRECONDITION:\n\n1.  The clientCode is enabled for B2B.\n2.  Profile match for given trustedBusinessId exists.\n    \n\n◼ EXPECTED RESULT:\n\n1.  Profile with \"businessId\" having same value as input trustedBusinessId is hard deleted.\n2.  All fields except identityOutput.returnCode comes populated empty in the response.\n    \n\n◼ INPUT FIELDS:  \n\"mode\":\"DELETE\""
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8850)-Realtime request, with \"DELETE\" mode, when trustedIndividualId and trustedBusinessId are provided in input",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    let matchRecord = pm.variables.get(\"matchRecord\");\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with delete mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId','trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','businessId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId','businessId', 'companyName', 'emailAddress1'],\r",
															"            existingRecords : { \"match-record\" :matchRecord } \r",
															"        });\r",
															"    pm.test(\"(5) Check output data: identityOutput.returnCode comes non-empty in response\", ()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"        pm.expect(outputData.businessId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let companyName = pm.variables.get(\"existingCompanyName\");\r",
															"        let emailAddress1 = pm.variables.get(\"existingEmailAddress1\");\r",
															"        let businessEmail = pm.variables.get(\"existingBusinessEmail\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST\");\r",
															"        pm.variables.set(\"companyName\", companyName);\r",
															"        pm.variables.set(\"emailAddress1\", emailAddress1);\r",
															"        pm.variables.set(\"businessEmail\", businessEmail);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity match with deleted profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName','emailAddress1','businessEmail'] });\r",
															"    pm.test(\"(4)- businessId and individualId comes populated empty in the response\",()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"        pm.expect(outputData.businessId).to.equal(\"\");\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8850\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"DELETE_MODE_REQUEST\";\r",
															"    }\r",
															"})()\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"DELETE_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"DELETE\");\r",
															"    pm.variables.set(\"existingCompanyName\", utils.getCompanyName());\r",
															"    pm.variables.set(\"existingEmailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"existingBusinessEmail\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"companyName\", \"\");\r",
															"    pm.variables.set(\"emailAddress1\", \"\");\r",
															"    pm.variables.set(\"businessEmail\", \"\");\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {\r",
															"        'companyName' : pm.variables.get('existingCompanyName'),\r",
															"        'businessEmail' : pm.variables.get('existingBusinessEmail'),\r",
															"        'emailAddress1' : pm.variables.get('existingEmailAddress1')\r",
															"    };\r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord\", utils.getOutputData(response.json()));\r",
															"            pm.variables.set(\"trustedIndividualId\", pm.variables.get('matchRecord').individualId);\r",
															"            pm.variables.set(\"trustedBusinessId\", pm.variables.get('matchRecord').businessId);\r",
															"        });\r",
															"    })();\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"trustedBusinessId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    pm.variables.set(\"companyName\", pm.variables.get('companyName'));\r",
															"    pm.variables.set(\"emailaddress1\", pm.variables.get('emailAddress1'));\r",
															"    pm.variables.set(\"businessEmail\", pm.variables.get('businessEmail'));\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"emailAddress1\":\"{{emailAddress1}}\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessId\": \"{{trustedBusinessId}}\",\r\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8850](https://jira.cnvrmedia.net/browse/PID-8850)\n\n◼ NAME: Realtime request, with \"DELETE\" mode, when trustedIndividualId and trustedBusinessId are provided in input\n\n◼ DESCRIPTION: Realtime request, with \"DELETE\" mode, when trustedIndividualId and trustedBusinessId are provided in input\n\n◼ PRECONDITION:\n\n1.  The clientCode is enabled for B2B.\n2.  Profile match for given trustedBusinessId exists.\n3.  Profile match for given trustedIndividualId exists.\n    \n\n◼ EXPECTED RESULT:\n\n1.  Profile with \"individualId\" having same value as input trustedIndividualId is hard deleted.\n2.  Profile with \"businessId\" having same value as input trustedBusinessId is hard deleted.\n3.  All fields except identityOutput.returnCode comes populated empty in the response.\n    \n\n◼ INPUT FIELDS:  \n\"mode\":\"DELETE\""
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8851) - Realtime request, with \"DELETE\" mode, with invalid \"trustedIndividualId\" and \"trustedBusinessId\" are given in input",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedBusinessId','trustedBusinessId'] });\r",
															"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','businessId','identityOutputReturnCode'] });\r",
															"\r",
															"pm.test(\"(5)- Validate output data: identityOutput.returnCode comes non-empty in response\", ()=>{\r",
															"    pm.expect(outputData.individualId).to.equal(\"\");\r",
															"    pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8851\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode\"\r",
															"                })\r",
															"    });\r",
															"})();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"businessEmail\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessId\": \"32156\",\r\n        \"trustedIndividualId\": \"45466\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"DELETE\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -**[https://jira.cnvrmedia.net/browse/PID-8851](https://jira.cnvrmedia.net/browse/PID-8851)\n\n◼ NAME: Realtime request, with \"DELETE\" mode, with invalid \"trustedIndividualId\" and \"trustedBusinessId\" are given in input.\n\n◼ DESCRIPTION: Realtime request, with \"DELETE\" mode, when:\n\n*   invalid trustedBusinessId is provided in input.\n*   invalid trustedIndividualId is provided in input.  \n    ◼ PRECONDITION:\n*   The clientCode is enabled for B2B.\n*   Profile match for given trustedBusinessId does not exists.\n*   Profile match for given trustedIndividualId does not exists.\n    \n\n◼ EXPECTED RESULT:\n\n1.  No profile is deleted.\n2.  All fields except identityOutput.returnCode comes populated empty in the response.\n    \n\n◼ INPUT FIELDS:  \n\"mode\":\"DELETE\""
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8852) - Realtime request with \"DELETE\" mode, when match of input \"trustedIndividualId\" contains common \"householdId\" as other existing profiles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"     utils.doTestLogging({msg: \"CASE-1 : Realtime request with delete mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\" , type: \"CHECK_EXISTINGDATA\", \r",
															"    fields : ['individualId', 'householdId', 'givenName', 'familyName','addressLine1', 'postalCode'],\r",
															"            existingRecords : { \"match-record-1\" : matchRecord1, \"match-record-2\" : matchRecord2}});\r",
															"    pm.test(\"(6) Validate existing data: Existing profiles with same householdId and different individualId exists. \",()=>{\r",
															"        utils.validateIfNonEmpty(matchRecord1.individualId);\r",
															"        utils.validateIfNonEmpty(matchRecord2.individualId);\r",
															"        utils.validateIfNonEmpty(matchRecord1.householdId);\r",
															"        utils.validateIfNonEmpty(matchRecord2.householdId);\r",
															"        pm.expect(matchRecord1.individualId).to.not.equal(matchRecord2.individualId);\r",
															"        pm.expect(matchRecord1.householdId).to.equal(matchRecord2.householdId);\r",
															"    })\r",
															"    pm.test(\"(7) All fields except for the identity return code comes populated empty:\", ()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let requestDetail2 = pm.variables.get(\"requestDetail2\");\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST\");\r",
															"        pm.variables.set(\"requestDetail2\", requestDetail2); \r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2); \r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity match\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['givenName','familyName','addressLine1','postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'householdId','identityOutputReturnCode'] });\r",
															"    pm.test(\"(5) Existing householdId and individualId comes populated in response\", ()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(matchRecord2.individualId);\r",
															"        pm.expect(outputData.householdId).to.equal(matchRecord2.householdId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8852\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode#householdId\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"DELETE_MODE_REQUEST\";\r",
															"    }\r",
															"})()\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    pm.variables.clear();\r",
															"    pm.variables.set(\"requestType\",\"DELETE_MODE_REQUEST\")\r",
															"    pm.variables.set(\"mode\", \"DELETE\");\r",
															"    let requestDetail1 = {};\r",
															"    requestDetail1.givenName = utils.getRandomString();\r",
															"    requestDetail1.familyName = utils.getRandomString();\r",
															"    requestDetail1.addressLine1 = utils.getRandomDataForField('addressLine1');\r",
															"    requestDetail1.postalCode = utils.getRandomDataForField('postalCode');\r",
															"\r",
															"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request1.testerInput = {\r",
															"        'givenName' : requestDetail1.givenName,\r",
															"        'familyName' : requestDetail1.familyName,\r",
															"        'addressLine1' : requestDetail1.addressLine1,\r",
															"        'postalCode' : requestDetail1.postalCode\r",
															"    }; \r",
															"\r",
															"    let requestDetail2 = {};\r",
															"    \r",
															"    requestDetail2.givenName = utils.getRandomString();\r",
															"    requestDetail2.addressLine1 = requestDetail1.addressLine1;\r",
															"    requestDetail2.postalCode = requestDetail1.postalCode;\r",
															"\r",
															"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
															"\r",
															"\r",
															"    (function createProfile1(){ // profile to be deleted\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) =>{\r",
															"            let matchRecord1 = utils.getOutputData(response.json());\r",
															"            pm.variables.set('matchRecord1', matchRecord1);\r",
															"            pm.variables.set(\"trustedIndividualId\", pm.variables.get('matchRecord1').individualId);\r",
															"            (function createProfile2(){ \r",
															"                requestDetail2.familyName = matchRecord1.familyName;\r",
															"                pm.variables.set(\"requestDetail2\", requestDetail2);\r",
															"                request2.testerInput = {\r",
															"                    'givenName' : requestDetail2.givenName,\r",
															"                    'familyName' : requestDetail2.familyName,\r",
															"                    'addressLine1' : requestDetail2.addressLine1,\r",
															"                    'postalCode' : requestDetail2.postalCode\r",
															"                }; \r",
															"                pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) =>{\r",
															"                    pm.variables.set(\"matchRecord2\", utils.getOutputData(response.json()));\r",
															"                });\r",
															"            })();\r",
															"        });\r",
															"    })();\r",
															"\r",
															"    pm.variables.set(\"givenName\",\"\");\r",
															"    pm.variables.set(\"familyName\",\"\");\r",
															"    pm.variables.set(\"addressLine1\",\"\");\r",
															"    pm.variables.set(\"postalCode\",\"\");\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    const requestDetail2 = pm.variables.get('requestDetail2');\r",
															"    pm.variables.set(\"givenName\", requestDetail2.givenName);\r",
															"    pm.variables.set(\"familyName\", requestDetail2.familyName);\r",
															"    pm.variables.set(\"addressLine1\", requestDetail2.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", requestDetail2.postalCode);\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_IDENTITY_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"givenName\": \"{{givenName}}\",\r\n        \"familyName\": \"{{familyName}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessId\": \"\",\r\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8852](https://jira.cnvrmedia.net/browse/PID-8852)\n\n◼ NAME: Realtime request with \"DELETE\" mode, when match of input \"trustedIndividualId\" contains common \"householdId\" as other existing profiles.  \n  \n◼ DESCRIPTION: Realtime request with \"DELETE\" mode, when match of input \"trustedIndividualId\" contains common \"householdId\" as other existing profiles.  \n  \n◼ PRECONDTION:  \n1\\. Profile match for given \"trustedIndividiualId\" exists.  \n2\\. Profile match with different \"individualId\" but common \"householdId\" should exist.  \n  \n◼ EXPECTED RESULT:  \n1\\. Record with individualId match of input trustedIndividualId is hard deleted.  \n2\\. Records with different individualId but common householdId remains unchanged.  \n  \n◼ INPUT FIELDS:  \n\"mode\":\"DELETE\""
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8853)- Realtime request with \"DELETE\" mode, when input match of \"trustedBusinessId\" contains common siteId as other existing records.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"     utils.doTestLogging({msg: \"CASE-1 : Realtime request with delete mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\" , type: \"CHECK_EXISTINGDATA\", \r",
															"    fields : ['businessId', 'siteId', 'companyName', 'addressLine1', 'postalCode'],\r",
															"            existingRecords : { \"match-record-1\" : matchRecord1, \"match-record-2\" : matchRecord2}});\r",
															"    pm.test(\"(6) Validate existing data: Existing profiles with same siteId and different businessId exists. \",()=>{\r",
															"        utils.validateIfNonEmpty(matchRecord1.businessId);\r",
															"        utils.validateIfNonEmpty(matchRecord2.businessId);\r",
															"        utils.validateIfNonEmpty(matchRecord1.siteId);\r",
															"        utils.validateIfNonEmpty(matchRecord2.siteId);\r",
															"        pm.expect(matchRecord1.businessId).to.not.equal(matchRecord2.businessId);\r",
															"        pm.expect(matchRecord1.siteId).to.equal(matchRecord2.siteId);\r",
															"    })\r",
															"    pm.test(\"(7) All fields except for the identity return code comes populated empty:\", ()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let requestDetail2 = pm.variables.get(\"requestDetail2\");\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST\");\r",
															"        pm.variables.set(\"requestDetail2\", requestDetail2); \r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2); \r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity match\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName','addressLine1','postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : [ 'businessId','siteId','identityOutputReturnCode'] });\r",
															"    pm.test(\"(5) Existing siteId and businessId comes populated in response\", ()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(matchRecord2.businessId);\r",
															"        pm.expect(outputData.siteId).to.equal(matchRecord2.siteId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8853\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode#siteId\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"DELETE_MODE_REQUEST\";\r",
															"    }\r",
															"})()\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    pm.variables.clear();\r",
															"    pm.variables.set(\"requestType\",\"DELETE_MODE_REQUEST\")\r",
															"    pm.variables.set(\"mode\", \"DELETE\");\r",
															"    let requestDetail1 = {};\r",
															"    let requestDetail2 = {};\r",
															"    let companyNameList = pm.environment.get(\"companyNamesList\");\r",
															"    requestDetail1.companyName = companyNameList[\r",
															"        _.random(0,Math.floor(companyNameList.length / 2) -1)];\r",
															"    requestDetail2.companyName = companyNameList[\r",
															"        _.random(Math.floor(companyNameList.length / 2), companyNameList.length -1)];\r",
															"    requestDetail1.addressLine1 = utils.getRandomDataForField('addressLine1');\r",
															"    requestDetail1.postalCode = utils.getRandomDataForField('postalCode');\r",
															"\r",
															"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request1.testerInput = {\r",
															"        'companyName' : requestDetail1.companyName,\r",
															"        'addressLine1' : requestDetail1.addressLine1,\r",
															"        'postalCode' : requestDetail1.postalCode,\r",
															"        'countryCode' :'USA'\r",
															"    }; \r",
															"\r",
															"    requestDetail2.addressLine1 = requestDetail1.addressLine1;\r",
															"    requestDetail2.postalCode = requestDetail1.postalCode;\r",
															"\r",
															"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request2.testerInput = {\r",
															"        'companyName' : requestDetail2.companyName,\r",
															"        'addressLine1' : requestDetail2.addressLine1,\r",
															"        'postalCode' : requestDetail2.postalCode,\r",
															"        'countryCode' :'USA'\r",
															"    }; \r",
															"\r",
															"    (function createProfile1(){ // profile to be deleted\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) =>{\r",
															"            pm.variables.set('matchRecord1', utils.getOutputData(response.json()));\r",
															"            pm.variables.set(\"trustedBusinessId\", pm.variables.get('matchRecord1').businessId);\r",
															"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) =>{\r",
															"                pm.variables.set(\"matchRecord2\", utils.getOutputData(response.json()));\r",
															"            });\r",
															"        });\r",
															"    })();\r",
															"    \r",
															"\r",
															"    pm.variables.set(\"companyName\",\"\");\r",
															"    pm.variables.set(\"addressLine1\",\"\");\r",
															"    pm.variables.set(\"postalCode\",\"\");\r",
															"    pm.variables.set(\"requestDetail2\", requestDetail2);\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    const requestDetail2 = pm.variables.get('requestDetail2');\r",
															"    pm.variables.set(\"companyName\", requestDetail2.companyName);\r",
															"    pm.variables.set(\"addressLine1\", requestDetail2.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", requestDetail2.postalCode);\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessId\": \"{{trustedBusinessId}}\",\r\n        \"trustedIndividualId\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8853](https://jira.cnvrmedia.net/browse/PID-8853)\n\n◼ NAME: Realtime request with \"DELETE\" mode, when input match of \"trustedBusinessId\" contains common siteId as other existing records.\n\n◼ DESCRIPTION: Realtime request when :\n\n*   \"configIdentity\" mode is \"DELETE\"\n*   Input match of \"trustedBusinessId\" contains common siteId as other existing records.\n    \n\n◼ PRECONDITION:\n\n1.  Profile match for given \"trustedBusinessId\" exists.\n2.  Profile match with different \"businessId\" but common \"siteId\" exists.\n    \n\n◼ EXPECTED RESULT:\n\n1.  Record with businessId match of input trustedBusinessId is hard deleted.\n2.  Records with different householdId but common siteId remains unchanged.\n    \n\n◼ INPUT FIELDS:  \n\"mode\":\"DELETE\""
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8854)- Realtime request with \"IDENTITY\" mode, when input contains contains attributes(address/email/phone) from both deleted profile and existing profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with delete mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId', 'emailAddress1'],\r",
															"            existingRecords : { \"email-match-record-1\" : pm.variables.get('matchRecord1') } \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6)- Validate output data: identityOutput.returnCode comes non-empty in response\", ()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let emailAddress1 = pm.variables.get(\"identityEmailAddress1\");\r",
															"        let matchRecord1 = pm.variables.get('matchRecord1');\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"IDENTITY_MODE_REQUEST\");\r",
															"        pm.variables.set(\"emailAddress1\", emailAddress1);\r",
															"        pm.variables.set(\"matchRecord1\", matchRecord1);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"IDENTITY_MODE_REQUEST\") {\r",
															"    let matchRecord2 = pm.variables.get('matchRecord2');\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity match with deleted profile and existing profile details : \", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1','postalCode','emailAddress1'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'consolidatedIds','emailAddress1'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId', 'fullName','addressLine1','postalCode','emailAddress1'],\r",
															"            existingRecords : { \"address-match\" : matchRecord2 , \"deleted-email\": pm.variables.get(\"matchRecord1\")} \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6.a)- Validate output: Existing individualId comes populated in the response, no consolidations happens.\",()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(matchRecord2.individualId);\r",
															"        pm.expect(outputData.consolidatedIds.length).to.equal(0);\r",
															"    });\r",
															"    // do privacy by id here and verify the enrichment \r",
															"    let getRequest = {\r",
															"        url: pm.environment.get('server') + \"/v2/connect/realtime/privacy/byId?individualId=\"+outputData.individualId,\r",
															"        method: 'GET',\r",
															"        header: {\r",
															"            \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"            \"x-api-key\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"            \"accessToken\": pm.environment.get(\"accessToken\")\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(getRequest, (error, response)=>{\r",
															"        let privacyOutput = response.json();\r",
															"        pm.test(\"(6.b) Validate output -> The extra attribute get enriched to profile.\", () =>{\r",
															"            pm.expect(_.size(privacyOutput.storedAttributes) == 2).to.be.true;\r",
															"        });\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8854\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"DELETE_MODE_REQUEST\";\r",
															"    }\r",
															"})()\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"DELETE_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"DELETE\");\r",
															"    pm.variables.set(\"identityEmailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"emailAddress1\", \"\");\r",
															"    pm.variables.set(\"fullName\", \"\");\r",
															"    pm.variables.set(\"addressLine1\", \"\");\r",
															"    pm.variables.set(\"postalCode\", \"\");\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {'emailAddress1' : pm.variables.get('identityEmailAddress1')}; \r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord1\", utils.getOutputData(response.json()));\r",
															"            pm.variables.set(\"trustedIndividualId\", pm.variables.get(\"matchRecord1\").individualId);\r",
															"        });\r",
															"    })();\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"IDENTITY_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"IDENTITY\");\r",
															"    pm.variables.set(\"emailAddress1\", pm.variables.get('emailAddress1'));\r",
															"    pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
															"    pm.variables.set(\"addressLine1\", utils.getRandomDataForField('addressLine1'));\r",
															"    pm.variables.set(\"postalCode\", utils.getRandomDataForField('postalCode'));\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {\r",
															"        'fullName' : pm.variables.get('fullName'),\r",
															"        'addressLine1' : pm.variables.get('addressLine1'),\r",
															"        'postalCode' : pm.variables.get('postalCode')\r",
															"    }; \r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord2\", utils.getOutputData(response.json()));\r",
															"            pm.variables.set(\"trustedIndividualId\", pm.variables.get(\"matchRecord2\").individualId);\r",
															"        });\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_IDENTITY_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessId\": \"\",\r\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -**[https://jira.cnvrmedia.net/browse/PID-8854](https://jira.cnvrmedia.net/browse/PID-8854)\n\n◼ NAME: Realtime request with \"IDENTITY\" mode, when input contains contains attributes(address/email/phone) from both deleted profile and existing profile\n\n◼ DESCRIPTION: Realtime request when :\n\n*   \"configIdentity\" mode is \"IDENTITY\"\n*   input contains contains attributes(address/email/phone) from both deleted profile and existing profile\n    \n\n◼ EXPECTED RESULT:\n\n1.  Existing individualId comes populated in the response.\n2.  Existing profile given in input is enriched with given deleted profile attrubutes (only if attributes type are different).\n3.  No consolidation takes place.\n    \n\nNote: Enrichment will happen only if the existing and deleted profile attributes are of different types.\n\n◼ INPUT FIELDS:  \n\"mode\":\"IDENTITY\""
											},
											"response": []
										},
										{
											"name": "Realtime > delete-mode > (PID-8855)- Realtime request with \"IDENTITY\" mode, when input contains attributes from deleted profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with delete mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId', 'emailAddress1'],\r",
															"            existingRecords : { \"email-match-record-1\" : pm.variables.get('matchRecord') } \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6)- Validate output data: identityOutput.returnCode comes non-empty in response\", ()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.not.equal(\"\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let emailAddress1 = pm.variables.get(\"identityEmailAddress1\");\r",
															"        let matchRecord = pm.variables.get(\"matchRecord\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"matchRecord\", matchRecord)\r",
															"        pm.variables.set(\"requestType\", \"IDENTITY_MODE_REQUEST\");\r",
															"        pm.variables.set(\"emailAddress1\", emailAddress1);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"IDENTITY_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity match with deleted profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['emailAddress1'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId'] });\r",
															"    pm.test(\"(5)- Validate output: new individualId comes populated in the response, .\",()=>{\r",
															"        pm.expect(outputData.individualId).to.not.equal(pm.variables.get('matchRecord').individualId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8855\",\r",
															"                    sprint: \"21.04.04\",\r",
															"                    subject: \"realtime > delete-mode\",\r",
															"                    tags: \"#realtime#deleteMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"DELETE_MODE_REQUEST\";\r",
															"    }\r",
															"})()\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"DELETE_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"DELETE_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"DELETE\");\r",
															"    pm.variables.set(\"identityEmailAddress1\", utils.getRandomDataForField('emailAddress1'));\r",
															"    pm.variables.set(\"emailAddress1\", \"\");\r",
															"\r",
															"    request = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request.testerInput = {'emailAddress1' : pm.variables.get('identityEmailAddress1')}; \r",
															"    (function createProfile(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"            pm.variables.set(\"matchRecord\", utils.getOutputData(response.json()));\r",
															"            pm.variables.set(\"trustedIndividualId\", pm.variables.get(\"matchRecord\").individualId);\r",
															"        });\r",
															"    })();\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"IDENTITY_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"IDENTITY\");\r",
															"    pm.variables.set(\"emailAddress1\", pm.variables.get('emailAddress1'));\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_IDENTITY_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessId\": \"\",\r\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -**[https://jira.cnvrmedia.net/browse/PID-8855](https://jira.cnvrmedia.net/browse/PID-8855)\n\n◼ NAME: Realtime request with \"IDENTITY\" mode, when input contains attributes from deleted profile.\n\n◼ DESCRIPTION: Realtime request when :\n\n*   \"configIdentity\" mode is \"IDENTITY\"\n*   input contains attributes from deleted profile.\n    \n\n◼ EXPECTED RESULT:  \nNew individualId comes populated in the response.\n\n◼ INPUT FIELDS:  \n\"mode\":\"IDENTITY\""
											},
											"response": []
										},
										{
											"name": "terminate-delete-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set(\"folder\", \"delete-mode\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "xref-mode",
									"item": [
										{
											"name": "init-xref-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const utils = eval(globals.connectUtils);\r",
															"utils.enableOrDisableFeatures();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > xref > (PID-8924) - Realtime request with input mode as \"XREF\" and valid trustedIndividualId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-169\",\r",
															"                    sprint: \"22.01.01\",\r",
															"                    subject: \"realtime > xref\",\r",
															"                    tags: \"#realtime#xrefmode#trustedIndivdiualId\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"XREF_MODE_REQUEST\";\r",
															"    }\r",
															"})();\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"XREF_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"XREF_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"XREF\");\r",
															"    pm.variables.set(\"fullName\",\"\");\r",
															"    pm.variables.set(\"addressLine1\",\"\");\r",
															"    pm.variables.set(\"postalCode\",\"\");\r",
															"    \r",
															"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request1.testerInput = {\r",
															"        'fullName' : utils.getFullName(),\r",
															"        'addressLine1' : utils.getRandomDataForField('addressLine1'),\r",
															"        'postalCode' : utils.getRandomDataForField('postalCode')\r",
															"    }; \r",
															"    request2.testerInput = {\r",
															"        'fullName' : utils.getFullName(),\r",
															"        'addressLine1' : utils.getRandomDataForField('addressLine1'),\r",
															"        'postalCode' : utils.getRandomDataForField('postalCode')\r",
															"    };\r",
															"    (function createProfiles(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) =>{\r",
															"            let matchRecord1 = utils.getOutputData(response.json());\r",
															"\r",
															"            pm.variables.set(\"matchRecord1\", matchRecord1);\r",
															"            trustedIndividualId = matchRecord1.individualId + \">\";\r",
															"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) =>{\r",
															"                let matchRecord2 = utils.getOutputData(response.json());\r",
															"                pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"                trustedIndividualId += matchRecord2.individualId;\r",
															"                pm.variables.set(\"trustedIndividualId\", trustedIndividualId);\r",
															"            });\r",
															"        });\r",
															"    })();\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_1\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    let matchRecord = pm.variables.get('matchRecord1');\r",
															"    pm.variables.set(\"addressLine1\", matchRecord.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", matchRecord.postalCode);\r",
															"    pm.variables.set(\"fullName\", matchRecord.fullName);\r",
															"}\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_2\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    let matchRecord = pm.variables.get('matchRecord2');\r",
															"    pm.variables.set(\"addressLine1\", matchRecord.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", matchRecord.postalCode);\r",
															"    pm.variables.set(\"fullName\", matchRecord.fullName);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"XREF_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with XREF mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId', 'companyName', 'addressLine1', 'postalCode'],\r",
															"            existingRecords : {\r",
															"                \"match-record-1\" : pm.variables.get('matchRecord1'),\r",
															"                \"match-record-2\" : pm.variables.get('matchRecord2')\r",
															"            } \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6)- Validate output data: identityOutput returnCode comes populated as 2999\", ()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.equal(\"2999\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST_1\");\r",
															"        pm.variables.set(\"matchRecord1\", matchRecord1);\r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_1\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity MATCH mode with deleted profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1', 'postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: 2nd individualId comes populated in the response.\",()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(matchRecord2.individualId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST_2\");\r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"if(requestType == \"MATCH_MODE_REQUEST_2\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-3 : Identity MATCH with enriched profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'addressLine1', 'postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: Existing individualId comes populated in the response.\",()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(matchRecord2.individualId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}"
													},
													{
														"key": "clientCode",
														"value": "{{CCODE_IDENTITY_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"inputRecord\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"\",\n        \"countryCode\": \"USA\",\n        \"companyName\":\"\",\n        \"businessPhone\":\"\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"locality1\":\"\",\n        \"emailAddress1\": \"\",\n        \"prefix\":\"\",\n        \"givenName\":\"\",\n        \"middleName\":\"\",\n        \"familyName\": \"\",\n        \"fullName\": \"{{fullName}}\",\n        \"gender\": \"\",\n        \"phone1\": \"\",\n        \"fKey2\":\"\",\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\n        \"userCorrelationId\": \"111\"\n    },\n    \"serviceConfig\": {\n        \"configAddressHygiene\": {\n            \"enablePac\": \"no\",\n            \"enablePcoa\": \"no\"\n        },\n    \"configIdentity\":{\n        \"mode\":\"{{mode}}\"\n    },\n        \"enableAddressHygiene\": \"yes\",\n        \"enableEmailHygiene\": \"yes\",\n        \"enableGlobalSuppression\": \"no\",\n        \"enableIdentity\": \"yes\",\n        \"enableNameHygiene\": \"yes\",\n        \"enableOccupancyScore\": \"no\",\n        \"enablePhoneHygiene\": \"yes\",\n        \"enableTspAppend\": \"no\" \n    }\n}"
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8924](https://jira.cnvrmedia.net/browse/PID-8924)\n\n◼ NAME: Realtime request with input mode as \"XREF\" and valid trustedIndiviudalId\n\n◼ DESCRIPTION: Realtime request when:\n\n*   \"configIdentity\"\"mode\" is given as \"XREF\" and\n*   valid \"trustedIndiviudalId\" is given in input.\n    \n\n◼ PRECONDITION:\n\n*   Both individualId provided in \"trustedIndiviudalId\" are valid.\n    \n\n◼ EXPECTED RESULT:\n\n1.  1st individualId from trustedIndividualId is deleted.\n2.  Profile with 2nd individualId gets enriched with the details from profile with attributes of 1st individualId.\n3.  retrunCode field comes populated as \"2999\" in the response.\n    \n\n◼ INPUT FIELDS:  \n\"mode\":\"XREF\",  \n\"trustedIndiviudalId\":\"individualId1>individualId2\"\n\n◼ OUTPUT FIELDS:  \n\"returnCode\":\"2999\""
											},
											"response": []
										},
										{
											"name": "Realtime > xref > (PID-8925) - Realtime request with input mode as \"XREF\" and valid trustedBusinessId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"8925\",\r",
															"                    sprint: \"22.01.01\",\r",
															"                    subject: \"realtime > xref\",\r",
															"                    tags: \"#realtime#xrefmode#trustedBusinessId\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"XREF_MODE_REQUEST\";\r",
															"    }\r",
															"})();\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"XREF_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"XREF_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"XREF\");\r",
															"    pm.variables.set(\"companyName\",\"\");\r",
															"    pm.variables.set(\"addressLine1\",\"\");\r",
															"    pm.variables.set(\"postalCode\",\"\");\r",
															"    \r",
															"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request1.testerInput = {\r",
															"        'companyName' : utils.getCompanyName(),\r",
															"        'addressLine1' : utils.getRandomDataForField('addressLine1'),\r",
															"        'postalCode' : utils.getRandomDataForField('postalCode')\r",
															"    }; \r",
															"    request2.testerInput = {\r",
															"        'companyName' : utils.getCompanyName(),\r",
															"        'addressLine1' : utils.getRandomDataForField('addressLine1'),\r",
															"        'postalCode' : utils.getRandomDataForField('postalCode')\r",
															"    };\r",
															"    (function createProfiles(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) =>{\r",
															"            let matchRecord1 = utils.getOutputData(response.json());\r",
															"\r",
															"            pm.variables.set(\"matchRecord1\", matchRecord1);\r",
															"            trustedBusinessId = matchRecord1.businessId + \">\";\r",
															"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) =>{\r",
															"                let matchRecord2 = utils.getOutputData(response.json());\r",
															"                pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"                trustedBusinessId += matchRecord2.businessId;\r",
															"                pm.variables.set(\"trustedBusinessId\", trustedBusinessId);\r",
															"            });\r",
															"        });\r",
															"    })();\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_1\") {\r",
															"    pm.variables.set(\"trustedBusinessId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    let matchRecord = pm.variables.get('matchRecord1');\r",
															"    pm.variables.set(\"addressLine1\", matchRecord.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", matchRecord.postalCode);\r",
															"    pm.variables.set(\"companyName\", matchRecord.companyName);\r",
															"}\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_2\") {\r",
															"    pm.variables.set(\"trustedBusinessId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    let matchRecord = pm.variables.get('matchRecord2');\r",
															"    pm.variables.set(\"addressLine1\", matchRecord.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", matchRecord.postalCode);\r",
															"    pm.variables.set(\"companyName\", matchRecord.companyName);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"XREF_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with XREF mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['businessId', 'companyName', 'addressLine1', 'postalCode'],\r",
															"            existingRecords : {\r",
															"                \"match-record-1\" : pm.variables.get('matchRecord1'),\r",
															"                \"match-record-2\" : pm.variables.get('matchRecord2')\r",
															"            } \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6)- Validate output data: identityOutput.returnCode comes populated as 9929\", ()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.equal(\"9929\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST_1\");\r",
															"        pm.variables.set(\"matchRecord1\", matchRecord1);\r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_1\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity MATCH mode with deleted profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'addressLine1', 'postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: 2nd businessId comes populated in the response.\",()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(matchRecord2.businessId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST_2\");\r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"if(requestType == \"MATCH_MODE_REQUEST_2\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-3: Identity MATCH with enriched profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['companyName', 'addressLine1', 'postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: Existing 2nd businessId comes populated in the response.\",()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(matchRecord2.businessId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessPhone\": \"\",\r\n        \"fullName\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessId\": \"{{trustedBusinessId}}\",\r\n        \"trustedIndividualId\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8925](https://jira.cnvrmedia.net/browse/PID-8925)\n\n◼ NAME: Realtime request with input mode as \"XREF\" and valid trustedBusinessId  \n  \n◼ DESCRIPTION: Realtime request when:  \n\\- \"configIdentity\"\"mode\" is given as \"XREF\" and  \n\\- valid \"trustedBusinessId\" is given in input.  \n  \n◼ PRECONDITION:  \n\\- clientCode is B2B_ENABLED.  \n\\- Both businessId provided in \"trustedBuisnessId\" are valid.  \n  \n◼ EXPECTED RESULT:  \n  \n1\\. 1st businessId from trustedBusinessId is deleted.  \n2\\. Profile with 2nd businessId gets enriched with the details from profile with attributes of 1st businessId.  \n3\\. retrunCode field comes populated as \"9929\" in the response.  \n  \n◼ INPUT FIELDS:  \n\"mode\":\"XREF\",  \n\"trustedBusinessId\":\"businessId1>businessId2\"  \n  \n◼ OUTPUT FIELDS:  \n\"returnCode\":\"9929\""
											},
											"response": []
										},
										{
											"name": "Realtime > xref > (PID-8926) - Realtime identity request, when input mode is \"XREF\" and valid trustedIndividualId , trustedBusinessId are given",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"8926\",\r",
															"                    sprint: \"22.01.01\",\r",
															"                    subject: \"realtime > xref\",\r",
															"                    tags: \"#realtime#xrefmode#trustedIndividualId#trustedBusinessId\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"XREF_MODE_REQUEST\";\r",
															"    }\r",
															"})();\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"XREF_MODE_REQUEST\") {\r",
															"    pm.variables.set(\"requestType\",\"XREF_MODE_REQUEST\");\r",
															"    pm.variables.set(\"mode\", \"XREF\");\r",
															"    pm.variables.set(\"fullName\",\"\");\r",
															"    pm.variables.set(\"companyName\",\"\");\r",
															"    pm.variables.set(\"addressLine1\",\"\");\r",
															"    pm.variables.set(\"postalCode\",\"\");\r",
															"    \r",
															"    request1 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request2 = JSON.parse(JSON.stringify(requestDetail));\r",
															"    request1.testerInput = {\r",
															"        'companyName' : utils.getCompanyName(),\r",
															"        'fullName' : utils.getRandomDataForField('fullName'),\r",
															"        'addressLine1' : utils.getRandomDataForField('addressLine1'),\r",
															"        'postalCode' : utils.getRandomDataForField('postalCode')\r",
															"    }; \r",
															"    request2.testerInput = {\r",
															"        'companyName' : utils.getCompanyName(),\r",
															"        'fullName' : utils.getRandomDataForField('fullName'),\r",
															"        'addressLine1' : utils.getRandomDataForField('addressLine1'),\r",
															"        'postalCode' : utils.getRandomDataForField('postalCode')\r",
															"    };\r",
															"    (function createProfiles(){\r",
															"        pm.sendRequest(utils.constructIdentityRequest(request1), (error, response) =>{\r",
															"            let matchRecord1 = utils.getOutputData(response.json());\r",
															"\r",
															"            pm.variables.set(\"matchRecord1\", matchRecord1);\r",
															"            trustedIndividualId = matchRecord1.individualId + \">\";\r",
															"            trustedBusinessId = matchRecord1.businessId + \">\";\r",
															"            pm.sendRequest(utils.constructIdentityRequest(request2), (error, response) =>{\r",
															"                let matchRecord2 = utils.getOutputData(response.json());\r",
															"                pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"                trustedIndividualId += matchRecord2.individualId;\r",
															"                trustedBusinessId += matchRecord2.businessId;\r",
															"                pm.variables.set(\"trustedIndividualId\", trustedIndividualId);\r",
															"                pm.variables.set(\"trustedBusinessId\", trustedBusinessId);\r",
															"            });\r",
															"        });\r",
															"    })();\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_1\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"trustedBusinessId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    let matchRecord = pm.variables.get('matchRecord1');\r",
															"    pm.variables.set(\"fullName\", matchRecord.fullName);\r",
															"    pm.variables.set(\"addressLine1\", matchRecord.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", matchRecord.postalCode);\r",
															"    pm.variables.set(\"companyName\", matchRecord.companyName);\r",
															"}\r",
															"//=================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_2\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");   \r",
															"    pm.variables.set(\"trustedBusinessId\",\"\");   \r",
															"    pm.variables.set(\"mode\", \"MATCH\");\r",
															"    let matchRecord = pm.variables.get('matchRecord2');\r",
															"    pm.variables.set(\"fullName\", matchRecord.fullName);\r",
															"    pm.variables.set(\"addressLine1\", matchRecord.addressLine1);\r",
															"    pm.variables.set(\"postalCode\", matchRecord.postalCode);\r",
															"    pm.variables.set(\"companyName\", matchRecord.companyName);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															"requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"XREF_MODE_REQUEST\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with XREF mode.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId','trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['businessId','identityOutputReturnCode'] });\r",
															"    utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"            fields : ['individualId','businessId', 'fullName','companyName', 'addressLine1', 'postalCode'],\r",
															"            existingRecords : {\r",
															"                \"match-record-1\" : pm.variables.get('matchRecord1'),\r",
															"                \"match-record-2\" : pm.variables.get('matchRecord2')\r",
															"            } \r",
															"        });\r",
															"\r",
															"    pm.test(\"(6)- Validate output data: identityOutput.returnCode comes populated as 2929\", ()=>{\r",
															"        pm.expect(outputData.businessId).to.equal(\"\");\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.equal(\"2929\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST_1\");\r",
															"        pm.variables.set(\"matchRecord1\", matchRecord1);\r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"MATCH_MODE_REQUEST_1\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Identity MATCH mode with deleted profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName','companyName', 'addressLine1', 'postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','businessId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: 2nd individualId and businessId comes populated in the response.\",()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(matchRecord2.individualId);\r",
															"        pm.expect(outputData.businessId).to.equal(matchRecord2.businessId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"MATCH_MODE_REQUEST_2\");\r",
															"        pm.variables.set(\"matchRecord2\", matchRecord2);\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"if(requestType == \"MATCH_MODE_REQUEST_2\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-3 : Identity MATCH with enriched profile attributes.\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName','companyName', 'addressLine1', 'postalCode'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','businessId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: Existing individualId and businessId comes populated in the response.\",()=>{\r",
															"        pm.expect(outputData.individualId).to.equal(matchRecord2.individualId);\r",
															"        pm.expect(outputData.businessId).to.equal(matchRecord2.businessId);\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessPhone\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessId\": \"{{trustedBusinessId}}\",\r\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"{{mode}}\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8926](https://jira.cnvrmedia.net/browse/PID-8926)\n\n◼ NAME: Realtime identity request, when input mode is \"XREF\" and valid trustedIndividualId , trustedBusinessId are given  \n  \n◼ DESCRIPTION: Realtime request when:  \n\\- \"configIdentity\"\"mode\" is given as \"XREF\" and  \n\\- valid \"trustedBusinessId\" is given in input.  \n  \n◼ PRECONDITION:  \n\\- clientCode is B2B_ENABLED.  \n\\- Both individualId provided in \"trustedIndividualId\" are valid.  \n\\- Both businessId provided in \"trustedBuisnessId\" are valid.  \n  \n◼ EXPECTED RESULT:  \n  \n1\\. 1st individualId from trustedIndividualId is deleted.  \n2\\. Profile with 2nd individualId gets enriched with the details from profile with attributes of 1st individualId.  \n3\\. 1st businessId from trustedBusinessId is deleted.  \n4\\. Profile with 2nd businessId gets enriched with the details from profile with attributes of 1st businessId.  \n5\\. \"returnCode\" comes populated as \"2929\" in response.  \n  \n◼ INPUT FIELDS:  \n\"mode\":\"XREF\",  \n  \n◼ OUTPUT FIELDS:  \n\"returnCode\":\"2929\""
											},
											"response": []
										},
										{
											"name": "Realtime > xref > (PID-8927) - Realtime identity request, when input mode is \"XREF\" and invalid trustedIndividualId or trustedBusinessId are given",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"8927\",\r",
															"                    sprint: \"22.01.01\",\r",
															"                    subject: \"realtime > xref\",\r",
															"                    tags: \"#realtime#xrefmode#invalid#trustedIndividualId#trustedBusinessId\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"//=============================================================\r",
															"(function initialize (){\r",
															"    requestType = pm.variables.get(\"requestType\");\r",
															"    if(typeof(requestType) == 'undefined') {\r",
															"        requestType = \"XREF_MODE_INVALID_INDIV\";\r",
															"    }\r",
															"})();\r",
															"\r",
															"//=============================================================\r",
															"if(requestType == \"XREF_MODE_INVALID_INDIV\") {\r",
															"    pm.variables.set(\"requestType\",\"XREF_MODE_INVALID_INDIV\");\r",
															"    pm.variables.set(\"trustedIndividualId\",\"4454>1224\");\r",
															"    pm.variables.set(\"trustedBusinessId\",\"\");\r",
															"}\r",
															"\r",
															"//=================================================================\r",
															"if(requestType == \"XREF_MODE_INVALID_BID\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"\");\r",
															"    pm.variables.set(\"trustedBusinessId\",\"4561>3211\");\r",
															"}\r",
															"//=================================================================\r",
															"if(requestType == \"XREF_MODE_BOTH_INVALID\") {\r",
															"    pm.variables.set(\"trustedIndividualId\",\"456>321\");\r",
															"    pm.variables.set(\"trustedBusinessId\",\"654>845\");\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"//==============================================================\r",
															" requestType = pm.variables.get(\"requestType\");\r",
															"\r",
															"//==============================================================\r",
															"if(requestType == \"XREF_MODE_INVALID_INDIV\") {\r",
															"    utils.doTestLogging({msg: \"CASE-1 : Realtime request with XREF mode and invalid trustedIndividualId\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','identityOutputReturnCode'] });\r",
															"\r",
															"    pm.test(\"(5)- Validate output data: identityOutput.returnCode comes populated as 8989\", ()=>{\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.equal(\"8999\");\r",
															"    });\r",
															"\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"XREF_MODE_INVALID_BID\");\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"\r",
															"//====================================================================================================\r",
															"if(requestType == \"XREF_MODE_INVALID_BID\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-2 : Realtime request with XREF mode and invalid trustedBusinessId\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: identityOutput.returnCode comes populated as 9989.\",()=>{\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.equal(\"9989\");\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"        pm.variables.set(\"requestType\", \"XREF_MODE_BOTH_INVALID\");\r",
															"        postman.setNextRequest(pm.info.requestName);   \r",
															"    })();\r",
															"}\r",
															"if(requestType == \"XREF_MODE_BOTH_INVALID\") {\r",
															"    let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
															"    utils.doTestLogging({msg: \"CASE-3 : Realtime request with XREF mode and invalid trustedIndividualId, trustedBusinessId\", type : \"PRINT_MSG\"});\r",
															"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['trustedIndividualId', 'trustedBusinessId'] });\r",
															"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','businessId', 'identityOutputReturnCode'] });\r",
															"    pm.test(\"(5)- Validate output: identityOutput.returnCode comes populated as 8989.\",()=>{\r",
															"        pm.expect(outputData.identityOutputReturnCode).to.equal('8989');\r",
															"    });\r",
															"    (function setNextRequest() {\r",
															"        pm.variables.clear();\r",
															"    })();\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"\",\r\n        \"fullName\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessId\": \"{{trustedBusinessId}}\",\r\n        \"trustedIndividualId\": \"{{trustedIndividualId}}\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"XREF\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8927](https://jira.cnvrmedia.net/browse/PID-8927)\n\n◼ NAME: Realtime identity request, when input mode is \"XREF\" and invalid trustedIndividualId or trustedBusinessId are given  \n  \n◼ DESCRIPTION: Realtime identity request, when:  \n\\- input mode is \"XREF\" and  \n\\- either invalid trustedIndividualId or trustedBusinessId or both are given in input.  \n  \n◼ PRECONDITION: clientCode is B2B_ENABLED.  \n  \n◼ EXPECTED RESULT:  \n  \n1\\. No XREF takes place.  \n2\\. returnCode comes populated in the response as \"8989\" when invalid trustedBusinessId and trustedIndividualId is given in input.  \n3\\. returnCode comes populated as \"8999\", when only invalid trustedIndividualId is given in input.  \n4\\. returnCode comes populated as \"9989\", when only invalid trustedBusinessId is given in input.  \n  \n◼ INPUT FIELDS:  \n\"mode\":\"XREF\","
											},
											"response": []
										},
										{
											"name": "terminate-xref-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set(\"folder\", \"xref-mode\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "return-code",
									"item": [
										{
											"name": "init-return-code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const utils = eval(globals.connectUtils);\r",
															"utils.enableOrDisableFeatures();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										},
										{
											"name": "Realtime > return-code > (PID-8871) -  Realtime request with existing business or identity record to verify returnCode in response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"\r",
															"//==============================================================\r",
															"let matchRecord = pm.variables.get('matchRecord');\r",
															"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName','companyName','addressLine1','postalCode'] });\r",
															"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','householdId','businessId','siteId','identityOutputReturnCode'] });\r",
															"utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
															"    fields : ['individualId','householdId','businessId','siteId','fullName','companyName', 'addressLine1', 'postalCode'], existingRecords : { \"matchRecord\" : matchRecord } \r",
															"});\r",
															"pm.test(\"(6)- identityOutput.returnCode comes populated as 0000\", ()=>{\r",
															"    pm.expect(outputData.identityOutputReturnCode).to.equal(\"0000\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8871\",\r",
															"                    sprint: \"21.04.05\",\r",
															"                    subject: \"realtime\",\r",
															"                    tags: \"#realtime#returnCode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//========================================================\r",
															"\r",
															"requestType = ''\r",
															"requestDetail = {\r",
															"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
															"    \"clientCode\" : pm.environment.get(\"CCODE_B2B_ENABLED\"),\r",
															"    \"apiKey\": pm.environment.get(\"XAPIKEY_B2B_ENABLED\"),\r",
															"    \"testerInput\":{} \r",
															"};\r",
															"\r",
															"pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
															"pm.variables.set(\"companyName\", utils.getRandomDataForField('companyName'));\r",
															"pm.variables.set(\"addressLine1\", utils.getRandomDataForField('addressLine1'));\r",
															"pm.variables.set(\"postalCode\", utils.getRandomDataForField('postalCode'));\r",
															"\r",
															"request = JSON.parse(JSON.stringify(requestDetail));\r",
															"request.testerInput = {\r",
															"    'fullName': pm.variables.get('fullName'),\r",
															"    'companyName': pm.variables.get('companyName'),\r",
															"    'addressLine1': pm.variables.get('addressLine1'),\r",
															"    'postalCode': pm.variables.get('postalCode')\r",
															"}\r",
															"pm.sendRequest(utils.constructIdentityRequest(request), (error, response) =>{\r",
															"    pm.variables.set(\"matchRecord\", utils.getOutputData(response.json()));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "clientCode",
														"type": "text",
														"value": "{{CCODE_B2B_ENABLED}}"
													},
													{
														"key": "accessToken",
														"type": "text",
														"value": "{{accessToken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-api-key",
														"type": "text",
														"value": "{{XAPIKEY_B2B_ENABLED}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessId\": \"\",\r\n        \"trustedIndividualId\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"IDENTITY\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8871](https://jira.cnvrmedia.net/browse/PID-8871)\n\n◼ NAME: Realtime request with existing business or identity record to verify returnCode in response.\n\n◼ DESCRIPTION: Realtime request with existing identity record(with or without household details) or business record(with or without business address details) to verify return code in response.\n\n◼ EXPECTED RESULT:  \n1.If the request is sent with existing identity details first digit of return code in response will be \"0\"(ex:0XXX)  \n2.If the request is sent with existing identity household details second digit of return code in response will be \"0\"(ex:X0XX)  \n3.If the request is sent with existing business details third digit of return code in response will be \"0\"(ex:XX0X)  \n4.If the request is sent with existing business address(site) details second digit of return code in response will be \"0\"(ex:XXX0)\n\n◼ INPUT FIELDS:\n\n◼ OUTPUT FIELDS:  \n\"returnCode\""
											},
											"response": []
										},
										{
											"name": "Realtime > return-code > (PID-8872) -  Realtime request with new business or identity record to verify returnCode in response.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8872\",\r",
															"                    sprint: \"21.04.05\",\r",
															"                    subject: \"realtime > match-mode\",\r",
															"                    tags: \"#realtime#matchMode\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"pm.variables.set(\"fullName\", utils.getRandomDataForField('fullName'));\r",
															"pm.variables.set(\"companyName\", utils.getRandomDataForField('companyName'));\r",
															"pm.variables.set(\"addressLine1\", utils.getRandomDataForField('addressLine1'));\r",
															"pm.variables.set(\"postalCode\", utils.getRandomDataForField('postalCode'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"\r",
															"//==============================================================\r",
															"\r",
															"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName','companyName','addressLine1','postalCode'] });\r",
															"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','householdId','businessId','siteId','identityOutputReturnCode'] });\r",
															"\r",
															"pm.test(\"(5)- identityOutput.returnCode comes populated as 1111 with existing non -empty individualId, householdId, businessId and siteId\", ()=>{\r",
															"    utils.validateIfNonEmpty(outputData.individualId);\r",
															"    utils.validateIfNonEmpty(outputData.householdId);\r",
															"    utils.validateIfNonEmpty(outputData.businessId);\r",
															"    utils.validateIfNonEmpty(outputData.siteId);\r",
															"    pm.expect(outputData.identityOutputReturnCode).to.equal(\"1111\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{XAPIKEY_B2B_ENABLED}}",
														"type": "default"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "default"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "default"
													},
													{
														"key": "clientCode",
														"value": "{{CCODE_B2B_ENABLED}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"\",\r\n        \"countryCode\": \"USA\",\r\n        \"companyName\": \"{{companyName}}\",\r\n        \"businessPhone\": \"\",\r\n        \"locality1\": \"\",\r\n        \"businessEmail\": \"{{businessEmail}}\",\r\n        \"prefix\": \"\",\r\n        \"givenName\": \"\",\r\n        \"middleName\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"111\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"IDENTITY\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8872](https://jira.cnvrmedia.net/browse/PID-8872)\n\n◼ NAME: Realtime request with new business or identity record to verify returnCode in response.  \n  \n◼ DESCRIPTION: Realtime request with new identity record(with or without household details) or business record(with or without business address details) to verify return code in response.  \n  \n◼ EXPECTED RESULT:  \n1.If the request is sent with new identity details first digit of return code in response will be \"1\"(ex:1XXX)  \n2.If the request is sent with new identity household details second digit of return code in response will be \"1\"(ex:X1XX)  \n3.If the request is sent with new business details third digit of return code in response will be \"1\"(ex:XX1X)  \n4.If the request is sent with new business address(site) details second digit of return code in response will be \"1\"(ex:XXX1)  \n  \n◼ INPUT FIELDS:  \n  \n◼ OUTPUT FIELDS:  \n\"returnCode\""
											},
											"response": []
										},
										{
											"name": "Realtime > return-code > (PID-8873) -   Realtime request with input record which is not applicable to identity or business profile to verify returnCode in response.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//=========================================================\r",
															"(function setMetadata() {\r",
															"    pm.request.headers.add({ \r",
															"        \"key\": \"testInfo\",\r",
															"         \"value\": JSON.stringify({\r",
															"                    pid: \"PID-8873\",\r",
															"                    sprint: \"21.04.05\",\r",
															"                    subject: \"realtime > return-code\",\r",
															"                    tags: \"#realtime#returnCode#invalidRecord\"\r",
															"                })\r",
															"    });\r",
															"})();\r",
															"//========================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"//=========================================================\r",
															"\r",
															"pm.variables.set(\"addressLine1\", utils.getRandomDataForField('addressLine1'));\r",
															"pm.variables.set(\"postalCode\", utils.getRandomDataForField('postalCode'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//==============================================================\r",
															"const utils = eval(globals.connectUtils);\r",
															"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
															"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
															"\r",
															"\r",
															"//==============================================================\r",
															"\r",
															"utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
															"utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
															"utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['addressLine1','postalCode'] });\r",
															"utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId','householdId','businessId','siteId','identityOutputReturnCode'] });\r",
															"\r",
															"pm.test(\"(6)- identityOutput.returnCode comes populated as 9999 in response\", ()=>{\r",
															"    pm.expect(outputData.identityOutputReturnCode).to.equal(\"9999\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{XAPIKEY_B2B_ENABLED}}",
														"type": "default"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "default"
													},
													{
														"key": "accessToken",
														"value": "{{accessToken}}",
														"type": "default"
													},
													{
														"key": "clientCode",
														"value": "{{CCODE_B2B_ENABLED}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"inputRecord\": {\r\n\"addressLine1\": \"{{addressLine1}}\",\r\n\"addressLine2\": \"\",\r\n\"countryCode\": \"USA\",\r\n\"companyName\":\"\",\r\n\"businessPhone\":\"\",\r\n\"locality1\":\"\",\r\n\"businessEmail\": \"{{businessEmail}}\",\r\n\"prefix\":\"\",\r\n\"givenName\":\"\",\r\n\"middleName\":\"\",\r\n\"familyName\": \"\",\r\n\"fullName\": \"\",\r\n\"gender\": \"\",\r\n\"phone1\": \"\",\r\n\"postalCode\": \"{{postalCode}}\",\r\n\"trustedBusinessID\": \"\",\r\n\"trustedIndividualID\": \"\",\r\n\"userCorrelationId\": \"111\"\r\n},\r\n\"serviceConfig\": {\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\"\r\n},\r\n\"configIdentity\":{\r\n\"mode\":\"MATCH\"\r\n},\r\n\"enableAddressHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableIdentity\": \"yes\",\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{server}}/v2/connect/realtime/service",
													"host": [
														"{{server}}"
													],
													"path": [
														"v2",
														"connect",
														"realtime",
														"service"
													]
												},
												"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8873](https://jira.cnvrmedia.net/browse/PID-8873)\n\n◼ NAME: Realtime request with input record which is not applicable to identity or business profile to verify returnCode in response.\n\n◼ DESCRIPTION:  Realtime request with input body which is not applicable to identity record(with or without household details) or business record(with or without business address details) to verify return code in response.\n\n◼ EXPECTED RESULT:\n\n1.If the input request which is sent is not applicable for individualId, first digit of return code in response will be \"9\"(ex:9XXX)   \n2.If the input request which is sent is not applicable for houseHoldId, second digit of return code in response will be \"9\"(ex:X9XX)    \n3.If the input request which is sent is not applicable for businessId, third digit of return code in response will be \"9\"(ex:XX9X)    \n4.If the input request which is sent is not applicable for siteId, last digit of return code in response will be \"9\"(ex:XXX9)\n\n◼ INPUT FIELDS:\n\n\n◼ OUTPUT FIELDS:\n\n\"returnCode\""
											},
											"response": []
										},
										{
											"name": "terminate-return-code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set(\"folder\", \"return-code\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "terminate-mode",
									"item": [
										{
											"name": "terminate-mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{server}}/usart/ping",
													"host": [
														"{{server}}"
													],
													"path": [
														"usart",
														"ping"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\",\"mode\");",
											"pm.variables.set(\"parentFolder\",\"mode\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "terminate-realtime",
							"item": [
								{
									"name": "terminate-realtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server}}/usart/ping",
											"host": [
												"{{server}}"
											],
											"path": [
												"usart",
												"ping"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({\"key\":\"folder\", \"value\":\"Realtime\"});",
									"pm.variables.set(\"folder\",\"realtime\");",
									"pm.variables.set(\"parentFolder\",\"realtime\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "END",
					"item": [
						{
							"name": "TerminateTestSuite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TestSuite terminated successfully.\")\r",
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BATCH",
					"item": [
						{
							"name": "start-automation-batch",
							"item": [
								{
									"name": "start-automation-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableBatchFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "us-batch",
							"item": [
								{
									"name": "start-automation-us-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableBatchFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "USBatch_cass_only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"6973\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"us-batch\",\r",
													"                    tags: \"#USBatch#CassOnly\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_USBATCH_CASS_ONLY}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-6973](https://jira.cnvrmedia.net/browse/PID-6973)\n\n&#9724; **NAME:** USBatch - (cass only)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for USA with only cass-hygiene enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_USBATCH_CASS_ONLY\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n*     \"enableAddressHygiene\": \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "USBatch_cass_name_email_phone_identity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8512\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"us-batch\",\r",
													"                    tags: \"#USBatch#Cass#Name#Email#Phone#Identity\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_USBATCH_CASS_IDENTITY}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8512](https://jira.cnvrmedia.net/browse/PID-8512)\n\n&#9724; **NAME:** USBatch - (cass,name, email, phone , identity)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for USA with cass-hygiene, name-hygiene, email-hygiene, phone-hygiene, identity enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_USBATCH_CASS_IDENTITY\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n*    \"enableNameHygiene\": \"yes\",\n*     \"enableEmailHygiene\": \"yes\",\n*     \"enablePhoneHygiene\": \"yes\",\n*     \"enableAddressHygiene\": \"yes\",\n*     \"enableIdentity\": \"yes\",\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "USBatch_cass_ncoa_name_email_phone_identity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"6974\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"us-batch\",\r",
													"                    tags: \"#USBatch#Cass#Name#Email#Phone#NCOA#Identity\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_USBATCH_CASS_NCOA}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"yes\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-6974](https://jira.cnvrmedia.net/browse/PID-6974)\n\n&#9724; **NAME:** USBatch - (cass, ncoa, name, email, phone , identity)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for USA with cass-hygiene, ncoa, name-hygiene, email-hygiene, phone-hygiene, identity enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_USBATCH_CASS_IDENTITY\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*   JobId gets generated and returned in the response.\n*   Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n*   The \".MSR\" file is generated along with required output file.\n\n&#9724; **INPUT FIELDS:**\n\n*    \"enableNameHygiene\": \"yes\",\n*    \"enableEmailHygiene\": \"yes\",\n*    \"enablePhoneHygiene\": \"yes\",\n*    \"enableAddressHygiene\": \"yes\",\n*    \"enableIdentity\": \"yes\",\n*    \"enableNcoa\": \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "USBatch_cass_name_email_phone_identity_tsp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7407\",\r",
													"                    sprint: \"20.03.02\",\r",
													"                    subject: \"us-batch\",\r",
													"                    tags: \"#USBatch#Cass#Name#Email#Phone#TSP#Identity\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_USBATCH_CASS_TSP}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"yes\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7407](https://jira.cnvrmedia.net/browse/PID-7407)\n\n&#9724; **NAME:** USBatch - (cass, name, email, phone , identity, tsp)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for USA with cass-hygiene, ncoa, name-hygiene, email-hygiene, phone-hygiene, identity, tsp enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_USBATCH_CASS_TSP\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*   JobId gets generated and returned in the response.\n*   Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n*   The \".TSP\" file gets generated along with required output file.\n\n&#9724; **INPUT FIELDS:**\n\n*   \"enableNameHygiene\": \"yes\",\n*   \"enableEmailHygiene\": \"yes\",\n*   \"enablePhoneHygiene\": \"yes\",\n*   \"enableAddressHygiene\": \"yes\",\n*   \"enableIdentity\": \"yes\",\n*   \"enableTspAppend\": \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "USBatch_cass_name_email_phone_identity_pac_pcoa_tsp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"6995\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"us-batch\",\r",
													"                    tags: \"#USBatch#Cass#Name#Email#Phone#pac#pcoa#tsp#Identity\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_USBATCH_CASS_PCOA}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"yes\",\r\n \"enablePcoa\": \"yes\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"yes\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-6995](https://jira.cnvrmedia.net/browse/PID-6995)\n\n&#9724; **NAME:** USBatch - (cass, name, email, phone , identity, pac, pcoa, tsp)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for USA with cass-hygiene, ncoa, name-hygiene, email-hygiene, phone-hygiene, identity, pac, pcoa, tsp enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_USBATCH_CASS_TSP\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*   JobId gets generated and returned in the response.\n*   Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n*   \"Proprietary Address Correction\" and \"Proprietary Change of Address\" data gets included in output file after successful hit to \"pac\" and \"pcoa\".\n*   The \".TSP\" file gets generated along with required output file.\n\n&#9724; **INPUT FIELDS:**\n\n*   \"enableNameHygiene\": \"yes\",\n*   \"enableEmailHygiene\": \"yes\",\n*   \"enablePhoneHygiene\": \"yes\",\n*   \"enableAddressHygiene\": \"yes\",\n*   \"enableIdentity\": \"yes\",\n*   \"enablePac\" : \"yes\",\n*   \"enablePcoa\" : \"yes\",\n*   \"enableTspAppend\": \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "USBatch_dsf",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8453\",\r",
													"                    sprint: \"21.02.07\",\r",
													"                    subject: \"USBatchDsf\",\r",
													"                    tags: \"#USBatchDsf\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_USBATCH_DSF_DISABLED}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-6973](https://jira.cnvrmedia.net/browse/PID-6973)\n\n&#9724; **NAME:** USBatch - (cass only)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for USA with only cass-hygiene enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_USBATCH_CASS_ONLY\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n*     \"enableAddressHygiene\": \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "USBatch > clientCorrelationId > (PID8545)-Validate initiate batch job with new file name and same \"clientCorrelationId\" for job is in processing state",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=======================================================================================================================================//\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8545\",\r",
													"                    sprint: \"21.03.02\",\r",
													"                    subject: \"batch > clientCorrelationId\",\r",
													"                    tags: \"#batch#clientCorrelationId\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													"//=======================================================================================================================================//\r",
													"\r",
													"const utils = eval(globals.connectUtils);\r",
													"//============================================================================================================================\r",
													"\r",
													"requestType = \"UNIQUE_CORRELATION_ID\";\r",
													"\r",
													"//==============================================================================================================\r",
													"( function initialize (){\r",
													"        requestType = pm.variables.get(\"requestType\");\r",
													"        if(typeof(requestType) == 'undefined') {\r",
													"            requestType = \"UNIQUE_CORRELATION_ID\";\r",
													"        }\r",
													"})();\r",
													"\r",
													"//==============================================================================================================\r",
													"if(requestType == \"UNIQUE_CORRELATION_ID\") {\r",
													"    pm.variables.clear();\r",
													"    const clientCorrelationId = _.random(99999,999999);\r",
													"    pm.variables.set(\"clientCorrelationId\",clientCorrelationId);\r",
													"    pm.variables.set(\"sourceFile\", pm.environment.get(\"DATAFILE_USBATCH_UNIQUE_CORRELATION_ID\"));\r",
													"    pm.variables.set(\"requestType\", \"UNIQUE_CORRELATION_ID\");\r",
													"}\r",
													"if(requestType == \"DUPLICATE_CORRELATION_ID\"){\r",
													"    pm.variables.set(\"sourceFile\", pm.environment.get(\"DATAFILE_USBATCH_SAME_CORRELATION_ID\"))\r",
													"    pm.variables.set(\"requestType\", \"DUPLICATE_CORRELATION_ID\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//=====================================================================\r",
													"const utils = eval(globals.connectUtils);\r",
													"//=====================================================================\r",
													"let inputData = JSON.parse(pm.request.body);\r",
													"let  currentJobId = JSON.parse(responseBody).jobId;\r",
													"let jobStatus = JSON.parse(responseBody).status;\r",
													"\r",
													"requestType = pm.variables.get(\"requestType\");\r",
													"\r",
													"//=====================================================================\r",
													"if(requestType == \"UNIQUE_CORRELATION_ID\"){\r",
													"    utils.validateBatchResponse(currentJobId);\r",
													"    pm.test(\"Response status comes populated as ACCEPTED\",()=>{\r",
													"        pm.expect(jobStatus).to.equal(\"ACCEPTED\");\r",
													"    });\r",
													"    (function setNextRequest() {\r",
													"        let clientCorrelationId = inputData.clientCorrelationId;\r",
													"        pm.variables.clear();\r",
													"        pm.variables.set(\"clientCorrelationId\",clientCorrelationId);\r",
													"        pm.variables.set(\"existingJobId\", currentJobId);\r",
													"        pm.variables.set(\"requestType\", \"DUPLICATE_CORRELATION_ID\");\r",
													"        postman.setNextRequest(pm.info.requestName);    \r",
													"    })();\r",
													"}\r",
													"//=====================================================================\r",
													"if(requestType == \"DUPLICATE_CORRELATION_ID\"){\r",
													"    utils.validateBatchResponse(currentJobId);\r",
													"    pm.test(\"Existing jobId and duplicate jobId matches\", ()=>{\r",
													"        pm.expect(pm.variables.get(\"existingJobId\")).to.equal(currentJobId);\r",
													"    })\r",
													"    pm.test(\"Response status comes populated as DUPLICATE\",()=>{\r",
													"        pm.expect(jobStatus).to.equal(\"DUPLICATE\")\r",
													"    });\r",
													"    (function stopRequest() {\r",
													"        pm.variables.clear();  \r",
													"    })();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDsf2\": \"no\",\r\n            \"enableDsfWalkSequence\": \"no\"\r\n        },\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    },\r\n    \"sourceFile\": \"{{sourceFile}}\",\r\n    \"clientCorrelationId\": \"354777\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8545](https://jira.cnvrmedia.net/browse/PID-8545)\n\n◼ NAME:  Validate initiate batch job with new file name and same \"clientCorrelationId\" for job is in processing state  \n\n◼ DESCRIPTION:  validate initiate job when\n1. input request \"clientCorrelationId\" is same as that of \"clientCorrelationId\" of job already processed..\n2. input request contains new file name different from that of job in process.\n\n◼ PRECONDITION:\nInput file is present in inbound S3 location: \"//identity-app-data-stage/AIM_JOBS/INBOUND\"\n\n◼ EXPECTED RESULT:\n1. Existing \"jobId\" is returned in response.\n2. \"status\" field in response comes as \"DUPLICATE\"\n\n◼ INPUT FIELDS:\n\"clientCorrelationId\"\n\n◼ OUTPUT FIELDS:\"\n\"jobId\"\n\"status\":\"DUPLICATE\""
									},
									"response": []
								},
								{
									"name": "Batch > (PID-8772) - Batch request with mode as empty in input.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8772\",\r",
													"                    sprint: \"21.04.02\",\r",
													"                    subject: \"batch\",\r",
													"                    tags: \"#Batch#emptyMode\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_BATCH_MODE_EMPTY}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTSPAppend\": \"no\"\r\n    },\r\n    \"pushNotification\": \"\",\r\n    \"clientCorrelationId\": \"1234\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8772](https://jira.cnvrmedia.net/browse/PID-8772)\n\n◼ NAME: Batch request with mode as empty in input.\n\n◼ DESCRIPTION:\n\nBatch job request is submitted with input file and mode as empty in input body.\n\n◼ PRECONDITION\n\nThe file \"DATAFILE_BATCH_MODE_EMPTY.dat\" is present in S3 location specified below.\nInbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n◼ EXPECTED RESULT:\n\nJobId gets populated in response.\nRecord is inserted in aim_identity_jobs_history table with default value for job_type as IDENTITY.\n\n◼ INPUT FIELDS:\n\n◼ OUTPUT FIELDS:"
									},
									"response": []
								},
								{
									"name": "Batch > (PID-8774) - Batch request with mode other than IDENTITY,XREF,MATCH,DELETE(case sensitive)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var response = JSON.parse(responseBody);\r",
													"let inputData = JSON.parse(pm.request.body)\r",
													"        console.log(inputData.serviceConfig.configIdentity.mode);\r",
													" pm.test(\"Validate output -> errorMessage 'Invalid Identity mode requested' is thrown in the response.\",\r",
													"    ()=>{\r",
													"        pm.expect(response.errorMessage).to.equal(\"Invalid Identity mode requested \" + inputData.serviceConfig.configIdentity.mode);\r",
													"    });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8774\",\r",
													"                    sprint: \"21.04.02\",\r",
													"                    subject: \"batch\",\r",
													"                    tags: \"#Batch#randomMode\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_BATCH_MODE_RANDOM}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"XYZ\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTSPAppend\": \"no\"\r\n    },\r\n    \"pushNotification\": \"\",\r\n    \"clientCorrelationId\": \"1454\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8774](https://jira.cnvrmedia.net/browse/PID-8774)\n\n◼ NAME: Batch request with mode other than IDENTITY,XREF,MATCH,DELETE(case sensitive)\n\n◼ DESCRIPTION:\n\nBatch job request is submitted with input file and mode other than IDENTITY,XREF,MATCH,DELETE(case sensitive)\n\n◼ PRECONDITION\n\nThe file \"DATAFILE_BATCH_MODE_RANDOM.dat\" is present in S3 location specified below.  \nInbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n◼ EXPECTED RESULT:\n\nError message \"Invalid Identity mode requested \" is thrown in the response.\n\n◼ INPUT FIELDS:\n\n◼ OUTPUT FIELDS:"
									},
									"response": []
								},
								{
									"name": "Batch > (PID-8988) - Initiate job with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as [\"ADR\",\"EML\"]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"let validateTspOutputFile = (jobStatusResponse) =>{\r",
													"    pm.test(\"Validate Output : .tsp file is generated in response.\",()=>{\r",
													"        pm.expect(jobStatusResponse.tspAppendFile.endsWith('.tsp')).to.be.true;\r",
													"    })\r",
													"}\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatusAndJobCompletion(input, validateTspOutputFile);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//========================================================================\r",
													"\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8988\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"batch\",\r",
													"                    tags: \"#Batch#tsp#tspConfigOptions#ADR#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_TSPCONFIG_ADR_EML}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"MATCH\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTspAppend\": \"yes\",\r\n        \"configTspOptions\": [\r\n            \"ADR\",\"EML\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8988](https://jira.cnvrmedia.net/browse/PID-8988)\n\n◼ NAME: Initiate job with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \\[\"ADR\",\"EML\"\\]\n\n◼ DESCRIPTION: Initiate batch job with:\n\n*   \"enableTspAppend\" is given as \"yes\"\n*   \"configTspOptions\" is given as \\[\"ADR\",\"EML\"\\]\n    \n\n◼ PRECONDITION\n\n*   Input file is present in S3 inbound location: Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n*   clientCode is enabled for TSP.  \n    ◼ EXPECTED RESULT:\n    \n\n1.  jobId gets returned in the response.\n2.  For records with either individual or household level address match, .tsp output file comes populated with tsp data.\n3.  For records with either individual or household level email match .tsp output file comes populated with tsp data.\n4.  For records with individual level address , individual and household level email match, tsp data comes populated for individual level address match.\n5.  For records with household level address and email match attributes, household level address match tsp data comes populated.\n6.  For record with household level address and individual level email match attributes, tsp match for individual level email comes populated."
									},
									"response": []
								},
								{
									"name": "Batch > (PID-8990) -  Initiate job with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" is not given in input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"let validateTspOutputFile = (jobStatusResponse) =>{\r",
													"    pm.test(\"Validate Output : .tsp file is generated in response.\",()=>{\r",
													"        pm.expect(jobStatusResponse.tspAppendFile.endsWith('.tsp')).to.be.true;\r",
													"    })\r",
													"}\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatusAndJobCompletion(input, validateTspOutputFile);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//========================================================================\r",
													"\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8990\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"batch\",\r",
													"                    tags: \"#Batch#tsp\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_NO_TSPCONFIG}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"MATCH\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTspAppend\": \"yes\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8990](https://jira.cnvrmedia.net/browse/PID-8990)\n\n◼ NAME: Initiate job with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" is not given in input  \n  \n◼ DESCRIPTION: Initiate batch job with:  \n\\- \"enableTspAppend\" is given as \"yes\"  \n\\- \"configTspOptions\" is not given in input  \n  \n◼ PRECONDITION  \n\\- Input file is present in S3 inbound location: Path: //identity-app-data-stage/AIM_JOBS/INBOUND  \n\\- clientCode is enabled for TSP.  \n  \n◼ EXPECTED RESULT:  \n1\\. jobId gets returned in the response.  \n2\\. .tsp output file comes populated in the response.  \n3\\. For records with individual or household level address match TSP data comes populated in the .tsp output file."
									},
									"response": []
								},
								{
									"name": "Batch > (PID-8992) - Initiate job with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \"ADR\"/\"EML\" / \"ADR\",\"EML\" and clientCode is disabled for TSP.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var response = JSON.parse(responseBody);\r",
													"utils.validateBadRequestResponse();\r",
													"pm.test(\"errorMessage comes populated in response as 'TSP is not enabled.'\",()=>{\r",
													"    pm.expect(response.errorMessage).to.equal(\"TSP is not enabled.\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//========================================================================\r",
													"\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"PID-8992\",\r",
													"                    sprint: \"22.01.02\",\r",
													"                    subject: \"batch\",\r",
													"                    tags: \"#Batch#tsp#tspConfigOptions#ADR#EML\"\r",
													"                })\r",
													"    });\r",
													"})();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_TSP_DISABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_TSPCONFIG_TSP_DISABLED}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"configIdentity\": {\r\n            \"mode\": \"MATCH\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTspAppend\": \"yes\",\r\n        \"configTspOptions\": [\r\n            \"ADR\",\"EML\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "◼ **JIRA -** [https://jira.cnvrmedia.net/browse/PID-8992](https://jira.cnvrmedia.net/browse/PID-8992)\n\n◼ NAME: Initiate job with \"enableTspAppend\" as \"yes\" and \"configTspOptions\" as \"ADR\"/\"EML\" / \"ADR\",\"EML\" and clientCode is disabled for TSP.\n\n◼ DESCRIPTION: Initiate batch job with:\n\n*   \"enableTspAppend\" is given as \"yes\"\n*   \"configTspOptions\" is \"ADR\"/\"EML\"/\"ADR\",\"EML\"\n*   clientCode is disabled for TSP.\n    \n\n◼ PRECONDITION\n\n*   Input file is present in S3 inbound location: Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n*   clientCode is disabled for TSP.\n    \n\n◼ EXPECTED RESULT:\n\n1.  Response status comes populated as 400.\n2.  \"errorMessage\" comes populated in resposne as \"TSP is not enabled\""
									},
									"response": []
								},
								{
									"name": "stop-automation-us-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"us-batch\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "canada-batch",
							"item": [
								{
									"name": "start-automation-canada-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableBatchFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "CanadaBatch_serp_only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8513\",\r",
													"                    sprint: \"20.03.02\",\r",
													"                    subject: \"canada-batch\",\r",
													"                    tags: \"#CanadaBatch#SERP\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_CANBATCH_SERP_ONLY}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8513](https://jira.cnvrmedia.net/browse/PID-8513)\n\n&#9724; **NAME:** CanadaBatch - (serp only)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for CAN with only serp.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_CANBATCH_SERP_ONLY\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n*   \"enableNameHygiene\": \"yes\",\n*   \"enableEmailHygiene\": \"yes\",\n*   \"enablePhoneHygiene\": \"yes\",\n*   \"enableAddressHygiene\": \"yes\",\n*   \"enableIdentity\": \"yes\",\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "CanadaBatch_serp_ncoa_name_email_phone_identity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7408\",\r",
													"                    sprint: \"20.03.02\",\r",
													"                    subject: \"canada-batch\",\r",
													"                    tags: \"#CanadaBatch#SERP#NCOA#NAME#EMAIL#PHONE#IDENTITY\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_CANBATCH_SERP_EMAIL}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"yes\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7408](https://jira.cnvrmedia.net/browse/PID-7408)\n\n&#9724; **NAME:** CanadaBatch - (serp,ncoa,name, email, phone , identity)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for CAN with serp,ncoa,name-hygiene, email-hygiene, phone-hygiene,  identity enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_CANBATCH_SERP_EMAIL\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n*   \"enableNameHygiene\": \"yes\",\n*   \"enableEmailHygiene\": \"yes\",\n*   \"enablePhoneHygiene\": \"yes\",\n*   \"enableAddressHygiene\": \"yes\",\n*   \"enableIdentity\": \"yes\",\n*   \"enableNcoa\": \"yes\"\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "CanadaBatch_NCOA_EUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"\",\r",
													"                    sprint: \"21.03.06\",\r",
													"                    subject: \"canada-batch\",\r",
													"                    tags: \"#CanadaBatch#EUID\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_CANBATCH_EUID}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8746](https://jira.cnvrmedia.net/browse/PID-8746)\n\n◼ NAME: Validate Canada NCOA batch with valid EUID\n\n◼ DESCRIPTION: \nValidate Canada NCOA batch job when EUID for clientCode given in input is valid.\n\n◼ PRECONDITION:\n1. The input file is present at inbound S3 location : //identity-app-data-stage/AIM_JOBS/INBOUND\n2. EUID specified in \"aim_client_profiles\" table for clientCode given in input is valid\n\n◼ EXPECTED RESULT:\n1. JobId gets generated and returned in the response.\n2. Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n\n◼ INPUT FIELDS:\n\n◼ OUTPUT FIELDS:\njobId"
									},
									"response": []
								},
								{
									"name": "stop-automation-canada-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Stop automation: \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"canada-batch\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "global-batch",
							"item": [
								{
									"name": "start-automation-global-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableBatchFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "GlobalBatch_cass_name_email_phone_identity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7493\",\r",
													"                    sprint: \"20.03.06\",\r",
													"                    subject: \"global-batch\",\r",
													"                    tags: \"#GlobalBatch#CASS#NAME#EMAIL#PHONE#IDENTITY\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_GLOBALBATCH_CASS_IDENTITY}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7493](https://jira.cnvrmedia.net/browse/PID-7493)\n\n&#9724; **NAME:** GlobalBatch - (cass,name, email, phone , identity)\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for Global with cass-hygiene, name-hygiene, email-hygiene, phone-hygiene, identity enabled.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_GLOBALBATCH_CASS_IDENTITY\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*   JobId gets generated and returned in the response.\n*   Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n*    \"enableNameHygiene\": \"yes\",\n*    \"enableEmailHygiene\": \"yes\",\n*    \"enablePhoneHygiene\": \"yes\",\n*    \"enableAddressHygiene\": \"yes\",\n*    \"enableIdentity\": \"yes\",\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "stop-automation-global-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Stop automation: \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"global-batch\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "dms-batch",
							"item": [
								{
									"name": "start-automation-dms-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableBatchFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "DmsBatch_enable_dotomi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8337\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"DmsBatch_enable_dotomi\",\r",
													"                    tags: \"#DMSBatch#enable_dotomi\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_DMSBATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_DMSBATCH_ENABLE_DOTOMI}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8337](https://jira.cnvrmedia.net/browse/PID-8337)\n\n&#9724; **NAME:** DMS-Batch - (dotomi enabled)\n\n&#9724; **DESCRIPTION:**\n*    Connect DMS-Batch request when dotomi enabled in client profile.\n\n&#9724; **PRECONDITION**\n*   ENABLE_DOTOMI = \"Y\", for clientCode in \"aim_client_profile\" table.\n*   The file \"DATAFILE_DMSBATCH_ENABLE_DOTOMI\" is present in S3 location specified below.\n*   Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The .dms and .dat file should be generated at S3 location.\n*   S3 Outbound Location://identity-app-data-stage/AIM_JOBS/OUTBOUND\n*   Dotomi Output File Path: s3://identity-app-data-stage/DTM_JOBS/\n*   No xref file would be generated.\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "DmsBatch_mpid_lookup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8342\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"DmsBatch_mpid_lookup\",\r",
													"                    tags: \"#DMSBatch#MPID_lookup\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_DMSBATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_DMSBATCH_MPID_LOOKUP}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8342](https://jira.cnvrmedia.net/browse/PID-8342)\n\n&#9724; **NAME:** DMS-Batch - MPID lookup validation.\n\n&#9724; **DESCRIPTION:**\n*    Connect DMS-Batch request when dotomi enabled in client profile to validate (market place id) \"mp_id\" look up.\n\n&#9724; **PRECONDITION**\n*   ENABLE_DOTOMI = \"Y\", for clientCode in \"aim_client_profile\" table.\n*   The file \"DATAFILE_DMSBATCH_MPID_LOOKUP\" is present in S3 location specified below.\n*   Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The .dms and .dat file should be generated at S3 location.\n*   S3 Outbound Location://identity-app-data-stage/AIM_JOBS/OUTBOUND\n*   Dotomi Output File Path: s3://identity-app-data-stage/DTM_JOBS/\n*   For records where mp ids are not present in dotomi_mapping table ,indiv ids will be displayed.\n*   For records where mp ids are present in dotomi_mapping table ,mp ids will be displayed.\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "DmsBatch_special_char",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8337\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"DmsBatch_enable_dotomi\",\r",
													"                    tags: \"#DMSBatch#enable_dotomi\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_DMSBATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"sourceFile\": \"{{DATAFILE_DMS_SPECIAL_CHAR}}\",\r\n\"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\",\r\n\"enableNcoa\": \"no\",\r\n \"enableDsf2\": \"no\",\r\n \"enableDsfWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8452](https://jira.cnvrmedia.net/browse/PID-8452)\n\n&#9724; **NAME:** DMS-Batch -\nspecial character\n\n&#9724; **DESCRIPTION:**\n*    DMS-Dotomi-Batch-validating dotomi job for special or non printable characters.\n\n&#9724; **PRECONDITION**\n*   ENABLE_DOTOMI = \"Y\", for clientCode in \"aim_client_profile\" table.\n*   The file \"DATAFILE_DMSBATCH_ENABLE_DOTOMI\" is present in S3 location specified below.\n*   Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n* JobId gets populated in response without raising any error for file with special characters.\n* The .dms and .dat file gets generated at S3 location.\n*  S3 outbound location:\n//identity-app-data-stage/AIM_JOBS/OUTBOUND\n*  Dotomi output file path:\ns3://identity-app-data-stage/DTM_JOBS/\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "DmsBatch > (PID-8335) - Verify Job, when Dotomi is disabled for client profile.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"    let validate = (jobStatusDetails) =>{\r",
													"        pm.test(\"Validate output -> No DMS output file should generate.).\",()=> {\r",
													"            utils.validateIfEmpty(jobStatusDetails.dmsOutputFile);\r",
													"        });\r",
													"    }\r",
													"    utils.getDMSBatchOutput(input,validate);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8335\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"dms-batch\",\r",
													"                    tags: \"#DMSBatch#disabled_dotomi\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_DOTOMI_DISABLED}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8335](https://jira.cnvrmedia.net/browse/PID-8335)\n\n&#9724; **NAME:** Verify Job, when Dotomi is disabled for client profile.\n \n&#9724; **Pre-Condition: **\n* For selected client following option is selected in the client profiles: \nENABLE_DOTOMI - \"N\"\n* The input file is present in the below S3 location.\n\nPath://identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **Expected Result: **\n* Job id  should be generated and output files should be in generated.\n\n* No DMS and dotomi output file should generate."
									},
									"response": []
								},
								{
									"name": "DmsBatch > (PID-8341) - Verify DMS-Batch with invalid or empty field1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateFailedJobStatus(input);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8340\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"dms-batch\",\r",
													"                    tags: \"#DMSBatch#enable_dotomi\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_DMSBATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_DMSBATCH_INSERT_INVALID_EMPTY_FIELD1}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8341](https://jira.cnvrmedia.net/browse/PID-8341)\n\n&#9724; **NAME:** Verify DMS-Batch for input file with field1, either having invalid \"ParentClientCode\" or \"SubClientCode\" or both as invalid /empty values  \n\n&#9724; **Pre-Condition** \n*   For selected client following option is be selected in the client profiles: \nENABLE_DOTOMI - \"Y\"\n\n* The input file is be present in the below S3 location: Path://identity-app-data-stage/AIM_JOBS/INBOUND\n\n* Input file have invalid \"ParentClientCode\" or \"SubClientCode\" values.\n\n&#9724; **EXPECTED OUTPUT:**\n\n* Job id should be generated. \n\n* Job should fail in pre-processing and status of the job should be updated to \"JOB_FAILED\"."
									},
									"response": []
								},
								{
									"name": "stop-automation-dms-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Stop automation: \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"dms-batch\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "privacy-batch",
							"item": [
								{
									"name": "start-automation-privacy-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableBatchFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "PrivacyBatch_access",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//Validating response status code and jobId\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7283\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"privacy-batch\",\r",
													"                    tags: \"#PrivacyBatch#PrivacyBatchAccess\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_BATCH}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"sourceFile\" :\"{{DATAFILE_PRIVACYBATCH_ACCESS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/privacy/access",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"privacy",
												"access"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7283](https://jira.cnvrmedia.net/browse/PID-7283)\n\n&#9724; **NAME:** Privacy Access\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for privacy access.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_PRIVACYBATCH_ACCESS\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n*   The file \"DATAFILE_PRIVACYBATCH_ACCESS\" contains of valid individualIds.\n\n&#9724; **EXPECTED RESULT:**\n*   Response code comes as 200.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**"
									},
									"response": []
								},
								{
									"name": "PrivacyBatch_search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//Validating response status code and jobId\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7303\",\r",
													"                    sprint: \"20.02.07\",\r",
													"                    subject: \"privacy-batch\",\r",
													"                    tags: \"#PrivacyBatch#PrivacyBatchSearch\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"type": "text",
												"value": "{{CCODE_BATCH}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"sourceFile\" :\"{{DATAFILE_PRIVACYBATCH_SEARCH}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/privacy/search",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"privacy",
												"search"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7303](https://jira.cnvrmedia.net/browse/PID-7303)\n\n&#9724; **NAME:** Privacy Search\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for privacy search.\n\n&#9724; **PRECONDITION**\n*   The file \"ccpa_search.dat\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n*   The file \"ccpa_search.dat\" contains of valid individualIds.\n\n&#9724; **EXPECTED RESULT:**\n*   Response code comes as 200.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**"
									},
									"response": []
								},
								{
									"name": "PrivacyBatch_delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//INITIALIZATION==============================================================================================================================================//\r",
													"const utils = eval(globals.connectUtils);\r",
													"\r",
													"//Validating response status code and jobId\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"7287\",\r",
													"                    sprint: \"Q2-2020\",\r",
													"                    subject: \"privacy-batch\",\r",
													"                    tags: \"#PrivacyBatch#PrivacyBatchDelete\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_BATCH}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n\"sourceFile\" :\"{{DATAFILE_PRIVACYBATCH_DELETE}}\",\n\"softDeleteDuration\" : 0\n\n}"
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/privacy/delete",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"privacy",
												"delete"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7287](https://jira.cnvrmedia.net/browse/PID-7287)\n\n&#9724; **NAME:** Privacy Delete\n\n&#9724; **DESCRIPTION:**\n*    Connect batch request for privacy delete.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_PRIVACYBATCH_DELETE\" is present in S3 location specified below.\n*   S3 Location: //identity-app-data-stage/AIM_JOBS/INBOUND\n*   The file \"DATAFILE_PRIVACYBATCH_DELETE\" contains of valid individualIds.\n\n&#9724; **EXPECTED RESULT:**\n*   Response code comes as 200.\n*   The output files gets generated at S3 outbound location specified below\n*   S3 location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**"
									},
									"response": []
								},
								{
									"name": "stop-automation-privacy-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Stop automation: \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"privacy-batch\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "business-match-batch",
							"item": [
								{
									"name": "start-automation-business-match-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"utils.enableOrDisableBatchFeatures();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "Batch > business-match > layout (PID-8667) - Batch request with 39 fileds(38 pipes) in inputfile and client code is enabled for b2b.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateFailedJobStatus(input);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8667\",\r",
													"                    sprint: \"21.02.05\",\r",
													"                    subject: \"batch > business-match > layout\",\r",
													"                    tags: \"#batch#b2b#identityLayout\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_BATCH_IDENTITY_LAYOUT_FORB2B}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDSF2\": \"no\",\r\n            \"enableDSFWalkSequence\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8667](https://jira.cnvrmedia.net/browse/PID-8667)\n\n&#9724; **NAME:** Batch request with 39 fileds(38 pipes) in inputfile and client code is enabled for b2b. \n\n&#9724; **Description** \nBatch request is submitted with identity layout (39 fields) file for B2BEnabled client\n\n&#9724; **Pre-Condition** \n*   Client profile is enabled for b2b\n*   The file \"DATAFILE_BATCH_IDENTITY_LAYOUT_FORB2B.dat\" is present in S3 location specified below.\n\n*   Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED OUTPUT:**\n\n* Job id should be generated. \n\n* Job gets failed and status comes as \"JOB_FAILED\" in output."
									},
									"response": []
								},
								{
									"name": "Batch > business-match > layout (PID-8668) - Batch request with 45 fileds(44 pipes) in inputfile and client code is enabled for b2b.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8668\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"batch > business-match > layout\",\r",
													"                    tags: \"#batch#B2B#B2BLayout\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"sourceFile\": \"{{DATAFILE_BATCH_B2B_LAYOUT_FORB2B}}\",\r\n\"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\",\r\n\"enableNcoa\": \"no\",\r\n \"enableDsf2\": \"no\",\r\n \"enableDsfWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8668](https://jira.cnvrmedia.net/browse/PID-8668)\n\n&#9724; **NAME:** Batch request with 45 fileds(44 pipes) in inputfile and client code is enabled for b2b.\n\n&#9724; **DESCRIPTION:**\n*    Batch request is submitted with b2b layout (45 fields) file for B2BEnabled client.\n\n&#9724; **PRECONDITION**\n*    Client profile is enabled for b2b\n*    The file \"DATAFILE_BATCH_B2B_LAYOUT_FORB2B.dat\" is present in S3 location specified below.\n*    Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n* JobId gets populated in response.\n* Job gets completed and status comes as \"COMPLETED\" in output.\n\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "Batch > business-match > layout (PID-8669) - Batch request with 45 fileds(44 pipes) in inputfile and client code is disabled for b2b.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8669\",\r",
													"                    sprint: \"21.03.05\",\r",
													"                    subject: \"batch > business-match > layout\",\r",
													"                    tags: \"#batch#Identity#B2BLayout\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_DISABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"sourceFile\": \"{{DATAFILE_BATCH_B2B_LAYOUT_FORIDENTITY}}\",\r\n\"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\",\r\n\"enableNcoa\": \"no\",\r\n \"enableDsf2\": \"no\",\r\n \"enableDsfWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8669](https://jira.cnvrmedia.net/browse/PID-8669)\n\n&#9724; **NAME:** Batch request with 45 fileds(44 pipes) in inputfile and client code is disbled for b2b.\n\n&#9724; **DESCRIPTION:**\n*    Batch request is submitted with b2b layout (45 fields) file for B2BDisabled client.\n\n&#9724; **PRECONDITION**\n*    Client profile is disabled for b2b\n*    The file \"DATAFILE_BATCH_B2B_LAYOUT_FORIDENTITY.dat\" is present in S3 location specified below.\n*    Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n* JobId gets populated in response.\n* Batch Job removes extra fields (after 39 fields) and job gets completed and status comes as \"COMPLETED\" in output.\n\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
									},
									"response": []
								},
								{
									"name": "Batch > business-match > layout (PID-8741) - Batch request for b2b enabled client code with special characters in inputfile.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8741\",\r",
													"                    sprint: \"21.03.06\",\r",
													"                    subject: \"batch > business-match > B2B_SPECIALCHAR\",\r",
													"                    tags: \"#batch#B2BSPECIALCHAR\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_BATCH}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_USBATCH_B2B_SPECIALCHAR}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDsf2\": \"no\",\r\n            \"enableDsfWalkSequence\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8741](https://jira.cnvrmedia.net/browse/PID-8741)\n\n◼ NAME: Batch request for b2b enabled client code with special characters in inputfile.\n\n◼ DESCRIPTION:\nBatch request is submitted with input file containing special characters in it.\n\n◼ PRECONDITION\nClient profile is enabled for b2b\nThe file \"DATAFILE_USBATCH_B2B_SPECIALCHAR.dat\" is present in S3 location specified below.\nInbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n◼ EXPECTED RESULT:\nJobId gets populated in response without raising any error for file with special characters.\nS3 outbound location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n◼ INPUT FIELDS:\n\n◼ OUTPUT FIELDS:\n\njobId"
									},
									"response": []
								},
								{
									"name": "Batch > business-match > layout (PID-8740) - Batch request with input file having identity layout and containing companyName for b2b disabled clientCode.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const utils = eval(globals.connectUtils);\r",
													"var currentJobId = JSON.parse(responseBody).jobId;\r",
													"utils.validateBatchResponse(currentJobId);\r",
													"if(typeof(currentJobId) != 'undefined') {\r",
													"    input = {\r",
													"        \"currentJobId\": currentJobId, \r",
													"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
													"    }\r",
													"    utils.validateJobStatus(input);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//=============================================================================================================================\r",
													"(function setMetadata() {\r",
													"    pm.request.headers.add({ \r",
													"        \"key\": \"testInfo\",\r",
													"         \"value\": JSON.stringify({\r",
													"                    pid: \"8740\",\r",
													"                    sprint: \"21.03.06\",\r",
													"                    subject: \"batch > business-match > layout\",\r",
													"                    tags: \"#batch#Identity#B2BLayout#companyName\"\r",
													"                })\r",
													"    });\r",
													"})();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "clientCode",
												"value": "{{CCODE_B2B_DISABLED}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceFile\": \"{{DATAFILE_BATCH_IDENTITY_LAYOUT_COMPANYNAME_FORB2B}}\",\r\n    \"serviceConfig\": {\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\",\r\n            \"enableNcoa\": \"no\",\r\n            \"enableDsf2\": \"no\",\r\n            \"enableDsfWalkSequence\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableOccupancyScore\": \"yes\",\r\n        \"enableGlobalSuppression\": \"yes\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server}}/jobs/v2/connect/initiatejob",
											"host": [
												"{{server}}"
											],
											"path": [
												"jobs",
												"v2",
												"connect",
												"initiatejob"
											]
										},
										"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8740](https://jira.cnvrmedia.net/browse/PID-8740)\n\n◼ NAME: Batch request with input file having identity layout and containing companyName for b2b disabled clientCode.\n\n◼ DESCRIPTION:\n\nBatch request is submitted with input file having identity layout and containing companyName for b2b disabled client code to verify companyName coming populated in outputfile.\n\n◼ PRECONDITION\n\n*  Client profile is disabled for b2b\n*  The file \"DATAFILE_BATCH_IDENTITY_LAYOUT_COMPANYNAME_FORB2B.dat\" is present in S3 location specified below.\n*  Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n◼ EXPECTED RESULT:\n\n*  JobId gets populated in response.\n*  Job gets completed and status comes as \"COMPLETED\" in output for job-status request with given jobId.\n*  companyName(same as given in input file without hygiening it) comes populated in outputFile\n*  S3 outbound location: //identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n◼ INPUT FIELDS:\n\n◼ OUTPUT FIELDS:\n\n*  jobId\n*  status"
									},
									"response": []
								},
								{
									"name": "stop-automation-business-match-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Stop automation: \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.variables.set(\"folder\", \"business-match-batch\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "stop-automation-batch",
							"item": [
								{
									"name": "stop-automation-batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Stop automation: \" + pm.variables.get(\"folder\"), ()=>{});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.variables.set(\"folder\",\"batch\");",
									"pm.variables.set(\"parentFolder\",\"batch\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "job-status",
					"item": [
						{
							"name": "init-job-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"utils.enableOrDisableFeatures();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realtime > job-status > (PID-8578) -   Job status request with empty batch type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8578\",\r",
											"                    sprint: \"21.03.03\",\r",
											"                    subject: \"realtime > job-status\",\r",
											"                    tags: \"#realtime#job-status#identity\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"let getPreRequest1 = () => {\r",
											"    let sourceFile = pm.environment.get(\"DATAFILE_JOBSTATUS_IDENTITY\");\r",
											"    let testerInput = {\"sourceFile\":sourceFile};\r",
											"    let requestDetail ={\r",
											"        \"clientCode\": pm.environment.get(\"CCODE_BATCH\"),\r",
											"        \"data\": utils.generateBatchPayload(testerInput),\r",
											"        \"url\":pm.environment.get(\"server\")+\"/jobs/v2/connect/initiatejob\",\r",
											"        \"msg\":\"Generate data for getting individualId for job status api\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    \r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"   pm.variables.set(\"jobId\", outputData.jobId);\r",
											"   pm.variables.set(\"jobType\", \"\");\r",
											"}\r",
											"\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitBatchRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"        pm.response.to.be.json;\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,outputFile = \" + outputData.outputFile;\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate jobId,status and other fields comes populated in response.\",()=>{\r",
											"        pm.expect(outputData.jobId).to.equal(pm.variables.get(\"jobId\"));\r",
											"        utils.validateIfNonEmpty(outputData.status);\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}&jobType={{jobType}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										},
										{
											"key": "jobType",
											"value": "{{jobType}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8578](https://jira.cnvrmedia.net/browse/PID-8578)\n\n◼ NAME:  Job status request with empty batch type\n\n◼ DESCRIPTION:  Verify job status api with valid job id and empty batch type for job status, name of the file, path and other details.\n\n◼ EXPECTED RESULT:\nBy default job type is taken as identity and identity batch related batch fields returned such as\n1. Existing \"jobId\" is returned in response.\n2. \"status\" field comes populated.\n3.source file and outputfile name comes in response.\n\n◼ INPUT FIELDS:\n\"jobId\"\n\"jobType\"\n\n◼ OUTPUT FIELDS:\"\n\"jobId\"\n\"status\":\n\"sourceFile\":\n\"outputFile\":"
							},
							"response": []
						},
						{
							"name": "Realtime > job-status > (PID-8579) -   Job status request with job type 'CLIENT_SUPPRESSION'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8579\",\r",
											"                    sprint: \"21.03.03\",\r",
											"                    subject: \"realtime > job-status\",\r",
											"                    tags: \"#realtime#job-status#client-suppression\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"\r",
											"let header = {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"clientCode\": pm.environment.get(\"CCODE_BATCH\"),\r",
											"        };\r",
											"\r",
											"let input = {sourceFile: pm.environment.get(\"DATAFILE_JOBSTATUS_CLIENTSUPPRESSION\")};\r",
											"\r",
											"const postRequest = {\r",
											"    url: pm.environment.get(\"server\")+\"/jobs/v2/connect/custom/suppression\",\r",
											"    method: \"POST\",\r",
											"    header: header,\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(input)\r",
											"        }\r",
											"    };\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"(function submitBatchRequest(){\r",
											"        let msg = \"Generate data for client-suppression batch request to get jobId.\";\r",
											"        \r",
											"        skipTestIfNoClientCode = pm.environment.get(\"skipTestIfNoClientCode\");\r",
											"        \r",
											"        let clientCode = pm.environment.get(\"CCODE_BATCH\");\r",
											"        pm.sendRequest(postRequest, (error, response) => {\r",
											"            if(clientCode == \"\" &&  skipTestIfNoClientCode== \"true\"){\r",
											"            console.log(\"skip\");\r",
											"            }\r",
											"            else{\r",
											"            pm.test(\"Generating data for precondition. \" + msg, () => {\r",
											"                pm.expect(response).to.have.property('code', 202);\r",
											"                });\r",
											"            }\r",
											"            let outputData = response.json();\r",
											"            pm.variables.set(\"jobId\",outputData.jobId);\r",
											"            pm.variables.set(\"jobType\",\"CLIENT_SUPPRESSION\");\r",
											"        });\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"        pm.response.to.be.json;\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,outputFile = \" + outputData.outputFile;\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate jobId,status and other fields comes populated in response.\",()=>{\r",
											"        pm.expect(outputData.jobId).to.equal(pm.variables.get(\"jobId\"));\r",
											"        utils.validateIfNonEmpty(outputData.status);\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}&jobType={{jobType}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										},
										{
											"key": "jobType",
											"value": "{{jobType}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8579](https://jira.cnvrmedia.net/browse/PID-8579)\n\n◼ NAME:  Job status request with job type 'CLIENT_SUPPRESSION'\n\n◼ DESCRIPTION:  Verify job status api with valid job id and batch type as CLIENT_SUPPRESSION for job status, name of the file, path and other details.\n\n◼ EXPECTED RESULT:\nClient suppression batch related fields returned such as\n1. Existing \"jobId\" is returned in response.\n2. \"status\" field comes populated.\n3.source file and outputfile name comes in response.\n\n◼ INPUT FIELDS:\n\"jobId\"\n\"jobType\"\n\n◼ OUTPUT FIELDS:\"\n\"jobId\"\n\"status\":\n\"sourceFile\":\n\"outputFile\":"
							},
							"response": []
						},
						{
							"name": "Realtime > job-status > (PID-8580) -   Job status request with job type 'PRIVACY_ACCESS'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8580\",\r",
											"                    sprint: \"21.03.03\",\r",
											"                    subject: \"realtime > job-status\",\r",
											"                    tags: \"#realtime#job-status#privacy-access\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"\r",
											"let header = {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"clientCode\": pm.environment.get(\"CCODE_BATCH\"),\r",
											"        };\r",
											"\r",
											"let input = {sourceFile: pm.environment.get(\"DATAFILE_JOBSTATUS_PRIVACYACCESS\")};\r",
											"\r",
											"const postRequest = {\r",
											"    url: pm.environment.get(\"server\")+\"/jobs/v2/connect/privacy/access\",\r",
											"    method: \"POST\",\r",
											"    header: header,\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(input)\r",
											"        }\r",
											"    };\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"(function submitBatchRequest(){\r",
											"        let msg = \"Generate data for privacy-access batch request to get jobId.\";\r",
											"        \r",
											"        skipTestIfNoClientCode = pm.environment.get(\"skipTestIfNoClientCode\");\r",
											"        \r",
											"        let clientCode = pm.environment.get(\"CCODE_BATCH\");\r",
											"        pm.sendRequest(postRequest, (error, response) => {\r",
											"            if(clientCode == \"\" &&  skipTestIfNoClientCode== \"true\"){\r",
											"            console.log(\"skip\");\r",
											"            }\r",
											"            else{\r",
											"            pm.test(\"Generating data for precondition. \" + msg, () => {\r",
											"                pm.expect(response).to.have.property('code', 202);\r",
											"                });\r",
											"            }\r",
											"            let outputData = response.json();\r",
											"            pm.variables.set(\"jobId\",outputData.jobId);\r",
											"            pm.variables.set(\"jobType\",\"PRIVACY_ACCESS\");\r",
											"        });\r",
											"})();\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"        pm.response.to.be.json;\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,outputFile = \" + outputData.outputFile;\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate jobId,status and other fields comes populated in response.\",()=>{\r",
											"        pm.expect(outputData.jobId).to.equal(pm.variables.get(\"jobId\"));\r",
											"        utils.validateIfNonEmpty(outputData.status);\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}&jobType={{jobType}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										},
										{
											"key": "jobType",
											"value": "{{jobType}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8580](https://jira.cnvrmedia.net/browse/PID-8580)\n\n◼ NAME:  Job status request with job type 'PRIVACY_ACCESS'\n\n◼ DESCRIPTION:  Verify job status api with valid job id and batch type as PRIVACY_ACCESS for job status, name of the file, path and other details.\n\n◼ EXPECTED RESULT:\nPrivacy access batch related fields returned such as\n1. Existing \"jobId\" is returned in response.\n2. \"status\" field comes populated.\n3.source file and outputfile name comes in response.\n\n◼ INPUT FIELDS:\n\"jobId\"\n\"jobType\"\n\n◼ OUTPUT FIELDS:\"\n\"jobId\"\n\"status\":\n\"sourceFile\":\n\"outputFile\":"
							},
							"response": []
						},
						{
							"name": "Realtime > job-status > (PID-8581) -   Job status request with job type 'PRIVACY_SEARCH'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8581\",\r",
											"                    sprint: \"21.03.03\",\r",
											"                    subject: \"realtime > job-status\",\r",
											"                    tags: \"#realtime#job-status#privacy-search\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"\r",
											"let header = {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"clientCode\": pm.environment.get(\"CCODE_BATCH\"),\r",
											"        };\r",
											"\r",
											"let input = {sourceFile: pm.environment.get(\"DATAFILE_JOBSTATUS_PRIVACYSEARCH\")};\r",
											"\r",
											"const postRequest = {\r",
											"    url: pm.environment.get(\"server\")+\"/jobs/v2/connect/privacy/search\",\r",
											"    method: \"POST\",\r",
											"    header: header,\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(input)\r",
											"        }\r",
											"    };\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"(function submitBatchRequest(){\r",
											"        let msg = \"Generate data for privacy-search batch request to get jobId.\";\r",
											"        \r",
											"        skipTestIfNoClientCode = pm.environment.get(\"skipTestIfNoClientCode\");\r",
											"        \r",
											"        let clientCode = pm.environment.get(\"CCODE_BATCH\");\r",
											"        pm.sendRequest(postRequest, (error, response) => {\r",
											"            if(clientCode == \"\" &&  skipTestIfNoClientCode== \"true\"){\r",
											"            console.log(\"skip\");\r",
											"            }\r",
											"            else{\r",
											"            pm.test(\"Generating data for precondition. \" + msg, () => {\r",
											"                pm.expect(response).to.have.property('code', 202);\r",
											"                });\r",
											"            }\r",
											"            let outputData = response.json();\r",
											"            pm.variables.set(\"jobId\",outputData.jobId);\r",
											"            pm.variables.set(\"jobType\",\"PRIVACY_SEARCH\");\r",
											"        });\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"        pm.response.to.be.json;\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,outputFile = \" + outputData.outputFile;\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate jobId,status and other fields comes populated in response.\",()=>{\r",
											"        pm.expect(outputData.jobId).to.equal(pm.variables.get(\"jobId\"));\r",
											"        utils.validateIfNonEmpty(outputData.status);\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}&jobType={{jobType}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										},
										{
											"key": "jobType",
											"value": "{{jobType}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8581](https://jira.cnvrmedia.net/browse/PID-8581)\n\n◼ NAME:  Job status request with job type 'PRIVACY_SEARCH'\n\n◼ DESCRIPTION:  Verify job status api with valid job id and batch type as PRIVACY_SEARCH for job status, name of the file, path and other details.\n\n◼ EXPECTED RESULT:\nPrivacy search batch related fields returned such as\n1. Existing \"jobId\" is returned in response.\n2. \"status\" field comes populated.\n3.source file and outputfile name comes in response.\n\n◼ INPUT FIELDS:\n\"jobId\"\n\"jobType\"\n\n◼ OUTPUT FIELDS:\"\n\"jobId\"\n\"status\":\n\"sourceFile\":\n\"outputFile\":"
							},
							"response": []
						},
						{
							"name": "Realtime > job-status > (PID-8582) -   Job status request with job type 'PRIVACY_DELETE'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8582\",\r",
											"                    sprint: \"21.03.03\",\r",
											"                    subject: \"realtime > job-status\",\r",
											"                    tags: \"#realtime#job-status#privacy-delete\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"\r",
											"let header = {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"clientCode\": pm.environment.get(\"CCODE_BATCH\")\r",
											"        };\r",
											"\r",
											"let input = {sourceFile: pm.environment.get(\"DATAFILE_JOBSTATUS_PRIVACYDELETE\"),\"softDeleteDuration\" : 0};\r",
											"\r",
											"const postRequest = {\r",
											"    url: pm.environment.get(\"server\")+\"/jobs/v2/connect/privacy/delete\",\r",
											"    method: \"POST\",\r",
											"    header: header,\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(input)\r",
											"        }\r",
											"    };\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"(function submitBatchRequest(){\r",
											"        let msg = \"Generate data for privacy-delete batch request to get jobId.\";\r",
											"        \r",
											"        skipTestIfNoClientCode = pm.environment.get(\"skipTestIfNoClientCode\");\r",
											"        \r",
											"        let clientCode = pm.environment.get(\"CCODE_BATCH\");\r",
											"        pm.sendRequest(postRequest, (error, response) => {\r",
											"            if(clientCode == \"\" &&  skipTestIfNoClientCode== \"true\"){\r",
											"            console.log(\"skip\");\r",
											"            }\r",
											"            else{\r",
											"            pm.test(\"Generating data for precondition. \" + msg, () => {\r",
											"                pm.expect(response).to.have.property('code', 202);\r",
											"                });\r",
											"            }\r",
											"            let outputData = response.json();\r",
											"            pm.variables.set(\"jobId\",outputData.jobId);\r",
											"            pm.variables.set(\"jobType\",\"PRIVACY_DELETE\");\r",
											"        });\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"        pm.response.to.be.json;\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,outputFile = \" + outputData.outputFile;\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate jobId,status and other fields comes populated in response.\",()=>{\r",
											"        pm.expect(outputData.jobId).to.equal(pm.variables.get(\"jobId\"));\r",
											"        utils.validateIfNonEmpty(outputData.status);\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}&jobType={{jobType}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										},
										{
											"key": "jobType",
											"value": "{{jobType}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8582](https://jira.cnvrmedia.net/browse/PID-8582)\n\n◼ NAME:  Job status request with job type 'PRIVACY_DELETE'\n\n◼ DESCRIPTION:  Verify job status api with valid job id and batch type as PRIVACY_DELETE for job status, name of the file, path and other details.\n\n◼ EXPECTED RESULT:\nPrivacy delete batch related fields returned such as\n1. Existing \"jobId\" is returned in response.\n2. \"status\" field comes populated.\n3.source file and outputfile name comes in response.\n\n◼ INPUT FIELDS:\n\"jobId\"\n\"jobType\"\n\n◼ OUTPUT FIELDS:\"\n\"jobId\"\n\"status\":\n\"sourceFile\":\n\"outputFile\":"
							},
							"response": []
						},
						{
							"name": "Realtime > job-status > validation > (PID-8583) -   Job status request with invalid jobId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8583\",\r",
											"                    sprint: \"21.03.03\",\r",
											"                    subject: \"realtime > job-status\",\r",
											"                    tags: \"#realtime#job-status#invalid-jobId\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"\r",
											"\r",
											"pm.variables.set(\"jobId\",\"148695347556987\");\r",
											"pm.variables.set(\"jobType\",\"CLIENT_SUPPRESSION\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response Not Found(404)\", () => {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,outputFile = \" + outputData.outputFile;\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate errorMessage in response.\",()=>{\r",
											"        pm.expect(outputData.errorMessage).to.contains(\"Job not found for input jobId\")\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}&jobType={{jobType}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										},
										{
											"key": "jobType",
											"value": "{{jobType}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8583](https://jira.cnvrmedia.net/browse/PID-8583)\n\n◼ NAME:  Job status request with invalid jobId\n\n◼ DESCRIPTION:  Verify job status api with invalid job id given in the input.\n\n◼ EXPECTED RESULT:\n1.Returns response with status 400 -NOT FOUND\n2.It displays error message as \"Job not found for input jobId\"\n\n◼ INPUT FIELDS:\n\"jobId\"\n\"jobType\"\n\n◼ OUTPUT FIELDS:\"\n\"errorMessage\""
							},
							"response": []
						},
						{
							"name": "Realtime > job-status > validation > (PID-8584) -   Job status request with invalid jobType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response NOT FOUND(400)\", () => {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,outputFile = \" + outputData.outputFile;\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate errorMessage in response.\",()=>{\r",
											"        pm.expect(outputData.errorMessage).to.contains(\"JobType is not valid\")\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8584\",\r",
											"                    sprint: \"21.03.03\",\r",
											"                    subject: \"realtime > job-status\",\r",
											"                    tags: \"#realtime#job-status#invlid-jobType\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"let getPreRequest1 = () => {\r",
											"    let sourceFile = pm.environment.get(\"DATAFILE_JOBSTATUS_INVALIDJOBTYPE\");\r",
											"    let testerInput = {\"sourceFile\":sourceFile};\r",
											"    let requestDetail ={\r",
											"        \"clientCode\": pm.environment.get(\"CCODE_BATCH\"),\r",
											"        \"data\": utils.generateBatchPayload(testerInput),\r",
											"        \"url\":pm.environment.get(\"server\")+\"/jobs/v2/connect/initiatejob\",\r",
											"        \"msg\":\"Generate data for getting individualId for job status api\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"   pm.variables.set(\"jobId\", outputData.jobId);\r",
											"   pm.variables.set(\"jobType\", \"DMS_INJEST\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitBatchRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}&jobType={{jobType}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										},
										{
											"key": "jobType",
											"value": "{{jobType}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8584](https://jira.cnvrmedia.net/browse/PID-8584)\n\n◼ NAME:  Job status request with invalid jobType\n\n◼ DESCRIPTION:  Verify job status api with invalid job type given in the input.\nexample:DOTOMI_INGEST,DOTOMI_LOOKUP etc\n\n◼ EXPECTED RESULT:\n1.Returns response with status 400 -BAD REQUEST\n2.It displays error message as \"JobType is not valid\"\n\n◼ INPUT FIELDS:\n\"jobId\"\n\"jobType\"\n\n◼ OUTPUT FIELDS:\"\n\"errorMessage\""
							},
							"response": []
						},
						{
							"name": "realtime > job-status > business-match >(PID-8736)-Job status request to verify businessConsolidationFile field in response.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//===================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8736\",\r",
											"                    sprint: \"21.03.06\",\r",
											"                    subject: \"realtime > job-status > business-match\",\r",
											"                    tags: \"#realtime#job-status#businessMatch\"\r",
											"                })\r",
											"    }); \r",
											"})();\r",
											"//==================================================================\r",
											"const utils = eval(globals.connectUtils);\r",
											"//==================================================================\r",
											"let getPreRequest1 = () => {\r",
											"    let sourceFile = pm.environment.get(\"DATAFILE_JOB_STATUS_BUSINESS_MATCH\");\r",
											"    let testerInput = {\"sourceFile\":sourceFile};\r",
											"    let requestDetail ={\r",
											"        \"clientCode\": pm.environment.get(\"CCODE_B2B_BATCH\"),\r",
											"        \"data\": utils.generateBatchPayload(testerInput),\r",
											"        \"url\":pm.environment.get(\"server\")+\"/jobs/v2/connect/initiatejob\",\r",
											"        \"msg\":\"Generate data for getting individualId for job status api\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"   pm.variables.set(\"jobId\", outputData.jobId);\r",
											"   pm.variables.set(\"jobType\", \"\");\r",
											"}\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitBatchRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"//=======================================================================================\r",
											"(function validateRequest(){\r",
											"    let msg = \"(1)- Validate request => [method=GET, clientCode=\" + pm.request.headers.get(\"clientCode\") ;\r",
											"    pm.test(msg,()=>{\r",
											"        pm.expect(pm.request.method).to.equal(\"GET\");    \r",
											"        pm.expect(pm.request.headers.get(\"clientCode\")).to.not.equal(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"(2)- Validating response OK(200)\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"        pm.response.to.be.json;\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let outputDataMsg = \"(3)-Check output data => [ jobId = \" + outputData.jobId + \" ,status = \" + outputData.status+ \" ,sourceFile = \" + outputData.sourceFile+ \" ,businessConsolidationsFile = \" + outputData.businessConsolidationsFile + \" ]\";\r",
											"    pm.test(outputDataMsg, ()=>{});\r",
											"    \r",
											"    pm.test(\"(4)- Validate jobId and businessConsolidationsFile fields comes populated in response.\",()=>{\r",
											"        pm.expect(outputData.jobId).to.equal(pm.variables.get(\"jobId\"));\r",
											"        pm.expect(outputData.hasOwnProperty('businessConsolidationsFile')).to.be.true;\r",
											"    })\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_B2B_BATCH}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server}}/jobs/v2/connect/jobstatus?jobId={{jobId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"jobstatus"
									],
									"query": [
										{
											"key": "jobId",
											"value": "{{jobId}}"
										}
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8736](https://jira.cnvrmedia.net/browse/PID-8736)\n\n◼ NAME: Job status request to verify businessConsolidationFile field in response.\n\n◼ DESCRIPTION:\n\nJob status request is submitted with jobId to verify businessConolidationFile field in response.\n\n◼ PRECONDITION\njobId is generated by sumbitting batch job with input file which contains consolidation scenarios.\n\n◼ EXPECTED RESULT:\n\nIf clientCode is enabled for b2b, businessConsolidationField contains bxref file location, else the field will be empty in response.\n\n◼ INPUT FIELDS:\n\n◼ OUTPUT FIELDS:\n\nbusinessConsolidationFile"
							},
							"response": []
						},
						{
							"name": "terminate-job-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.variables.set(\"folder\", \"job-status\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DEFECTS",
					"item": [
						{
							"name": "Realtime > PID-8602 > name_matching",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"\r",
											"const utils = eval(globals.connectUtils);\r",
											"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"\r",
											"//===============================================================================================================\r",
											" requestType = pm.variables.get(\"requestType\");\r",
											"\r",
											"//===============================================================================================================\r",
											"if(requestType == \"FULL_NAME_MATCH_FOUND_REQUEST\") {\r",
											"    (function verifyAll_noMatchFoundRequest() {\r",
											"        utils.doTestLogging({msg: \"CASE-1 : Name Matching when only lastName match found.\", type : \"PRINT_MSG\"});\r",
											"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
											"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['addressLine1', 'postalCode', 'fullName'] });\r",
											"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'fullName'] });\r",
											"         utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
											"            fields : ['addressLine1', 'postalCode', 'fullName'],\r",
											"            existingRecords : { \"address-match-record-with-only-last-name\" : pm.variables.get('matchingRecord')} \r",
											"        });\r",
											"        utils.doTestLogging({msg : \"(6)- Validate Output > Existing individualId returns in the output.\",\r",
											"             type : \"VALIDATE_EXISTINGINDV\", existingRecord : pm.variables.get('matchingRecord')});\r",
											"    })();\r",
											"    (function setNextRequest() {\r",
											"        let matchingRecord = pm.variables.get(\"matchingRecord\");\r",
											"        let addressLine1 = pm.variables.get(\"addressLine1\");\r",
											"        let postalCode = pm.variables.get(\"postalCode\");\r",
											"        pm.variables.clear();\r",
											"        pm.variables.set(\"matchingRecord\",matchingRecord);\r",
											"        pm.variables.set(\"addressLine1\",addressLine1);\r",
											"        pm.variables.set(\"postalCode\",postalCode);\r",
											"        pm.variables.set(\"requestType\", \"FULL_NAME_SECOND_MATCH_FOUND_REQUEST\");\r",
											"        postman.setNextRequest(pm.info.requestName);    \r",
											"    })();\r",
											"}\r",
											"//===============================================================================================================\r",
											"if(requestType == \"FULL_NAME_SECOND_MATCH_FOUND_REQUEST\") {\r",
											"    (function verifyAll_noMatchFoundRequest() {\r",
											"        utils.doTestLogging({msg: \"CASE-2 : Second Name match not found.\", type : \"PRINT_MSG\"});\r",
											"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
											"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['addressLine1', 'postalCode', 'fullName'] });\r",
											"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'fullName'] });\r",
											"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
											"            fields : ['addressLine1', 'postalCode', 'fullName'],\r",
											"            existingRecords : { \"address-match-record\" : pm.variables.get('matchingRecord')} \r",
											"        });\r",
											"        pm.test(\"(6)- Validate Output > New individualId returns in the output.\", function() {\r",
											"            pm.expect(outputData.individualId).to.not.equal(pm.variables.get('matchingRecord').individualId)\r",
											"        })     \r",
											"    })();\r",
											"    (function setNextRequest() {\r",
											"        pm.variables.clear();\r",
											"    })();\r",
											"}\r",
											"\r",
											"//=================================================================================================================="
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8363\",\r",
											"                    sprint: \"21.02.06\",\r",
											"                    subject: \"Realtime > Identity-search\",\r",
											"                    tags: \"#realtime#identitySearch#nameOverMatch\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//=======================================================================================================================================//\r",
											"\r",
											"const utils = eval(globals.connectUtils);\r",
											"//============================================================================================================================\r",
											"const postalCode = '97901'\r",
											"const addressLine1 = utils.getAddressLine1();\r",
											"const fullName = 'NICKSON';\r",
											"let requestType = \"\";\r",
											"//==============================================================================================================\r",
											"( function initialize (){\r",
											"        requestType = pm.variables.get(\"requestType\");\r",
											"        if(typeof(requestType) == 'undefined') {\r",
											"            requestType = \"FULL_NAME_MATCH_FOUND_REQUEST\";\r",
											"        }\r",
											"})();\r",
											"    \r",
											"//==============================================================================================================\r",
											"if(requestType == \"FULL_NAME_MATCH_FOUND_REQUEST\") {\r",
											"    (function createMatchingRecord() {   \r",
											"    pm.variables.set('postalCode', postalCode)\r",
											"    pm.variables.set('addressLine1', addressLine1)\r",
											"    let requestDetail = {\r",
											"        \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
											"        \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
											"        \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
											"        \"testerInput\":{'fullName': fullName, 'addressLine1': addressLine1, 'postalCode': postalCode} \r",
											"    };\r",
											"    request = JSON.parse(JSON.stringify(requestDetail));\r",
											"            pm.sendRequest(utils.constructIdentityRequest(request), (error, response) => {            \r",
											"                pm.variables.set(\"matchingRecord\", utils.getOutputData(response.json()));\r",
											"            });            \r",
											"    })();\r",
											"    pm.variables.set('fullName', 'RALPH' + \" \" + fullName);\r",
											"    pm.variables.set(\"requestType\", 'FULL_NAME_MATCH_FOUND_REQUEST');\r",
											"}\r",
											"\r",
											"//==============================================================================================================\r",
											"if(requestType == \"FULL_NAME_SECOND_MATCH_FOUND_REQUEST\") { \r",
											"    pm.variables.set('fullName', 'ADOLF' + \" \" + fullName);\r",
											"    pm.variables.set(\"requestType\", 'FULL_NAME_SECOND_MATCH_FOUND_REQUEST');\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"type": "text",
										"value": "{{CCODE_IDENTITY_ENABLED}}"
									},
									{
										"key": "accessToken",
										"type": "text",
										"value": "{{accessToken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"countryCode\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/v2/connect/realtime/service",
									"host": [
										"{{server}}"
									],
									"path": [
										"v2",
										"connect",
										"realtime",
										"service"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8602](https://jira.cnvrmedia.net/browse/PID-7007)\n\n&#9724; **NAME:** Connect-realtime request -> name enrichment - matching\n\n&#9724; **DESCRIPTION:** Connect-realtime request -> name enrichment - matching.\nWhen name enrichment happens, empty first or empty last names should not make it into the profile as name variations since it may lead to over matching. Below are the expected behavior.\n\n&#9724; **EXPECTED RESULT:**\n  ||SMITH - ID 1\nJOHN||SMITH - Cross match FM - ID 1 (Profile has JOHN||SMITH and ||SMITH)\nexpected:  \n||SMITH - ID 1\nJOHN||SMITH - Cross match FM - ID 1 (Profile has only JOHN||SMITH)\nBOB||SMITH  - ID 2\n\n&#9724; **INPUT FIELDS:**\n*   \"fullName\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
							},
							"response": []
						},
						{
							"name": "USBatch request with special characters in inputfile.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"var currentJobId = JSON.parse(responseBody).jobId;\r",
											"utils.validateBatchResponse(currentJobId);\r",
											"if(typeof(currentJobId) != 'undefined') {\r",
											"    input = {\r",
											"        \"currentJobId\": currentJobId, \r",
											"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8593\",\r",
											"                    sprint: \"21.02.05\",\r",
											"                    subject: \"USBatch > validation\",\r",
											"                    tags: \"#USBatch#Validation\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"sourceFile\": \"{{DATAFILE_USBATCH_SPECIAL_CHAR}}\",\r\n\"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\",\r\n\"enableNcoa\": \"no\",\r\n \"enableDsf2\": \"no\",\r\n \"enableDsfWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8593](https://jira.cnvrmedia.net/browse/PID-8593)\n\n&#9724; **NAME:** USBatch request with special characters in inputfile.\n\n&#9724; **DESCRIPTION:**\n*    US-Batch-validating job for special characters in address detail.\n\n&#9724; **PRECONDITION**\n*   The file \"DATAFILE_USBATCH_SPECIAL_CHAR\" is present in S3 location specified below.\n*   Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n* JobId gets populated in response without raising any error for file with special characters.\n*  S3 outbound location:\n//identity-app-data-stage/AIM_JOBS/OUTBOUND\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
							},
							"response": []
						},
						{
							"name": "Validate outputfile name for DMS batch request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"var currentJobId = JSON.parse(responseBody).jobId;\r",
											"utils.validateBatchResponse(currentJobId);\r",
											"if(typeof(currentJobId) != 'undefined') {\r",
											"    input = {\r",
											"        \"currentJobId\": currentJobId, \r",
											"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"    \r",
											"    let validate = (jobStatusDetails) =>{\r",
											"        pm.test(\"Validate output -> the output file name contains input file name in it(in inputfilname.dms format).\",()=> {\r",
											"            var sourceFile = JSON.parse(pm.request.body.raw).sourceFile;\r",
											"            var outputFile = jobStatusDetails.outputFile;\r",
											"            pm.expect(outputFile).to.include(sourceFile);\r",
											"        });\r",
											"    }\r",
											"    utils.getDMSBatchOutput(input,validate);\r",
											"    \r",
											"    \r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8337\",\r",
											"                    sprint: \"21.03.01\",\r",
											"                    subject: \"DmsBatch > validation\",\r",
											"                    tags: \"#DMSBatch#filename#validation\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_DMSBATCH}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"sourceFile\": \"{{DATAFILE_DMSBATCH_FILENAME_VALIDATION}}\",\r\n\"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n\"enablePac\": \"no\",\r\n\"enablePcoa\": \"no\",\r\n\"enableNcoa\": \"no\",\r\n \"enableDsf2\": \"no\",\r\n \"enableDsfWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8337](https://jira.cnvrmedia.net/browse/PID-8337)\n\n&#9724; **NAME:** Validate outputfile name for DMS batch request\n\n&#9724; **DESCRIPTION:**\n*    DMS-Batch request to validate output file name.\n\n&#9724; **PRECONDITION**\n*   ENABLE_DOTOMI = \"Y\", for clientCode in \"aim_client_profile\" table.\n*   The file \"DATAFILE_DMSBATCH_FILENAME_VALIDATION\" is present in S3 location specified below.\n*   Inbound S3 location Path: //identity-app-data-stage/AIM_JOBS/INBOUND\n\n&#9724; **EXPECTED RESULT:**\n*    JobId gets generated and returned in the response.\n*    Job status is verified using job status end point and comes as 'COMPLETED' after the job is done.\n*   The .dms and .dat file should be generated at S3 location.\n*    The output fileName contains input filename in it(in inputfilename.dms format).\n*   S3 Outbound Location://identity-app-data-stage/AIM_JOBS/OUTBOUND\n*   Dotomi Output File Path: s3://identity-app-data-stage/DTM_JOBS/\n\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId\n*   outputFile"
							},
							"response": []
						},
						{
							"name": "Realtime > PID-8552 >Connect realtime request to validate empty name variation found in profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8511\",\r",
											"                    sprint: \"21.03.02\",\r",
											"                    subject: \"realtime\",\r",
											"                    tags: \"#RealTime#Identity#nameVariation\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"//==============================================================================================================\r",
											"( function initialize (){\r",
											"        requestType = pm.variables.get(\"requestType\");\r",
											"        if(typeof(requestType) == 'undefined') {\r",
											"            requestType = \"CONSOLIDATION_SCENARIO\";\r",
											"        }\r",
											"})();\r",
											"\r",
											"let requestDetail1 ={\r",
											"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
											"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
											"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
											"    \"testerInput\": {}\r",
											"};\r",
											"\r",
											"let requestDetail2 ={\r",
											"    \"url\" : pm.environment.get(\"URL_REALTIME\"),\r",
											"    \"clientCode\" : pm.environment.get(\"CCODE_IDENTITY_ENABLED\"),\r",
											"    \"apiKey\": pm.environment.get(\"XAPIKEY_IDENTITY_ENABLED\"),\r",
											"    \"testerInput\": {}\r",
											"};\r",
											"\r",
											"//==============================================================================================================\r",
											"if(requestType == \"CONSOLIDATION_SCENARIO\") {\r",
											"    (function createMatchingRecords() {  \r",
											"        requestDetail1.testerInput = {\r",
											"            \"fullName\": utils.getRandomDataForField(\"fullName\"),\r",
											"            \"emailAddress1\": utils.getRandomDataForField(\"emailAddress1\")\r",
											"        }\r",
											"        requestDetail2.testerInput = {\r",
											"            \"fullName\":\"\",\r",
											"            \"emailAddress1\": utils.getRandomDataForField(\"emailAddress1\")\r",
											"        }\r",
											"        pm.sendRequest(utils.constructIdentityRequest(requestDetail1), (error, response) => {            \r",
											"            let matchRecord1 = utils.getOutputData(response.json());\r",
											"            pm.variables.set(\"matchRecord1\",matchRecord1)\r",
											"            pm.sendRequest(utils.constructIdentityRequest(requestDetail2), (error, response) => {  \r",
											"                let matchRecord2 = utils.getOutputData(response.json());\r",
											"                pm.variables.set(\"matchRecord2\",matchRecord2)\r",
											"\r",
											"                testerInput = {\r",
											"                    \"fullName\":\"\",\r",
											"                    \"emailAddress1\": matchRecord1.emailAddress1,\r",
											"                    \"emailAddress2\": matchRecord2.emailAddress1\r",
											"                }\r",
											"                utils.setRandomDataForRequest(testerInput);\r",
											"            });\r",
											"        });\r",
											"    })();     \r",
											"    pm.variables.set(\"requestType\", 'CONSOLIDATION_SCENARIO');       \r",
											"}\r",
											"\r",
											"\r",
											"//==============================================================================================================\r",
											"if(requestType == \"DIFFERENT_ID_SCNEARIO\") { \r",
											"    let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
											"    let testerInput = {\"emailAddress1\": matchRecord1.emailAddress1,\"emailAddress2\":\"\"};\r",
											"    utils.setRandomDataForRequest(testerInput);\r",
											"    pm.variables.set(\"requestType\", 'DIFFERENT_ID_SCNEARIO');\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"\r",
											"const utils = eval(globals.connectUtils);\r",
											"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"\r",
											"//===============================================================================================================\r",
											" requestType = pm.variables.get(\"requestType\");\r",
											"\r",
											"//===============================================================================================================\r",
											"if(requestType == \"CONSOLIDATION_SCENARIO\") {\r",
											"    (function verifyAll_noMatchFoundRequest() {\r",
											"        \r",
											"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
											"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
											"\r",
											"        utils.doTestLogging({msg: \"CASE-1 : Consolidation Scenario for given input.\", type : \"PRINT_MSG\"});\r",
											"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
											"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName', 'emailAddress1','emailAddress2'] });\r",
											"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'fullName', 'emailAddress1','emailAddress2','consolidatedIds'] });\r",
											"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
											"            fields : ['fullName', 'emailAddress1'],\r",
											"            existingRecords : { \"first prerequest\" : matchRecord1,\"second prerequest\" : matchRecord2} \r",
											"        });\r",
											"        if(matchRecord1.individualId < matchRecord2.individualId){\r",
											"            utils.doTestLogging({msg : \"(6)- Validate Output > Consolidation happens for given input and preRequests.\",\r",
											"         type : \"VALIDATE_CONSOLIDATION\", existingRecords :[matchRecord1, matchRecord2]});\r",
											"        }\r",
											"        else{\r",
											"            pm.test( \"(6)- Validate Output > Consolidation will not happen if first request has higher individualId then second ,[first request individualId = \"+matchRecord1.individualId +\", second request individualId = \" + matchRecord2.individualId+\"]\", () => {\r",
											"                pm.expect((outputData.consolidatedIds).length).to.equal(0);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"        \r",
											"    })();\r",
											"    (function setNextRequest() {\r",
											"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
											"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
											"        pm.variables.clear();\r",
											"        pm.variables.set(\"matchRecord1\",matchRecord1);\r",
											"        pm.variables.set(\"matchRecord2\",matchRecord2);\r",
											"        pm.variables.set(\"requestType\", \"DIFFERENT_ID_SCNEARIO\");\r",
											"        postman.setNextRequest(pm.info.requestName);    \r",
											"    })();\r",
											"}\r",
											"//===============================================================================================================\r",
											"if(requestType == \"DIFFERENT_ID_SCNEARIO\") {\r",
											"    (function verifyAll_noMatchFoundRequest() {\r",
											"        let matchRecord1 = pm.variables.get(\"matchRecord1\");\r",
											"        let matchRecord2 = pm.variables.get(\"matchRecord2\");\r",
											"\r",
											"        utils.doTestLogging({msg: \"CASE-2 : \", type : \"PRINT_MSG\"});\r",
											"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\", request: pm.request});\r",
											"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['addressLine1', 'postalCode', 'fullName'] });\r",
											"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['individualId', 'fullName'] });\r",
											"        utils.doTestLogging({msg : \"(5)- Check existing data\", type : \"CHECK_EXISTINGDATA\", \r",
											"            fields : ['fullName', 'emailAddress1'],\r",
											"            existingRecords : { \"first prerequest\" : matchRecord1,\"second prerequest\" : matchRecord2} \r",
											"        });\r",
											"        utils.doTestLogging({msg : \"(5)- Validate Output > New individualId returns in the output.\", type : \"VALIDATE_EXISTING_DIFFINDVID\", existingRecord :matchRecord1});\r",
											"        \r",
											"    })();\r",
											"    \r",
											"    (function setNextRequest() {\r",
											"        pm.variables.clear();\r",
											"    })();\r",
											"}\r",
											"\r",
											"//=================================================================================================================="
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"type": "text",
										"value": "{{CCODE_IDENTITY_ENABLED}}"
									},
									{
										"key": "accessToken",
										"type": "text",
										"value": "{{accessToken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"addressLine1\": \"\",\r\n        \"emailAddress1\": \"{{emailAddress1}}\",\r\n        \"emailAddress2\": \"{{emailAddress2}}\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/v2/connect/realtime/service",
									"host": [
										"{{server}}"
									],
									"path": [
										"v2",
										"connect",
										"realtime",
										"service"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8552](https://jira.cnvrmedia.net/browse/PID-8552)\n\n&#9724; **NAME:** Connect realtime request to validate empty name variation found in profile\n\n&#9724; **DESCRIPTION:** Connect-realtime request with \"emailAddress1\" and different fullName of that matching record with emailAddress1, to verify empty name variations are not inserted if other name variations exists.\n\n&#9724; **PRECONDITION:**\n*    Identity record exists with fullName and emailAddress1.\n*    Identity record exists with empty name and different emailAddress1.\n*    Identity record exists with empty fullName and both emailAddresses in emailAddress1 and emailAddress2.\n\n&#9724; **EXPECTED RESULT:**\n*   New indiviual id is returned as empty name variation is not inserted in profile.\n\n&#9724; **INPUT FIELDS:**\n*   \"emailAddress1\"\n*   \"fullName\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"individualId\""
							},
							"response": []
						},
						{
							"name": "Realtime > address-hygiene> (PID-8594) > Identity-request with address hygiene when addressline1 contains special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//--------------------------------\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"\r",
											"//let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation= () => {\r",
											"    utils.validatePOSTRequest(pm.environment.get(\"CCODE_IDENTITY_ENABLED\"));\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation =() => {\r",
											"    pm.test(\"Validate Input -> addressLine1 is provided in input.\", utils.validateIfNonEmpty(inputData.addressLine1));\r",
											"\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"   \r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation= () => {\r",
											"    pm.test(\"Validate output ->  addressLine1 comes in the output.\",()=>{\r",
											"    utils.validateIfNonEmpty(pm.expect(outputData.addressLine1));\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = ()=> {\r",
											"  let inputDataToDisplay = \r",
											"   \"[\"\r",
											"    + \"countryCode=\" + inputData.countryCode + \", \" \r",
											"    + \"addressLine1=\" + inputData.addressLine1\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"\r",
											"this.defineOutputDataToDisplay = ()=> {\r",
											"    let outputDataToDisplay =\r",
											"    \"[\"\r",
											"     + \"countryCode=\" + outputData.countryCode + \", \" \r",
											"     + \"addressLine1=\" + outputData.addressLine1 +\", \" \r",
											"        +\"]\";\r",
											"    return outputDataToDisplay;\r",
											"};\r",
											"\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    \r",
											"};\r",
											"\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8226\",\r",
											"                    sprint: \"21.03.02\",\r",
											"                    subject: \"realtime > address-hygiene\",\r",
											"                    tags: \"#RealTime#Identity#addresshygiene\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {\"addressLine1\":\"7E45GN9FG50 Name: ROSE HANCOCK Birth Date: 11/25/1941 Date of Death: Sex: F Address: 8810 STEPHEN F AUSTIN RD FREEPORT, TX 77541-9782 Most recent State: TX (45) Most recent County: BRAZORIA (180) Enrollment Information fo\"};\r",
											"    utils.setRandomDataForRequest(testerInput);\r",
											"}\r",
											"\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"type": "text",
										"value": "{{CCODE_IDENTITY_ENABLED}}"
									},
									{
										"key": "accessToken",
										"type": "text",
										"value": "{{accessToken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputRecord\": {\r\n        \"fullName\": \"\",\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"emailAddress1\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"countryCode\": \"\",\r\n        \"gender\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enableAddressHygiene\": \"Yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/v2/connect/realtime/service",
									"host": [
										"{{server}}"
									],
									"path": [
										"v2",
										"connect",
										"realtime",
										"service"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8594](https://jira.cnvrmedia.net/browse/PID-8594)\n\n&#9724; **NAME:** Identity-request with address hygiene when addressline1 contains special characters\n\n&#9724; **DESCRIPTION:** Identity-request's submitted with addressLine1 that contains special characters.\n\n&#9724; **EXPECTED RESULT:**\n*   Identity request gets executed successfully.\n*   addressLine1 comes non empty in response.\n\n&#9724; **INPUT FIELDS:**\n*   \"addressLine1\"\n*   \"postalCode\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"addressHygieneOutput\" -> standardizedAddress(addressLine1, postalCode)"
							},
							"response": []
						},
						{
							"name": "UsBatch_PID-8005_WhenInvalidClientCodeProvided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" const utils = eval(globals.connectUtils);\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"utils.validateBadRequestResponse();\r",
											"pm.test(\"When the Client Code is invalid, an error message is displayed\", function(){\r",
											"pm.expect(jsonData.errorMessage).to.equal(\"Provided client code { smoke_test123 } does not exist.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8005\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"Batch_invalid_clientCode\",\r",
											"                    tags: \"#USBatch#invalidClientCode\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"type": "text",
										"value": "smoke_test123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_USBATCH_INVALID_CLIENT_CODE}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDsf2\": \"no\",\r\n \"enableDsfWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"no\",\r\n\"enableGlobalSuppression\": \"no\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8005](https://jira.cnvrmedia.net/browse/PID-8337)\n\n&#9724; **NAME:** US Batch with Invalid Client Code\n\n&#9724; **DESCRIPTION:**\n*  Error found when job triggered with a client code which does not exists.\n\n&#9724; **PRECONDITION**\n*   The file <1M.dat> file should be present in the below S3 location.\n//identity-app-data-stage/AIM_JOBS/INBOUND\n*  The provided client code should be invalid and should not exists.\n\n&#9724; **EXPECTED RESULT:**\n* An exception should occur if the clientCode is invalid and should show the error message.\nError Message: \n\"Provided client code [TEST123] does not exist.\"\n* The .dms and .dat file gets generated at S3 location.\n*  S3 outbound location:\n//identity-app-data-stage/AIM_JOBS/OUTBOUND\n*  Dotomi output file path:\ns3://identity-app-data-stage/DTM_JOBS/\n\n&#9724; **INPUT FIELDS:**\n\n&#9724; **OUTPUT FIELDS:**\n*   jobId"
							},
							"response": []
						},
						{
							"name": "Realtime > address-hygiene > (PID-8596) > Verify MultiType and ageoSta attributes are not missing in response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"const utils = eval(globals.connectUtils);\r",
											"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"\r",
											"//===============================================================================================================\r",
											"(function verifyMissingFieldsArePopulated() {\r",
											"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
											"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['countryCode', 'fullName','addressLine1','postalCode'] });\r",
											"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['standardizedAddressMultiType','bestAddressMultiType','standardizedAddressAgeoSta','bestAddressAgeoSta'] });\r",
											"    pm.test(\"(5) Fields 'bestAddress.multiType','standardizedAddress.multiType', are returned in response\", ()=>{\r",
											"    pm.expect(outputData.standardizedAddressMultiType).to.not.equal(undefined);\r",
											"    pm.expect(outputData.bestAddressMultiType).to.not.equal(undefined);\r",
											"    });\r",
											"    pm.test(\"(6) Fields 'bestAddress.ageoSta','standardizedAddress.ageoSta',are returned in response\", ()=>{\r",
											"        pm.expect(outputData.bestAddressAgeoSta).to.not.equal(undefined);\r",
											"        pm.expect(outputData.standardizedAddressAgeoSta).to.not.equal(undefined);\r",
											"    })\r",
											"\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7878\",\r",
											"                    sprint: \"21.01.02\",\r",
											"                    subject: \"realtime > address-hygiene\",\r",
											"                    tags: \"#realtime#multiType#ageoSta\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//=======================================================================================================================================//\r",
											"\r",
											"const utils = eval(globals.connectUtils);\r",
											"//============================================================================================================================\r",
											"(function saveDataForCurrentRequest() {                        \r",
											"    pm.variables.set(\"fullName\",  utils.getRandomDataForField('fullName'));\r",
											"    pm.variables.set(\"addressLine1\",  utils.getRandomDataForField('addressLine1'));\r",
											"    pm.variables.set(\"postalCode\",  utils.getRandomDataForField('postalCode'));                   \r",
											"})();\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_IDENTITY_ENABLED}}",
										"type": "text"
									},
									{
										"key": "accessToken",
										"value": "{{accessToken}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/v2/connect/realtime/service",
									"host": [
										"{{server}}"
									],
									"path": [
										"v2",
										"connect",
										"realtime",
										"service"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8596](https://jira.cnvrmedia.net/browse/PID-8596)\n\n&#9724; **NAME:** Identity request verify MultiType and ageoSta attributes are not missing in response.\n\nMissing fields in realtime API response\n\n&#9724; **DESCRIPTION:**\nVerify the fields bestAddress.MultiType, standardizedAddress.MultiType, bestAddress.ageoSta and standardizedAddress.ageoSta  \nare not missing in the response.\n\n&#9724; **EXPECTED RESULT:**\n* bestAddressMultiType, standardizedAddressMultiType fields are returned in response.\n* bestAddress.ageoSta, standardizedAddress.ageoSta field\nare not missing in the response.\n\n&#9724; **OUTPUT FIELD:**\n* addressHygieneOutput.bestAddress.multiType\n* addressHygieneOutput.standardizedAddress.ageoSta\n* addressHygieneOutput.bestAddress.multiType\n* addressHygieneOutput.standardizedAddress.ageoSta"
							},
							"response": []
						},
						{
							"name": "Realtime > address-hygiene -(PID-8599) > Identity-request validate mailabilityScore field comes in respons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"const utils = eval(globals.connectUtils);\r",
											"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"\r",
											"//===============================================================================================================\r",
											"(function verifyMissingFieldsArePopulated() {\r",
											"    utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
											"    utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"    utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName'] });\r",
											"    utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['standardizedAddressMailabilityScore', 'bestAddressMailabilityScore'] });\r",
											"    pm.test(\"(5) Fields 'bestAddress.mailabilityScore','standardizedAddress.mailabilityScore',comes populated with non-empty value in response\", ()=>{\r",
											"        utils.validateIfNonEmpty(outputData.standardizedAddressMailabilityScore);\r",
											"        utils.validateIfNonEmpty(outputData.bestAddressMailabilityScore);\r",
											"    });\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8054\",\r",
											"                    sprint: \"21.02.05\",\r",
											"                    subject: \"realtime > address-hygiene\",\r",
											"                    tags: \"#realtime#addressHygiene#mailablityScore\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//=======================================================================================================================================//\r",
											"\r",
											"const utils = eval(globals.connectUtils);\r",
											"//============================================================================================================================\r",
											"(function saveDataForCurrentRequest() {                        \r",
											"    pm.variables.set(\"fullName\",  utils.getRandomDataForField('fullName'));;                   \r",
											"})();\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_IDENTITY_ENABLED}}",
										"type": "text"
									},
									{
										"key": "accessToken",
										"value": "{{accessToken}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"familyName\": \"\",\r\n        \"fullName\": \"{{fullName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/v2/connect/realtime/service",
									"host": [
										"{{server}}"
									],
									"path": [
										"v2",
										"connect",
										"realtime",
										"service"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8054](https://jira.cnvrmedia.net/browse/PID-8054)\n\n&#9724; **NAME:** Identity-request validate mailabilityScore field comes in response\n\n&#9724; **DESCRIPTION** Identity-request - verify mailabilityScore comes populated in response.\n\n&#9724; **EXPECTED RESULT** \n* mailabilityScore field comes populated with non-empty value.\n\n&#9724; **OUTPUT FIELD** \n* addressHygieneOutput.standardizedAddress.mailabilityScore\n* \naddressHygieneOutput.bestAddress.mailabilityScore"
							},
							"response": []
						},
						{
							"name": "Realtime > name-hygiene > (PID-8598) > validate prefixName provided in input request is not missing in response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"8052\",\r",
											"                    sprint: \"21.01.05\",\r",
											"                    subject: \"realtime > name-hygiene\",\r",
											"                    tags: \"#realtime#nameHygiene#prefixName\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//=======================================================================================================================================//\r",
											"\r",
											"const utils = eval(globals.connectUtils);\r",
											"//============================================================================================================================\r",
											"    let fullNameList = [\r",
											"        {\r",
											"            \"fullName\":\"\",\r",
											"            \"prefixName\":\"Sister\",\r",
											"            \"givenName\":\"RICHARD\",\r",
											"            \"middleName\":\"\",\r",
											"            \"familyName\":\"MORRIS\"\r",
											"        },\r",
											"        {\r",
											"            \"fullName\":\"\",\r",
											"            \"prefixName\":\"SR\",\r",
											"            \"givenName\":\"FRANCIS\",\r",
											"            \"middleName\":\"\",\r",
											"            \"familyName\":\"COUGHLIN\"\r",
											"        },\r",
											"        {\r",
											"            \"fullName\":\"\",\r",
											"            \"prefixName\":\"SRA\",\r",
											"            \"givenName\":\"SHERRIE\",\r",
											"            \"middleName\":\"\",\r",
											"            \"familyName\":\"HOLDER-WATTS\"\r",
											"        },\r",
											"        {\r",
											"            \"fullName\":\"\",\r",
											"            \"prefixName\":\"Lady\",\r",
											"            \"givenName\":\"KAREN\",\r",
											"            \"middleName\":\"\",\r",
											"            \"familyName\":\"KONDEL\"\r",
											"        }\r",
											"    ]\r",
											"    let name = fullNameList[_.random(0, fullNameList.length-1)];\r",
											"    pm.variables.set(\"prefixName\",  name.prefixName);                   \r",
											"    pm.variables.set(\"givenName\", name.givenName); \r",
											"    pm.variables.set(\"familyName\", name.familyName);                   \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"const utils = eval(globals.connectUtils);\r",
											"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"\r",
											"//===============================================================================================================\r",
											"(function verifyAll_missingPrefixValidation() {\r",
											"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
											"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName','prefixName', 'givenName','middleName', 'familyName'] });\r",
											"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['prefixName', 'givenName','middleName', 'familyName'] });\r",
											"        pm.test(\"(5)- Validate Output > PrefixName field comes populated with non-empty value in response\", ()=>{\r",
											"            utils.validateIfNonEmpty(outputData.prefixName);\r",
											"        });\r",
											"    })();\r",
											"    (function setNextRequest() {\r",
											"        pm.variables.clear();\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_IDENTITY_ENABLED}}",
										"type": "text"
									},
									{
										"key": "accessToken",
										"value": "{{accessToken}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"\",\r\n        \"countryCode\": \"USA\",\r\n        \"emailAddress1\": \"\",\r\n        \"fullName\":\"\",     \r\n        \"prefixName\": \"{{prefixName}}\",\r\n        \"givenName\": \"{{givenName}}\",\r\n        \"middleName\":\"\",     \r\n        \"familyName\": \"{{familyName}}\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/v2/connect/realtime/service",
									"host": [
										"{{server}}"
									],
									"path": [
										"v2",
										"connect",
										"realtime",
										"service"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8598](https://jira.cnvrmedia.net/browse/PID-8598)\n\n&#9724; **NAME:** Identity-request validate prefixName provided in input request.\n\n&#9724; **DESCRIPTION:** Identity-request validate when\n\n* prefixName provided in input request\n\n&#9724; **EXPECTED RESULT:** \n* prefixName provided in input request comes populated in response.\n\n&#9724; **INPUT FIELDS:** \n* inputRecord.prefixName\n\n&#9724; **OUTPUT FIELDS:** \n* nameHygieneOutput.prefixName"
							},
							"response": []
						},
						{
							"name": "Realtime > global > (PID-8597) > Global-identity-request verify correct mapping for returnCode and returnCodeDesc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"const utils = eval(globals.connectUtils);\r",
											"let inputData = JSON.parse(pm.request.body).inputRecord;\r",
											"let outputData = utils.getOutputData(JSON.parse(responseBody));\r",
											"\r",
											"//===============================================================================================================\r",
											"(function verifyAll_missingPrefixValidation() {\r",
											"        utils.doTestLogging({msg : \"(1)- Validating request\", type : \"VALIDATE_REQUEST\"});\r",
											"        utils.doTestLogging({msg : \"(2)- Validating response OK(200)\", type : \"VALIDATE_OKRESPONSE\"});\r",
											"        utils.doTestLogging({msg : \"(3)- Check input data\", type : \"CHECK_INPUT\", fields : ['fullName','addressLine1', 'postalCode'] });\r",
											"        utils.doTestLogging({msg : \"(4)- Check output data\", type : \"CHECK_OUTPUT\", fields : ['standardizedAddressReturnCode','standardizedAddressReturnCodeDesc','bestAddressReturnCode','bestAddressReturnCodeDesc'] });\r",
											"        pm.test(\"(5)- Validate Output > returnCode and returnCodeDesc field comes populated in the response.\", ()=>{\r",
											"            pm.expect(outputData.standardizedAddressReturnCode).to.not.equal(undefined);\r",
											"            pm.expect(outputData.standardizedAddressReturnCodeDesc).to.not.equal(undefined);\r",
											"            pm.expect(outputData.bestAddressReturnCode).to.not.equal(undefined);\r",
											"            pm.expect(outputData.bestAddressReturnCodeDesc).to.not.equal(undefined);\r",
											"            pm.expect(outputData.standardizedAddressReturnCode).to.equal(outputData.bestAddressReturnCode);\r",
											"            pm.expect(outputData.standardizedAddressReturnCodeDesc).to.equal(outputData.bestAddressReturnCodeDesc);\r",
											"        });\r",
											"    })();\r",
											"    (function setNextRequest() {\r",
											"        pm.variables.clear();\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=======================================================================================================================================//\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7926\",\r",
											"                    sprint: \"21.01.03\",\r",
											"                    subject: \"realtime > global\",\r",
											"                    tags: \"#realtime#global#returnCode#returnCodeDesc\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//=======================================================================================================================================//\r",
											"\r",
											"const utils = eval(globals.connectUtils);\r",
											"//============================================================================================================================\r",
											"(function setDataForCurrentRequest() {   \r",
											"    pm.variables.set(\"fullName\", utils.getRandomDataForField(\"fullName\"));\r",
											"    pm.variables.set(\"addressLine1\", utils.getAddressLine1());\r",
											"    pm.variables.set(\"postalCode\", _.random(2000,2599));\r",
											"})();\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_IDENTITY_ENABLED}}",
										"type": "text"
									},
									{
										"key": "accessToken",
										"value": "{{accessToken}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{XAPIKEY_IDENTITY_ENABLED}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputRecord\": {\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"countryCode\": \"AUS\",\r\n        \"emailAddress1\": \"\",\r\n        \"fullName\":\"{{fullName}}\",   \r\n        \"familyName\": \"\",\r\n        \"gender\": \"\",\r\n        \"phone1\": \"\",\r\n        \"postalCode\": \"{{postalCode}}\",\r\n        \"trustedBusinessID\": \"\",\r\n        \"trustedIndividualID\": \"\",\r\n        \"userCorrelationId\": \"\"\r\n    },\r\n    \"serviceConfig\": {\r\n        \"configAddressHygiene\": {\r\n            \"enablePac\": \"no\",\r\n            \"enablePcoa\": \"no\"\r\n        },\r\n        \"enableIdentity\": \"yes\",\r\n        \"enableAddressHygiene\": \"yes\",\r\n        \"enableEmailHygiene\": \"Yes\",\r\n        \"enableNameHygiene\": \"yes\",\r\n        \"enablePhoneHygiene\": \"yes\",\r\n        \"enableGlobalSuppression\": \"no\",\r\n        \"enableOccupancyScore\": \"no\",\r\n        \"enableTspAppend\": \"no\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/v2/connect/realtime/service",
									"host": [
										"{{server}}"
									],
									"path": [
										"v2",
										"connect",
										"realtime",
										"service"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-8597](https://jira.cnvrmedia.net/browse/PID-8597)\n\n&#9724; **NAME:** Global-identity-request verify correct mapping for returnCode and returnCodeDesc\n\n&#9724; **DESCRIPTION:** Global-identity-request verify returnCode and returnCodeDesc are mapped correctly in response\n\n&#9724; **EXPECTED RESULT:**\n* standardizedAddress.returnCode and standardizedAddress.returnCodeDesc fields are returned in the response.\n*  bestAddress.returnCode  and bestAddress.returnCodeDesc fields are returned in the response.\n* standardizedAddress.returnCode and bestAddress.returnCode fields have same value.\n* standardizedAddress.returnCodeDesc and bestAddress.returnCodeDesc fields have same value.\n\n\n&#9724; **OUTPUT FIELDS:**\n* addressHygieneOutput.standardizedAddress.returnCode\n* addressHygieneOutput.standardizedAddress.returnCodeDesc\n* addressHygieneOutput.bestAddress.returnCode\n* addressHygieneOutput.bestAddress.returnCodeDesc"
							},
							"response": []
						}
					]
				},
				{
					"name": "IMS2.0",
					"item": [
						{
							"name": "init-ims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"utils.enableOrDisableFeatures();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "IMS > insert > (PID-7049) - Insert profile when \"parentId\" missing in the input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> empty-input is given for 'parentId'.\", utils.validateIfEmpty(inputData.parentId));\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    //Not applicable//\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  response comes with error message as - (ParentId and CustomerId is mandatory for Insert / Update... )\",\r",
											"        pm.expect(outputData.errorMessage).to.contains(\"ParentId and CustomerId is mandatory for Insert / Update\"));\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[\" + \"errorMessage=\" + outputData.errorMessage + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    return null;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7049\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = { \"parentId\": \"\" };\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"\"\r\n} \r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7049](https://jira.cnvrmedia.net/browse/PID-7049)\n\n&#9724; **NAME:** Insert profile when \"parentId\" missing in the input\n\n&#9724; **DESCRIPTION:** IMS-insert -> validate required input -> when \"parentId\" missing in the input\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as  \"ParentId and CustomerId is mandatory for Insert / Update, please check the input parameters....\"\n\n&#9724; **INPUT FIELDS:**\n*   \"parentId\"=\"\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"ParentId and CustomerId is mandatory for Insert / Update, please check the input parameters....\""
							},
							"response": []
						},
						{
							"name": "IMS > insert > (PID-7050) - Insert profile with no \"contextId\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> empty-input given for 'contextId'.\", () => {\r",
											"        utils.validateIfEmpty(inputData.contextId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    //Not applicable\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  response comes with error message as - (ContextId is mandatory, please check input ....) \", () => {\r",
											"        pm.expect(outputData.errorMessage).to.contains(\"ContextId is mandatory, please check input\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[\" + \"errorMessage=\" + outputData.errorMessage + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    return null;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"utils.validateAll(this); \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7050\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================// \r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {\"contextId\" :\"\"};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7050](https://jira.cnvrmedia.net/browse/PID-7050)\n\n&#9724; **NAME:** Insert profile with no \"contextId\"\n\n&#9724; **DESCRIPTION:** IMS-insert - Insert profile with no \"contextId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as \"ContextId is mandatory, please check input =>....\"\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"=\"\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"ContextId is mandatory, please check input =>....\""
							},
							"response": []
						},
						{
							"name": "IMS > insert > (PID-7051)-  Insert profile with no \"customerId\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> empty-input is given for 'customerId'.\", ()=>{\r",
											"        utils.validateIfEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    //Not applicable//\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  response comes with error message as - (ParentId and CustomerId is mandatory for Insert / Update...)\",\r",
											"        pm.expect(outputData.errorMessage).to.contains(\"ParentId and CustomerId is mandatory for Insert / Update\"));\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[\" + \"errorMessage=\" + outputData.errorMessage + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    return null;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7051\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > Insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {\"customerId\" :\"\"};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7051](https://jira.cnvrmedia.net/browse/PID-7051)\n\n&#9724; **NAME:** Insert profile with no \"customerId\"\n\n&#9724; **DESCRIPTION:** IMS-insert request- Insert profile with no \"customerId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as \"ParentId and CustomerId is mandatory for Insert / Update, please check the input parameters =>...\"\n\n&#9724; **INPUT FIELDS:**\n*   \"customerId\"=\"\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"ParentId and CustomerId is mandatory for Insert / Update, please check the input parameters =>...\""
							},
							"response": []
						},
						{
							"name": "IMS > Insert > (PID-7052) - Insert profile with invalid \"contextId\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    // Not applicable\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    //Not applicable//\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  response comes with error message as - (ContextId is wrong, please check input)\",\r",
											"        pm.expect(outputData.errorMessage).to.contains(\"ContextId is wrong, please check input\"));\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[\" + \"errorMessage=\" + outputData.errorMessage + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    return null;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7052\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"testbu123\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7052](https://jira.cnvrmedia.net/browse/PID-7052)\n\n&#9724; **NAME:** Insert profile with invalid \"contextId\"\n\n&#9724; **DESCRIPTION:** \n*   IMS-insert request -Insert profile with invalid \"contextId\", example : \"testbu123\"\n\n&#9724; **PRECONDITION:**\n*   Input \"contextId\" does not exists.\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as \"ContextId is wrong, please check input => ...\"\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"=\"testbu123\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"ContextId is wrong, please check input => ....\""
							},
							"response": []
						},
						{
							"name": "IMS > insert >(PID-7053) - Insert new profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = responseBody;\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateEmptyBodyOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"    pm.test(\"Validate Input -> extra attributes (customerKey, smsNumber,emailAddress, deviceId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.customerKey);\r",
											"        utils.validateIfNonEmpty(inputData.smsNumber);\r",
											"        utils.validateIfNonEmpty(inputData.emailAddress);\r",
											"        utils.validateIfNonEmpty(inputData.deviceId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    //Not applicable//\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  response comes with error message as - (Record Inserted)\",\r",
											"        pm.expect(outputData).to.contains(\"Record Inserted\"));\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[\" + outputData + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    return null;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7053\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7053](https://jira.cnvrmedia.net/browse/PID-7053)\n\n&#9724; **NAME:** Insert new profile\n\n&#9724; **DESCRIPTION:** IMS-insert request - insert new profile\n\n&#9724; **PRECONDITION**\n*   \"contextId\", \"parentId\" and \"customerId\" are provided in input with non empty values.\n\n&#9724; **EXPECTED RESULT:**\n*   \"Record Inserted\", message is displayed in the response body.\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"customerId\"\n*   \"parentId\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"Record Inserted\""
							},
							"response": []
						},
						{
							"name": "IMS > Insert > (PID-7054) - Insert profile when record already exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7054\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"customerKey\",existingRecords.imsRecord1.customerKey);\r",
											"    pm.variables.set(\"emailAddress\",existingRecords.imsRecord1.emailAddress);\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId);\r",
											"    pm.variables.set(\"smsNumber\",existingRecords.imsRecord1.smsNumber);\r",
											"    pm.variables.set(\"deviceId\",existingRecords.imsRecord1.deviceId);\r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId, customerKey, smsNumber,emailAddress, deviceId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"        utils.validateIfNonEmpty(inputData.customerKey);\r",
											"        utils.validateIfNonEmpty(inputData.smsNumber);\r",
											"        utils.validateIfNonEmpty(inputData.emailAddress);\r",
											"        utils.validateIfNonEmpty(inputData.deviceId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with same (contextId, parentId, customerId, smsNumber, emailAddress, deviceId, customerKey).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerKey);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.smsNumber);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.emailAddress);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.deviceId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerKey).to.equal(inputData.customerKey);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.equal(inputData.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.smsNumber).to.equal(inputData.smsNumber);\r",
											"        pm.expect(existingRecords.imsRecord1.emailAddress).to.equal(inputData.emailAddress);\r",
											"        pm.expect(existingRecords.imsRecord1.deviceId).to.equal(inputData.deviceId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  response comes with error message as - (Record Exists)\", ()=>{\r",
											"        pm.expect(outputData.errorMessage).to.equal(\"Record Exists\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ errorMessage = \" + outputData.errorMessage + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            +\"customerKey=\" + imsMatchDataRecord1.customerKey + \", \" \r",
											"            +\"emailAddress=\" + imsMatchDataRecord1.emailAddress + \", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;    \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7054](https://jira.cnvrmedia.net/browse/PID-7054)\n\n&#9724; **NAME:** Insert profile when record already exists\n\n&#9724; **DESCRIPTION:** IMS-insert request - Insert profile when record already exists\n\n&#9724; **PRECONDITION**\n*   Record exists with input \"contextId\" and \"parentId\"\n*   Record exists with different  \"customerId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as \"Record Exists\"\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"Record Exists\""
							},
							"response": []
						},
						{
							"name": "IMS > insert > (PID-7348) - Update existing profile  with new parentID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = (responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateEmptyBodyOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"    pm.test(\"Validate Input -> extra attributes (customerKey, smsNumber,emailAddress, deviceId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.customerKey);\r",
											"        utils.validateIfNonEmpty(inputData.smsNumber);\r",
											"        utils.validateIfNonEmpty(inputData.emailAddress);\r",
											"        utils.validateIfNonEmpty(inputData.deviceId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    //\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> response comes with message as - (Record Inserted)\", ()=>{\r",
											"        pm.expect(outputData).to.equal(\"Record Inserted\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ \" + outputData + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    return null;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7348\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let getPreRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"let testMetadata = {\r",
											"    \"sprint\": \"Q2-2020\",\r",
											"    \"module\": \"IMS\",\r",
											"    \"submodule\": \"Insert\",\r",
											"    \"automation\": \"Yes\",\r",
											"    \"tags\": \"#IMS#IMSInsert\"\r",
											"};\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    getPreRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": getPreRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    // Not applicable\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",getPreRequest1Data.contextId);\r",
											"    pm.variables.set(\"customerKey\",getPreRequest1Data.customerKey);\r",
											"    pm.variables.set(\"emailAddress\",getPreRequest1Data.emailAddress);\r",
											"    pm.variables.set(\"customerId\",getPreRequest1Data.customerId);\r",
											"    pm.variables.set(\"smsNumber\",getPreRequest1Data.smsNumber);\r",
											"    pm.variables.set(\"deviceId\",getPreRequest1Data.deviceId);\r",
											"}\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7348](https://jira.cnvrmedia.net/browse/PID-7348)\n\n&#9724; **NAME:** Update existing profile with new \"parentID\"\n\n&#9724; **DESCRIPTION:** IMS-insert request - Update existing profile with new \"parentID\"\n\n&#9724; **PRECONDITION**\n*   Record exists with input \"contextId\", \"customerId\"\n*   Input \"parentId\" is different from existing-records \"parentId\"\n\n&#9724; **EXPECTED RESULT:**\n*   response comes with \"Record Inserted\".\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"Record Inserted\""
							},
							"response": []
						},
						{
							"name": "IMS > insert > (PID-7351)- insert profile when profile exist with different cutomerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = responseBody;\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateEmptyBodyOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate Input -> extra attributes (customerKey, emailAddress, smsNumber,deviceId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.customerKey);\r",
											"        utils.validateIfNonEmpty(inputData.emailAddress);\r",
											"        utils.validateIfNonEmpty(inputData.smsNumber);\r",
											"        utils.validateIfNonEmpty(inputData.deviceId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with same (contextId ,parentId,customerKey,emailAddress,smsNumber,deviceId) and different  (customerId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerKey);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.emailAddress);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.smsNumber);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.deviceId);\r",
											"\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerKey).to.equal(inputData.customerKey);\r",
											"        pm.expect(existingRecords.imsRecord1.emailAddress).to.equal(inputData.emailAddress);\r",
											"        pm.expect(existingRecords.imsRecord1.smsNumber).to.equal(inputData.smsNumber);\r",
											"        \r",
											"        pm.expect(existingRecords.imsRecord1.deviceId).to.equal(inputData.deviceId);\r",
											"\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.not.equal(inputData.customerId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> response comes populated as -(Record Inserted).\", ()=>{\r",
											"        pm.expect(outputData).to.equal(\"Record Inserted\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ \" + outputData  + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;   \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7351\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > insert\",\r",
											"                    tags: \"#IMS#IMSInsert\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {\"contextId\" :\"\"};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"customerKey\",existingRecords.imsRecord1.customerKey); \r",
											"    pm.variables.set(\"emailAddress\",existingRecords.imsRecord1.emailAddress); \r",
											"    pm.variables.set(\"smsNumber\",existingRecords.imsRecord1.smsNumber); \r",
											"    pm.variables.set(\"deviceId\",existingRecords.imsRecord1.deviceId); \r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/insert",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"insert"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7351](https://jira.cnvrmedia.net/browse/PID-7351)\n\n&#9724; **NAME:** Insert profile when profile exist with different \"customerId\"\n\n&#9724; **DESCRIPTION:** IMS-Insert request - insert profile when profile exist with different \"customerId\"\n\n&#9724; **PRECONDITION:** \n*   The record exists for same attributes and different \"customerId\"\n\n&#9724; **EXPECTED RESULT:**\n*   \"Record Inserted\", message is displayed in the response body.\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"customerKey\"\n*   \"customerId\"\n*   \"parentId\"\n*   \"smsNumber\"\n*   \"emailAddress\"\n*   \"deviceId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"Record Inserted\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7055) - Lookup  when profile exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with same (contextId, customerKey,parentId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.equal(inputData.customerId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> existing record comes populated in response.\", ()=>{\r",
											"        utils.validateIfNonEmpty(outputData[0].parentId);\r",
											"        utils.validateIfNonEmpty(outputData[0].customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ = \" \r",
											"        + \"customerKey=\" + outputData[0].customerKey + \", \"\r",
											"        + \"emailAddress=\" + outputData[0].emailAddress + \", \"\r",
											"        + \"customerId=\"  + outputData[0].customerId + \", \"\r",
											"        + \"smsNumber=\" + outputData[0].smsNumber + \", \"\r",
											"        + \"deviceId=\" + outputData[0].deviceId + \", \"\r",
											"        + \"parentId=\" + outputData[0].parentId + \", \"\r",
											"        + \"lastModified=\" + outputData[0].lastModified + \", \"\r",
											"     + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;    \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7055\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId);\r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"\",\r\n    \"emailAddress\": \"\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"\",\r\n    \"deviceId\": \"\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7055](https://jira.cnvrmedia.net/browse/PID-7055)\n\n&#9724; **NAME:** Lookup when profile exists\n\n&#9724; **DESCRIPTION:** IMS-lookup request - when profile exists\n\n&#9724; **PRECONDITION**\n*   Record exists with input \"contextId\", \"customerId\" and \"parentId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Existing record is returned in the response\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"customerKey\"\n*   \"emailAddress\"\n*   \"customerId\"\n*   \"smsNumber\"\n*   \"lastModified\"\n*   \"deviceId\"\n*   \"parentId\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7056) - Lookup profile when input contextId is invaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with different (valid contextId) and same (customerId,parentId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.not.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.equal(inputData.customerId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> response comes with error message - (ContextId is wrong, please check input..)\", ()=>{\r",
											"        pm.expect(outputData.errorMessage).to.contain(\"ContextId is wrong, please check input\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ \" \r",
											"        + \"errorMessage=\" + outputData.errorMessage\r",
											"     + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7056\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"let testMetadata = {\r",
											"    \"sprint\": \"Q2-2020\",\r",
											"    \"module\": \"IMS\",\r",
											"    \"submodule\": \"LookUp\",\r",
											"    \"automation\": \"Yes\",\r",
											"    \"tags\": \"#IMS#IMSLookUp\"\r",
											"};\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = { \"contextId\": \"testbu123\" };\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId);\r",
											"    pm.variables.set(\"customerKey\",existingRecords.imsRecord1.customerKey);\r",
											"    pm.variables.set(\"emailAddress\",existingRecords.imsRecord1.emailAddress);\r",
											"    pm.variables.set(\"smsNumber\",existingRecords.imsRecord1.smsNumber);\r",
											"    pm.variables.set(\"deviceId\",existingRecords.imsRecord1.deviceId);\r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7056](https://jira.cnvrmedia.net/browse/PID-7056)\n\n&#9724; **NAME:** Lookup profile when input \"contextId\" is invalid\n\n&#9724; **DESCRIPTION:** IMS-lookup request - Lookup profile when input \"contextId\" is invalid\n\n&#9724; **PRECONDITION:**\n*   Input \"contextId\" does not exists.\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\": \"ContextId is wrong, please check input =>...\"\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"errorMessage\": \"ContextId is wrong, please check input =>...\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7057)-Lookup profile when no records exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = responseBody;\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"    pm.test(\"Validate Input -> extra attributes (customerKey, smsNumber,emailAddress, deviceId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.customerKey);\r",
											"        utils.validateIfNonEmpty(inputData.smsNumber);\r",
											"        utils.validateIfNonEmpty(inputData.emailAddress);\r",
											"        utils.validateIfNonEmpty(inputData.deviceId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    //Not applicable//\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  null result comes as response.\", ()=>{\r",
											"        pm.expect(outputData).to.equal(\"[]\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[\" + outputData + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    return null;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7057\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7057](https://jira.cnvrmedia.net/browse/PID-7057)\n\n&#9724; **NAME:** Lookup profile when no records exist\n\n&#9724; **DESCRIPTION:** IMS-lookup request - lookup profile when no records exist\n\n&#9724; **PRECONDITION:**\n*   Record doesn't exists with given input \"contextId\", \"parentId\", \"customerId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Empty response (i.e. \"[]\") comes as output.\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   []"
							},
							"response": []
						},
						{
							"name": "IMS > lookup > -(PID-7058)- Lookup profile with no input for customerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData =  JSON.parse(responseBody);\r",
											"\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"    });\r",
											"    pm.test(\"Validate Input -> attribute (customerId) and  (customerKey, smsNumber, emailAddress, deviceId) are not provided.\", ()=>{\r",
											"        utils.validateIfEmpty(inputData.customerId);\r",
											"        utils.validateIfEmpty(inputData.customerKey);\r",
											"        utils.validateIfEmpty(inputData.smsNumber);\r",
											"        utils.validateIfEmpty(inputData.emailAddress);\r",
											"        utils.validateIfEmpty(inputData.deviceId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with non empty(customerId, customerKey, smsNumber, emailAddress,deviceId) and same (contextId,parentId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerKey);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.smsNumber);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.emailAddress);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.deviceId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.not.equal(inputData.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerKey).to.not.equal(inputData.customerKey);\r",
											"        pm.expect(existingRecords.imsRecord1.smsNumber).to.not.equal(inputData.smsNumber);\r",
											"        pm.expect(existingRecords.imsRecord1.emailAddress).to.not.equal(inputData.emailAddress);\r",
											"        pm.expect(existingRecords.imsRecord1.deviceId).to.not.equal(inputData.deviceId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    let msg = \"Validate output -> response comes with error message as - (Either CustomerId or one attribute is mandatory for Lookup, please check the input parameters)\";\r",
											"    pm.test(msg, ()=>{\r",
											"        pm.expect(outputData.errorMessage).to.contains(\"Either CustomerId or one attribute is mandatory for Lookup, please check the input parameters =>\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ errorMessage = \" + outputData.errorMessage + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7058\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.generateDataForCurrentRequest = () => {\r",
											"    let testerInput = {};\r",
											"    utils.setRandomDataForIMSRequest(testerInput);\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"this.generateDataForCurrentRequest();\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"\",\r\n    \"emailAddress\": \"\",\r\n    \"customerId\": \"\",\r\n    \"smsNumber\": \"\",\r\n    \"deviceId\": \"\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7058](https://jira.cnvrmedia.net/browse/PID-7058)\n\n&#9724; **NAME:** Lookup profile with no input for customerId\n\n&#9724; **DESCRIPTION:** IMS-lookup request - lookup profile with no input for customerId\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as \"Either CustomerId or one attribute is mandatory for Lookup, please check the input parameters => ...\"\n\n&#9724; **INPUT FIELDS:**A\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"=\"\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"Either CustomerId or one attribute is mandatory for Lookup, please check the input parameters => ...\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7338)- Lookup profile -cacking case-sensitivity of lookup attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with same (contextId, customerKey,parentId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.equal(inputData.customerId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> existing record comes populated in response.\", ()=>{\r",
											"        utils.validateIfNonEmpty(outputData[0].parentId);\r",
											"        utils.validateIfNonEmpty(outputData[0].customerId);\r",
											"        utils.validateIfNonEmpty(outputData[0].customerKey);\r",
											"        utils.validateIfNonEmpty(outputData[0].emailAddress);\r",
											"        utils.validateIfNonEmpty(outputData[0].smsNumber);\r",
											"        utils.validateIfNonEmpty(outputData[0].deviceId);\r",
											"        utils.validateIfNonEmpty(outputData[0].parentId);\r",
											"        utils.validateIfNonEmpty(outputData[0].lastModified);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ = \" \r",
											"        + \"customerKey=\" + outputData[0].customerKey + \", \"\r",
											"        + \"emailAddress=\" + outputData[0].emailAddress + \", \"\r",
											"        + \"customerId=\"  + outputData[0].customerId + \", \"\r",
											"        + \"smsNumber=\" + outputData[0].smsNumber + \", \"\r",
											"        + \"deviceId=\" + outputData[0].deviceId + \", \"\r",
											"        + \"parentId=\" + outputData[0].parentId + \", \"\r",
											"        + \"lastModified=\" + outputData[0].lastModified + \", \"\r",
											"     + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;    \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7338\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"customerKey\",existingRecords.imsRecord1.customerKey);\r",
											"    pm.variables.set(\"emailAddress\",existingRecords.imsRecord1.emailAddress.toUpperCase());\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId);\r",
											"    pm.variables.set(\"smsNumber\",existingRecords.imsRecord1.smsNumber.toUpperCase());\r",
											"    pm.variables.set(\"deviceId\",existingRecords.imsRecord1.deviceId.toUpperCase());\r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerId\": \"{{customerId}}\",\r\n  \"contextId\": \"{{contextId}}\",\r\n  \"parentId\": \"{{parentId}}\",\r\n  \"customerKey\":\"{{customerKey}}\",   \r\n  \"emailAddress\":\"{{emailAddress}}\",\r\n  \"smsNumber\":\"{{smsNumber}}\",   \r\n  \"deviceId\":\"{{deviceId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7338](https://jira.cnvrmedia.net/browse/PID-7338)\n\n&#9724; **NAME:** Lookup profile-checking case-sensitivity of lookup attributes\n\n&#9724; **DESCRIPTION:** Lookup profile-checking case-sensitivity of lookup attributes\n\n&#9724; **EXPECTED RESULT:**\n*   Existing record returned as a response with \"lastModified\" field.\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n*   \"smsNumber\"\n*   \"deviceId\"\n*   \"parentId\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"customerKey\"\n*   \"emailAddress\"\n*   \"customerId\"\n*   \"smsNumber\"\n*   \"lastModified\"\n*   \"deviceId\"\n*   \"parentId\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7339)- IMS-lookup case sensitivity of parentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7339\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId.toLowerCase());\r",
											"    pm.variables.set(\"customerKey\",existingRecords.imsRecord1.customerKey);\r",
											"    pm.variables.set(\"emailAddress\",existingRecords.imsRecord1.emailAddress);\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId.toLowerCase());\r",
											"    pm.variables.set(\"smsNumber\",existingRecords.imsRecord1.smsNumber);\r",
											"    pm.variables.set(\"deviceId\",existingRecords.imsRecord1.deviceId);\r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId.toLowerCase()); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = responseBody;\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    // \r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output ->  null result comes as response.\", ()=>{\r",
											"        pm.expect(outputData).to.equal(\"[]\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerKey=\" + inputData.customerKey + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"smsNumber=\" + inputData.smsNumber + \", \"\r",
											"        + \"deviceId=\" + inputData.deviceId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ \" + outputData + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;    \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerId\": \"{{customerId}}\",\r\n  \"contextId\": \"{{contextId}}\",\r\n  \"parentId\": \"{{parentId}}\",\r\n  \"customerKey\":\"{{customerKey}}\",   \r\n  \"emailAddress\":\"{{emailAddress}}\",\r\n  \"smsNumber\":\"{{smsNumber}}\",   \r\n  \"deviceId\":\"{{deviceId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7339](https://jira.cnvrmedia.net/browse/PID-7339)\n\n&#9724; **NAME:** IMS-lookup case sensitivity of \"parentId\" attributes\n\n&#9724; **DESCRIPTION:** IMS-lookup request - case sensitivity of \"parentId\" attributes\n\n&#9724; **PRECONDITION:**\n*   Record exists with \"contextId\",\"customerId\" and \"parentId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Empty response (i.e. \"[]\") comes as output.\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"[]\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7340)- IMS-lookup request - verify \"lastModified\" field displayed in output.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with same (contextId, customerId,parentId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.equal(inputData.customerId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> existing record comes populated in response with (lastModified) field.\", ()=>{\r",
											"        utils.validateIfNonEmpty(outputData[0].parentId);\r",
											"        utils.validateIfNonEmpty(outputData[0].customerId);\r",
											"        utils.validateIfNonEmpty(outputData[0].lastModified);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ = \" \r",
											"        + \"customerKey=\" + outputData[0].customerKey + \", \"\r",
											"        + \"emailAddress=\" + outputData[0].emailAddress + \", \"\r",
											"        + \"customerId=\"  + outputData[0].customerId + \", \"\r",
											"        + \"smsNumber=\" + outputData[0].smsNumber + \", \"\r",
											"        + \"deviceId=\" + outputData[0].deviceId + \", \"\r",
											"        + \"parentId=\" + outputData[0].parentId + \", \"\r",
											"        + \"lastModified=\" + outputData[0].lastModified + \", \"\r",
											"     + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;   \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7340\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"let testMetadata = {\r",
											"    \"sprint\": \"Q2-2020\",\r",
											"    \"module\": \"IMS\",\r",
											"    \"submodule\": \"LookUp\",\r",
											"    \"automation\": \"Yes\",\r",
											"    \"tags\": \"#IMS#IMSLookUp\"\r",
											"};\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId);\r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerId\": \"{{customerId}}\",\r\n  \"contextId\": \"{{contextId}}\",\r\n  \"parentId\": \"{{parentId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7340](https://jira.cnvrmedia.net/browse/PID-7340)\n\n&#9724; **NAME:** IMS-lookup request - verify \"lastModified\" field displayed in output.\n\n&#9724; **DESCRIPTION:** IMS-lookup request - verify \"lastModified\" field displayed in output.\n\n&#9724; **PRECONDITION:**\n*   Record exists with \"contextId\",\"customerId\" and \"parentId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Existing record comes populated in response with \"lastModified\" field.\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"parentId\"\n*   \"customerId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"customerKey\"\n*   \"emailAddress\"\n*   \"customerId\"\n*   \"smsNumber\"\n*   \"lastModified\"\n*   \"deviceId\"\n*   \"parentId\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7349) - Lookup profile with no contextId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId) is not provided.\", ()=>{\r",
											"        utils.validateIfEmpty(inputData.contextId);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate Input -> required attributes (parentId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with different non empty (contextId) and same (customerId,parentId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.not.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(inputData.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.equal(inputData.customerId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> response comes with error message as -(ContextId is mandatory, please check input..).\", ()=>{\r",
											"        pm.expect(outputData.errorMessage).to.contain(\"ContextId is mandatory, please check input\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ \" + outputData.errorMessage  + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;   \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7349\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId);\r",
											"    pm.variables.set(\"customerKey\",existingRecords.imsRecord1.customerKey); \r",
											"    pm.variables.set(\"emailAddress\",existingRecords.imsRecord1.emailAddress); \r",
											"    pm.variables.set(\"smsNumber\",existingRecords.imsRecord1.smsNumber); \r",
											"    pm.variables.set(\"deviceId\",existingRecords.imsRecord1.deviceId); \r",
											"    pm.variables.set(\"parentId\",existingRecords.imsRecord1.parentId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"{{parentId}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7349](https://jira.cnvrmedia.net/browse/PID-7349)\n\n&#9724; **NAME:** IMS-lookup request - Lookup profile with no \"contextId\"\n\n&#9724; **DESCRIPTION:** IMS-lookup request - Lookup profile with no \"contextId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as \"ContextId is mandatory, please check input =>....\"\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"=\"\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"ContextId is mandatory, please check input =>....\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7350)-  IMS-lookup request - lookup profile with no \"parentId\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateBadRequestResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (parentId ) is not provided.\", ()=>{\r",
											"        utils.validateIfEmpty(inputData.parentId);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, customerId) are provided.\", ()=>{\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> record exists with same (contextId ,customerId) and different non empty (parentId).\", ()=>{\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(inputData.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.equal(inputData.customerId);\r",
											"\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.not.equal(inputData.parentId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> response comes with error message as -(ParentId is mandatory for Lookup, please check the input parameters..).\", ()=>{\r",
											"        pm.expect(outputData.errorMessage).to.contain(\"ParentId is mandatory for Lookup, please check the input parameters\");\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"customerId=\" + inputData.customerId + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ \" + outputData.errorMessage  + \"]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"            +\"contextId=\" + imsMatchDataRecord1.contextId + \", \" \r",
											"            + \"customerKey=\" + imsMatchDataRecord1.customerKey +\", \" \r",
											"            + \"emailAddress=\" + imsMatchDataRecord1.emailAddress +\", \" \r",
											"            + \"customerId=\" + imsMatchDataRecord1.customerId +\", \" \r",
											"            + \"smsNumber=\" + imsMatchDataRecord1.smsNumber +\", \" \r",
											"            + \"deviceId=\" + imsMatchDataRecord1.deviceId +\", \" \r",
											"            + \"parentId=\" + imsMatchDataRecord1.parentId\r",
											"            +\"]\";\r",
											"    return existingDataToDisplay;   \r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7350\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\",existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"customerId\",existingRecords.imsRecord1.customerId);\r",
											"    pm.variables.set(\"customerKey\",existingRecords.imsRecord1.customerKey); \r",
											"    pm.variables.set(\"emailAddress\",existingRecords.imsRecord1.emailAddress); \r",
											"    pm.variables.set(\"smsNumber\",existingRecords.imsRecord1.smsNumber); \r",
											"    pm.variables.set(\"deviceId\",existingRecords.imsRecord1.deviceId); \r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"customerKey\": \"{{customerKey}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"smsNumber\": \"{{smsNumber}}\",\r\n    \"deviceId\": \"{{deviceId}}\",\r\n    \"parentId\": \"\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7350](https://jira.cnvrmedia.net/browse/PID-7350)\n\n&#9724; **NAME:** IMS-lookup request - lookup profile with no \"parentId\"\n\n&#9724; **DESCRIPTION:** IMS-lookup request - lookup profile with no \"parentId\"\n\n&#9724; **EXPECTED RESULT:**\n*   Response status code comes as 400.\n*   response comes with \"errorMessage\" as \"ParentId is mandatory for Lookup, please check the input parameters => ...\"\n\n&#9724; **INPUT FIELDS:**\n*   \"parentId\"=\"\"\n\n&#9724; **OUTPUT FIELDS:**\n*    \"errorMessage\"=\"ParentId is mandatory for Lookup, please check the input parameters => ....\""
							},
							"response": []
						},
						{
							"name": "IMS > lookup > (PID-7352) -Lookup existing profiles with matching parentID and attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"//DEFINITION=================================================================================================================================================//\r",
											"let existingRecords = JSON.parse(pm.variables.get(\"existingRecords\"));\r",
											"let inputData = JSON.parse(pm.request.body);\r",
											"let outputData = JSON.parse(responseBody);\r",
											"this.defineResponseValidation = () => {\r",
											"    utils.validateEmptyBodyOKResponse();\r",
											"}\r",
											"\r",
											"this.defineRequestValidation = () => {\r",
											"    utils.validateRequest(\"POST\");\r",
											"}\r",
											"\r",
											"this.defineInputDataValidation = () => {\r",
											"    pm.test(\"Validate Input -> required attributes (contextId, parentId) and one of the attribute(emailAddress) are provided.\", () => {\r",
											"        utils.validateIfNonEmpty(inputData.contextId);\r",
											"        utils.validateIfNonEmpty(inputData.emailAddress);\r",
											"        utils.validateIfNonEmpty(inputData.parentId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineExistingDataValidation = () => {\r",
											"    pm.test(\"Validate existing -> multiple record exists with same (contextId ,parentId,customerKey,emailAddress,smsNumber,deviceId) and different  (customerId).\", () => {\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.customerKey);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.emailAddress);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.smsNumber);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord1.deviceId);\r",
											"\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord2.contextId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord2.customerId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord2.parentId);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord2.customerKey);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord2.emailAddress);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord2.smsNumber);\r",
											"        utils.validateIfNonEmpty(existingRecords.imsRecord2.deviceId);\r",
											"\r",
											"\r",
											"        pm.expect(existingRecords.imsRecord1.contextId).to.equal(existingRecords.imsRecord2.contextId);\r",
											"        pm.expect(existingRecords.imsRecord1.parentId).to.equal(existingRecords.imsRecord2.parentId);\r",
											"        pm.expect(existingRecords.imsRecord1.customerKey).to.equal(existingRecords.imsRecord2.customerKey);\r",
											"        pm.expect(existingRecords.imsRecord1.emailAddress).to.equal(existingRecords.imsRecord2.emailAddress);\r",
											"        pm.expect(existingRecords.imsRecord1.smsNumber).to.equal(existingRecords.imsRecord2.smsNumber);\r",
											"        pm.expect(existingRecords.imsRecord1.deviceId).to.equal(existingRecords.imsRecord2.deviceId);\r",
											"\r",
											"        pm.expect(existingRecords.imsRecord1.customerId).to.not.equal(existingRecords.imsRecord2.customerId);\r",
											"    });\r",
											"};\r",
											"\r",
											"this.defineOutputDataValidation = () => {\r",
											"    pm.test(\"Validate output -> response comes populated with 2 records with same ( parentId,customerKey,emailAddress,smsNumber,deviceId) and different (customerId)\", () => {\r",
											"        utils.validateIfNonEmpty(outputData[0].parentId);\r",
											"        utils.validateIfNonEmpty(outputData[0].customerKey);\r",
											"        utils.validateIfNonEmpty(outputData[0].emailAddress);\r",
											"        utils.validateIfNonEmpty(outputData[0].customerId);\r",
											"        utils.validateIfNonEmpty(outputData[0].smsNumber);\r",
											"        utils.validateIfNonEmpty(outputData[0].lastModified);\r",
											"        utils.validateIfNonEmpty(outputData[0].deviceId);\r",
											"        \r",
											"        // utils.validateIfNonEmpty(outputData[1].parentId);\r",
											"    \r",
											"        // pm.expect(outputData[0].parentId).to.equal(outputData[1].parentId);\r",
											"        // pm.expect(outputData[0].customerKey).to.equal(outputData[1].customerKey);\r",
											"        // pm.expect(outputData[0].emailAddress).to.equal(outputData[1].emailAddress);\r",
											"        // pm.expect(outputData[0].smsNumber).to.equal(outputData[1].smsNumber);\r",
											"        // pm.expect(outputData[0].deviceId).to.equal(outputData[1].deviceId);\r",
											"\r",
											"        // pm.expect(outputData[0].customerId).to.not.equal(outputData[1].customerId);\r",
											"    });\r",
											"}\r",
											"\r",
											"this.defineInputDataToDisplay = () => {\r",
											"    let inputDataToDisplay =\r",
											"        \"[\"\r",
											"        + \"contextId=\" + inputData.contextId + \", \"\r",
											"        + \"emailAddress=\" + inputData.emailAddress + \", \"\r",
											"        + \"parentId=\" + inputData.parentId\r",
											"        + \"]\";\r",
											"    return inputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineOutputDataToDisplay = () => {\r",
											"    let outputDataToDisplay = \"[ \" + JSON.stringify(outputData[0]) + \" || \"\r",
											"            + JSON.stringify(outputData[1]) + \" ]\";\r",
											"    return outputDataToDisplay;\r",
											"}\r",
											"\r",
											"this.defineExistingDataToDisplay = () => {\r",
											"    let imsMatchDataRecord1 = existingRecords.imsRecord1;\r",
											"    let imsMatchDataRecord2 = existingRecords.imsRecord2;\r",
											"    let existingDataToDisplay = \"[\"\r",
											"        + \"contextId=\" + imsMatchDataRecord1.contextId + \", \"\r",
											"        + \"customerKey=\" + imsMatchDataRecord1.customerKey + \", \"\r",
											"        + \"emailAddress=\" + imsMatchDataRecord1.emailAddress + \", \"\r",
											"        + \"customerId=\" + imsMatchDataRecord1.customerId + \", \"\r",
											"        + \"smsNumber=\" + imsMatchDataRecord1.smsNumber + \", \"\r",
											"        + \"deviceId=\" + imsMatchDataRecord1.deviceId + \", \"\r",
											"        + \"parentId=\" + imsMatchDataRecord1.parentId + \"] || [\"\r",
											"\r",
											"        + \"contextId=\" + imsMatchDataRecord2.contextId + \", \"\r",
											"        + \"customerKey=\" + imsMatchDataRecord2.customerKey + \", \"\r",
											"        + \"emailAddress=\" + imsMatchDataRecord2.emailAddress + \", \"\r",
											"        + \"customerId=\" + imsMatchDataRecord2.customerId + \", \"\r",
											"        + \"smsNumber=\" + imsMatchDataRecord2.smsNumber + \", \"\r",
											"        + \"deviceId=\" + imsMatchDataRecord2.deviceId + \", \"\r",
											"        + \"parentId=\" + imsMatchDataRecord2.parentId\r",
											"        + \"]\";\r",
											"    return existingDataToDisplay;\r",
											"};\r",
											"\r",
											"//EXECUTION==============================================================================================================================================//\r",
											"\r",
											"utils.validateAll(this);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"7352\",\r",
											"                    sprint: \"Q2-2020\",\r",
											"                    subject: \"IMS > lookup\",\r",
											"                    tags: \"#IMS#IMSLookUp\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											"//INITIALIZATION==============================================================================================================================================//\r",
											"const utils = eval(globals.connectUtils);\r",
											"let existingRecords = { \"imsRecord1\": \"\", \"imsRecord2\": \"\" };\r",
											"let preRequest1Data = {};\r",
											"//DEFINATION=================================================================================================================================================//\r",
											"\r",
											"let getPreRequest1 = () => {\r",
											"    let testerInput = {};\r",
											"    preRequest1Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest1Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"\r",
											"this.saveExistingDataFromPreRequest1 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerId\": preRequest1Data.customerId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord1 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"\r",
											"this.setCurrentRequestDataFromPrerequest1 = (outputData) => {\r",
											"    pm.variables.set(\"contextId\", existingRecords.imsRecord1.contextId);\r",
											"    pm.variables.set(\"emailAddress\", existingRecords.imsRecord1.emailAddress);\r",
											"    pm.variables.set(\"parentId\", existingRecords.imsRecord1.parentId);\r",
											"}\r",
											"\r",
											"let getPreRequest2 = () => {\r",
											"    let testerInput = {\r",
											"        \"contextId\": preRequest1Data.contextId,\r",
											"        \"customerKey\": preRequest1Data.customerKey,\r",
											"        \"emailAddress\": preRequest1Data.emailAddress,\r",
											"        \"smsNumber\": preRequest1Data.smsNumber,\r",
											"        \"deviceId\": preRequest1Data.deviceId,\r",
											"        \"parentId\": preRequest1Data.parentId\r",
											"    };\r",
											"    preRequest2Data = utils.generateIMSInput(testerInput);\r",
											"    let requestDetail = {\r",
											"        \"data\": preRequest2Data,\r",
											"        \"url\": pm.environment.get(\"URL_IMS_INSERT\"),\r",
											"        \"msg\":\"Generate data for ims record match\"\r",
											"    };\r",
											"    return requestDetail;\r",
											"}\r",
											"this.saveExistingDataFromPreRequest2 = (outputData) => {\r",
											"    let existingRecord = {\r",
											"        \"contextId\": preRequest2Data.contextId,\r",
											"        \"customerId\": preRequest2Data.customerId,\r",
											"        \"customerKey\": preRequest2Data.customerKey,\r",
											"        \"emailAddress\": preRequest2Data.emailAddress,\r",
											"        \"smsNumber\": preRequest2Data.smsNumber,\r",
											"        \"deviceId\": preRequest2Data.deviceId,\r",
											"        \"parentId\": preRequest2Data.parentId,\r",
											"    };\r",
											"    existingRecords.imsRecord2 = existingRecord;\r",
											"    pm.variables.set(\"existingRecords\", JSON.stringify(existingRecords));\r",
											"}\r",
											"this.setCurrentRequestDataFromPrerequest2 = (outputData) => {\r",
											"    // Not applicable\r",
											"}\r",
											"//EXECUTION================================================================================================================================================//\r",
											"let preRequest1Detail = getPreRequest1();\r",
											"utils.submitIMSPostRequest(this, preRequest1Detail, \"preRequest1\");\r",
											"let preRequest2Detail = getPreRequest2();\r",
											"utils.submitIMSPostRequest(this, preRequest2Detail, \"preRequest2\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contextId\": \"{{contextId}}\",\r\n    \"parentId\": \"{{parentId}}\",\r\n    \"emailAddress\": \"{{emailAddress}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/ims/lookup",
									"host": [
										"{{server}}"
									],
									"path": [
										"ims",
										"lookup"
									]
								},
								"description": "&#9724; **JIRA -**  [https://jira.cnvrmedia.net/browse/PID-7352](https://jira.cnvrmedia.net/browse/PID-7352)\n\n&#9724; **NAME:** Lookup existing profiles with matching parentID and attributes\n\n&#9724; **DESCRIPTION:**  IMS-lookup request - Lookup existing profiles with matching parentID and attributes\n\n&#9724; **PRECONDITION:** \n*   The record exists for same \"parentId\" and attributes with different \"customerId\"\n\n&#9724; **EXPECTED RESULT:**\n*   All multiple matches are returned in the response.\n\n&#9724; **INPUT FIELDS:**\n*   \"contextId\"\n*   \"customerKey\"\n*   \"parentId\"\n*   \"smsNumber\"\n*   \"emailAddress\"\n*   \"deviceId\"\n\n&#9724; **OUTPUT FIELDS:**\n*   \"customerKey\"\n*   \"emailAddress\"\n*   \"customerId\"\n*   \"smsNumber\"\n*   \"lastModified\"\n*   \"deviceId\"\n*   \"parentId\""
							},
							"response": []
						},
						{
							"name": "terminate-ims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Terminating \" + pm.variables.get(\"folder\"), ()=>{});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({\"key\":\"folder\", \"value\":\"IMS\"});",
									"pm.variables.set(\"folder\",\"ims\");",
									"pm.variables.set(\"parentFolder\",\"ims\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "INPROGRESS",
					"item": [
						{
							"name": "Batch >Verify phone sha field in the output file for a DMS request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"\",\r",
											"                    sprint: \"22.02.05\",\r",
											"                    subject: \"batch\",\r",
											"                    tags: \"#Batch#DMS#52FIELDS\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"var currentJobId = JSON.parse(responseBody).jobId;\r",
											"utils.validateBatchResponse(currentJobId);\r",
											"if(typeof(currentJobId) != 'undefined') {\r",
											"    input = {\r",
											"        \"currentJobId\": currentJobId, \r",
											"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"      let validate = (jobStatusDetails) =>{\r",
											"        pm.test(\"Validate output -> DMS output file should be generated.).\",()=> {\r",
											"            utils.validateIfNonEmpty(jobStatusDetails.dmsOutputFile);\r",
											"        });\r",
											"    }\r",
											"    utils.getDMSBatchOutput(input,validate);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "dms_test",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"serviceConfig\": {\r\n    \"configAddressHygiene\": {\r\n      \"enablePac\": \"no\",\r\n      \"enablePcoa\": \"no\",\r\n      \"enableNcoa\": \"no\",\r\n      \"enableDsf2\": \"no\",\r\n      \"enableDsfWalkSequence\": \"no\"\r\n    },\r\n    \"enableAddressHygiene\": \"yes\",\r\n    \"enableEmailHygiene\": \"yes\",\r\n    \"enableGlobalSuppression\": \"no\",\r\n    \"enableIdentity\": \"yes\",\r\n    \"enableNameHygiene\": \"yes\",\r\n    \"enableOccupancyScore\": \"no\",\r\n    \"enablePhoneHygiene\": \"yes\",\r\n    \"enableTspAppend\": \"no\"\r\n  },\r\n  \"sourceFile\": \"{{DATAFILE_DMS_52FIELDS}}\",\r\n  \"clientCorrelationId\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								}
							},
							"response": []
						},
						{
							"name": "NCOA_LATENCY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"\",\r",
											"                    sprint: \"22.02.05\",\r",
											"                    subject: \"us-batch\",\r",
											"                    tags: \"#USBatch#NCOA\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"var currentJobId = JSON.parse(responseBody).jobId;\r",
											"utils.validateBatchResponse(currentJobId);\r",
											"if(typeof(currentJobId) != 'undefined') {\r",
											"    input = {\r",
											"        \"currentJobId\": currentJobId, \r",
											"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_NCOA_LATENCY_RECORDS}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"yes\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}"
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								}
							},
							"response": []
						},
						{
							"name": "PO FIELD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"\",\r",
											"                    sprint: \"22.02.05\",\r",
											"                    subject: \"us-batch\",\r",
											"                    tags: \"#USBatch#NCOA#POFIELD\"\r",
											"                })\r",
											"    });\r",
											"})();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"var currentJobId = JSON.parse(responseBody).jobId;\r",
											"utils.validateBatchResponse(currentJobId);\r",
											"if(typeof(currentJobId) != 'undefined') {\r",
											"    input = {\r",
											"        \"currentJobId\": currentJobId, \r",
											"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"      let validate = (jobStatusDetails) =>{\r",
											"        pm.test(\"Validate output -> parsed address file should be generated.).\",()=> {\r",
											"            utils.validateIfNonEmpty(jobStatusDetails.parsedAddressFile);\r",
											"        });\r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_PUBLIC_ENDPOINT}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_BATCH_PO_FIELD}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"no\",\r\n \"enablePcoa\": \"no\",\r\n \"enableNcoa\": \"yes\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}"
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								}
							},
							"response": []
						},
						{
							"name": "USBatch_pac_corrections_without_secondary_data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//=============================================================================================================================\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"\",\r",
											"                    sprint: \"22.02.05\",\r",
											"                    subject: \"us-batch-pac-correction\",\r",
											"                    tags: \"#USBatch#Cass#Name#Email#Phone#pac#pcoa#tsp#Identity\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"var currentJobId = JSON.parse(responseBody).jobId;\r",
											"utils.validateBatchResponse(currentJobId);\r",
											"if(typeof(currentJobId) != 'undefined') {\r",
											"    input = {\r",
											"        \"currentJobId\": currentJobId, \r",
											"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_BATCH_WITHOUT_SECONDARY_DETAILS}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"yes\",\r\n \"enablePcoa\": \"yes\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}"
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pac corrections with secondary data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"(function setMetadata() {\r",
											"    pm.request.headers.add({ \r",
											"        \"key\": \"testInfo\",\r",
											"         \"value\": JSON.stringify({\r",
											"                    pid: \"\",\r",
											"                    sprint: \"22.02.05\",\r",
											"                    subject: \"us-batch-pac-correction\",\r",
											"                    tags: \"#USBatch#Cass#Name#Email#Phone#pac#pcoa#tsp#Identity\"\r",
											"                })\r",
											"    });\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.connectUtils);\r",
											"var currentJobId = JSON.parse(responseBody).jobId;\r",
											"utils.validateBatchResponse(currentJobId);\r",
											"if(typeof(currentJobId) != 'undefined') {\r",
											"    input = {\r",
											"        \"currentJobId\": currentJobId, \r",
											"        \"clientCode\" : pm.request.headers.get(\"clientCode\") \r",
											"    }\r",
											"    utils.validateJobStatus(input);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientCode",
										"value": "{{CCODE_BATCH}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"sourceFile\": \"{{DATAFILE_BATCH_WITH_SECONDARY_DETAILS}}\",\r\n \"serviceConfig\": {\r\n\"enableNameHygiene\": \"yes\",\r\n\"enableEmailHygiene\": \"yes\",\r\n\"enablePhoneHygiene\": \"yes\",\r\n\"enableAddressHygiene\": \"yes\",\r\n\"configAddressHygiene\": {\r\n \"enablePac\": \"yes\",\r\n \"enablePcoa\": \"yes\",\r\n \"enableNcoa\": \"no\",\r\n \"enableDSF2\": \"no\",\r\n \"enableDSFWalkSequence\": \"no\"\r\n},\r\n\"enableIdentity\": \"yes\",\r\n\"enableOccupancyScore\": \"yes\",\r\n\"enableGlobalSuppression\": \"yes\",\r\n\"enableTspAppend\": \"no\"\r\n }\r\n}"
								},
								"url": {
									"raw": "{{server}}/jobs/v2/connect/initiatejob",
									"host": [
										"{{server}}"
									],
									"path": [
										"jobs",
										"v2",
										"connect",
										"initiatejob"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/**",
							" * If the workflow of test suite is to be controlled explicitly, this is done specifying a request list as environment variable. The following script run when a requestList is enabled, to determine what is the next request to run after each request.",
							"  requestList holds an array of request name i.e \"name\" and whether it is active i.e \"isActive\", possible values are ON/OFF. It doesn't hold \"Initialize Test suite\" request",
							"    Example - ",
							"    [",
							"      {\"name\":\"MyrequestOne\", \"isActive\":\"OFF\"},",
							"      {\"name\":\"MyrequestFive\", \"isActive\":\"ON\"},",
							"      {\"name\":\"MyrequestSix\", \"isActive\":\"ON\"} ]",
							" */",
							"",
							"var requestList = pm.environment.get(\"requestList\");",
							"if(requestList != undefined) {",
							"  var currentRqstIndex = Number(pm.environment.get(\"currentRqstIndex\"));",
							"  var nextRequestName=\"\";",
							"  while(nextRequestName == \"\") {",
							"    if(currentRqstIndex == Number(requestList.length)) {",
							"      nextRequestName = null;",
							"    break;",
							"    }",
							"    var requestDetail = requestList[currentRqstIndex++];",
							"    pm.environment.set(\"currentRqstIndex\", currentRqstIndex);  ",
							"    if(requestDetail.isActive != \"OFF\") {",
							"      console.log(nextRequestName);",
							"      nextRequestName = requestDetail.name;",
							"    }",
							"  }",
							"  postman.setNextRequest(nextRequestName);",
							"}"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}